{"file_contents":{"design_guidelines.md":{"content":"# LAVIE VAPES Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from modern e-commerce leaders like Shopify and youth-focused brands like Supreme/Off-White. The design emphasizes visual appeal and emotional engagement to drive sales and affiliate sign-ups.\n\n## Core Design Elements\n\n### A. Color Palette\n**Primary Colors:**\n- Electric Purple: 280 85% 60% (brand primary)\n- Neon Blue: 200 100% 50% (accent highlights)\n- Cyber Green: 120 80% 45% (success states, CTA accents)\n\n**Supporting Colors:**\n- Deep Black: 0 0% 8% (backgrounds)\n- Carbon Grey: 0 0% 15% (card backgrounds)\n- Pure White: 0 0% 95% (text, contrasts)\n\n**Gradients:**\n- Hero gradient: Electric Purple to Neon Blue diagonal\n- Card overlays: Black to transparent\n- Button gradients: Purple to Blue horizontal\n\n### B. Typography\n**Primary Font:** Inter (Google Fonts)\n- Headers: 700-900 weight\n- Body: 400-500 weight\n- Buttons/CTAs: 600 weight\n\n**Accent Font:** Orbitron (Google Fonts) for tech/futuristic elements\n- Logo treatment\n- Product model names\n- Special callouts\n\n### C. Layout System\n**Tailwind Spacing Units:** Primarily 4, 8, 12, 16\n- Standard padding: p-8\n- Section spacing: py-16\n- Card spacing: p-6\n- Button padding: px-8 py-4\n\n### D. Component Library\n\n**Navigation:** Fixed header with glass-morphism effect, neon accent on active states\n\n**Product Cards:** Dark cards with gradient borders, hover lift effects, price in neon green\n\n**Buttons:** \n- Primary: Gradient purple-to-blue with white text\n- Secondary: Outline with neon border\n- CTA: Large rounded with glow effects\n\n**Forms:** Dark inputs with neon focus states, floating labels\n\n**Affiliate Levels:** Tiered cards with increasing glow intensity (Agente < Distribuidor < Socio)\n\n### E. Visual Treatments\n\n**Hero Section:** Full-viewport with diagonal gradient overlay, bold typography hierarchy, floating vape product imagery\n\n**Product Categories:** Grid layout with category hover effects and neon accent borders\n\n**Testimonials:** Carousel with user avatars and star ratings in cyber green\n\n**Social Integration:** Instagram-style grid with hover overlays\n\n## Images\n- **Hero Image:** Large lifestyle image of young adults vaping in urban/neon-lit environment\n- **Product Images:** High-res product shots on transparent backgrounds with subtle glow effects\n- **Category Banners:** Lifestyle images for each vape category (CYBER, CUBE, ENERGY, TORCH, BAR)\n- **About Section:** Team/facility images with purple gradient overlays\n- **Testimonial Avatars:** User profile photos in circular frames with neon borders\n\n## Key Design Principles\n1. **Futuristic Aesthetic:** Cyber-punk inspired with neon accents and dark themes\n2. **Youth Appeal:** Bold colors, modern typography, social media integration\n3. **Trust Building:** Professional product photography, clear pricing, testimonials\n4. **Conversion Focus:** Prominent CTAs, streamlined checkout, affiliate incentives\n5. **Mobile-First:** Touch-friendly buttons, optimized imagery, responsive grids","size_bytes":3029},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nVAPEOLO is a comprehensive e-commerce platform for LAVIE vape products featuring a modern React frontend with an Express.js backend. The application serves as both a customer-facing store and an administrative dashboard for managing products, affiliates, and sales. The platform emphasizes a dark, neon-purple aesthetic inspired by modern youth culture and gaming aesthetics, targeting young adults with high-quality vaping products.\n\nThe system supports multiple user types including customers browsing products, potential affiliates applying for partnerships, and administrators managing the entire operation. The application handles product catalogs with multiple variants (CYBER, CUBE, ENERGY, TORCH, BAR models), affiliate program management with different tier levels, contact forms, and comprehensive admin controls.\n\n# Recent Changes\n\n**Shopping Cart System Implementation (September 2025):**\n- Complete e-commerce shopping cart functionality implemented\n- CartContext provides global state management for cart items, quantities, and totals\n- CartModal component displays cart contents with quantity controls and checkout\n- Header integration shows cart icon with item count badge\n- ProductStore integration allows adding products to cart\n- WhatsApp checkout integration for order processing\n- Professional dark theme design with purple/blue gradients\n- Full testing completed - cart functionality working end-to-end\n\n**Previous Updates:**\n- Complete website built with modern futuristic design using neon colors (purple, blue, black) and VAPEOLO branding\n- PostgreSQL database configured with tables for admin users, affiliates, products, sales, and contact messages\n- Backend APIs implemented for all CRUD operations and frontend forms successfully connected to backend\n- Admin dashboard created with authentication, statistics display, and management interfaces\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client application uses a modern React stack built with Vite for optimal development and build performance. The UI is constructed using shadcn/ui components with Radix UI primitives, providing a consistent and accessible component library. The design system leverages Tailwind CSS with custom color schemes including neon purple, blue, and green accents for the LAVIE brand identity.\n\n**State Management**: React Query (TanStack Query) handles server state management, caching, and API synchronization. Local component state uses React hooks for form handling and UI interactions.\n\n**Routing**: Wouter provides lightweight client-side routing with support for admin panel routes and public pages.\n\n**Styling**: Custom Tailwind configuration with brand-specific colors, gradients, and spacing. The design follows a dark theme with neon accents and glassmorphism effects.\n\n## Backend Architecture\nThe server uses Express.js with TypeScript, providing RESTful API endpoints for frontend consumption. The architecture follows a modular approach with separated concerns for routing, storage, and database operations.\n\n**API Structure**: Organized endpoints for public operations (product viewing, affiliate applications, contact forms) and protected admin operations (user management, affiliate approval, product management). Basic authentication middleware protects administrative routes.\n\n**Storage Layer**: Abstracted storage interface providing methods for all database operations including CRUD operations for users, affiliates, products, sales, and contact messages.\n\n**Error Handling**: Centralized error handling with proper HTTP status codes and JSON error responses.\n\n## Data Storage Solutions\n**Database**: PostgreSQL via Neon serverless with Drizzle ORM for type-safe database operations. The schema includes tables for users (admins), affiliates with approval workflow, products with multiple variants, sales tracking, and contact message management.\n\n**Schema Design**: \n- Users table for admin authentication\n- Affiliates table with status tracking (pending/approved/rejected) and tier levels\n- Products table with flexible sabores array and pricing\n- Sales table linking affiliates to products with commission tracking\n- Contact messages table for customer inquiries\n\n**Migration System**: Drizzle Kit handles database migrations and schema changes with version control.\n\n## Authentication and Authorization\n**Admin Authentication**: Basic HTTP authentication for admin panel access with session storage in localStorage. Admin users can manage all aspects of the platform including affiliate approvals and product management.\n\n**Public Access**: No authentication required for customers browsing products or submitting affiliate applications and contact forms.\n\n**Security**: Environment-based database connection strings and basic auth validation for protected routes.\n\n## External Dependencies\n\n### UI and Component Libraries\n- **shadcn/ui with Radix UI**: Complete component library for forms, dialogs, navigation, and data display\n- **Tailwind CSS**: Utility-first styling with custom brand configuration\n- **Lucide React**: Icon library for consistent iconography\n- **React Hook Form**: Form state management and validation\n\n### Database and Backend Services\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Drizzle ORM**: Type-safe database operations and migrations\n- **Express.js**: Web server framework with middleware support\n\n### Development and Build Tools\n- **Vite**: Fast development server and build tool with HMR\n- **TypeScript**: Type safety across frontend and backend\n- **React Query**: Server state management and caching\n- **Wouter**: Lightweight routing solution\n\n### Additional Libraries\n- **date-fns**: Date manipulation and formatting\n- **clsx/tailwind-merge**: Conditional CSS class handling\n- **Embla Carousel**: Product image carousels (configured but not fully implemented)\n- **class-variance-authority**: Component variant management","size_bytes":5997},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // LAVIE VAPES custom colors\n        'neon-purple': '280 85% 60%',\n        'neon-blue': '200 100% 50%',\n        'cyber-green': '120 80% 45%',\n        'deep-black': '0 0% 8%',\n        'carbon-grey': '0 0% 15%',\n        \n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4277},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import dotenv from \"dotenv\";\ndotenv.config(); // Load environment variables from .env file\n\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2158},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\nimport { products, productFlavors } from \"@shared/schema\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport rateLimit from \"express-rate-limit\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { \n  insertAffiliateSchema, \n  insertProductSchema, \n  insertSaleSchema, \n  insertContactMessageSchema,\n  insertUserSchema,\n  updateUserSchema,\n  updateSelfProfileSchema,\n  changePasswordSchema,\n  adminResetPasswordSchema,\n  insertHomepageContentSchema,\n  insertProductFlavorSchema,\n  updateProductFlavorSchema,\n  isFlavorOutOfStock,\n  type User\n} from \"@shared/schema\";\n\n// Extend Express Request interface to include user property\ninterface AuthenticatedRequest extends Request {\n  user: User;\n}\n\n// JWT_SECRET configuration\nconst JWT_SECRET = process.env.JWT_SECRET || \"dev-secret-key\";\n\nif (process.env.NODE_ENV === \"production\" && !process.env.JWT_SECRET) {\n  console.error(\"FATAL: JWT_SECRET environment variable must be set for production\");\n  process.exit(1);\n}\n\nif (process.env.NODE_ENV === \"production\" && JWT_SECRET === \"dev-secret-key\") {\n  console.error(\"FATAL: Production must use secure JWT_SECRET, not development default\");\n  process.exit(1);\n}\n\n// Password validation utilities\ninterface PasswordValidationResult {\n  isValid: boolean;\n  errors: string[];\n}\n\nfunction validatePasswordStrength(password: string): PasswordValidationResult {\n  const errors: string[] = [];\n  \n  // Minimum length\n  if (password.length < 8) {\n    errors.push(\"La contraseña debe tener al menos 8 caracteres\");\n  }\n  \n  // Maximum length for security\n  if (password.length > 100) {\n    errors.push(\"La contraseña no puede tener más de 100 caracteres\");\n  }\n  \n  // At least one uppercase letter\n  if (!/[A-Z]/.test(password)) {\n    errors.push(\"La contraseña debe contener al menos una letra mayúscula\");\n  }\n  \n  // At least one lowercase letter\n  if (!/[a-z]/.test(password)) {\n    errors.push(\"La contraseña debe contener al menos una letra minúscula\");\n  }\n  \n  // At least one number\n  if (!/[0-9]/.test(password)) {\n    errors.push(\"La contraseña debe contener al menos un número\");\n  }\n  \n  // At least one special character\n  if (!/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(password)) {\n    errors.push(\"La contraseña debe contener al menos un carácter especial\");\n  }\n  \n  // No common patterns\n  const commonPatterns = [\n    /123456/, /password/, /admin/, /qwerty/, /letmein/, /welcome/,\n    /monkey/, /dragon/, /pass/, /master/, /login/, /vapeolo/\n  ];\n  \n  for (const pattern of commonPatterns) {\n    if (pattern.test(password.toLowerCase())) {\n      errors.push(\"La contraseña no puede contener patrones comunes\");\n      break;\n    }\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n}\n\n// Failed login attempt tracking (in-memory for simplicity, in production use Redis or database)\nconst failedAttempts = new Map<string, { count: number; lastAttempt: Date }>();\n\nfunction checkAndUpdateFailedAttempts(email: string): boolean {\n  const key = email.toLowerCase();\n  const attempt = failedAttempts.get(key);\n  const now = new Date();\n  \n  if (!attempt) {\n    failedAttempts.set(key, { count: 1, lastAttempt: now });\n    return true; // First attempt, allow\n  }\n  \n  // Reset counter if last attempt was more than 1 hour ago\n  if (now.getTime() - attempt.lastAttempt.getTime() > 60 * 60 * 1000) {\n    failedAttempts.set(key, { count: 1, lastAttempt: now });\n    return true;\n  }\n  \n  // Block if more than 5 attempts in the last hour\n  if (attempt.count >= 5) {\n    return false;\n  }\n  \n  // Increment counter\n  failedAttempts.set(key, { count: attempt.count + 1, lastAttempt: now });\n  return true;\n}\n\nfunction clearFailedAttempts(email: string): void {\n  failedAttempts.delete(email.toLowerCase());\n}\n\n// Multer configuration for file uploads\nconst storage_config = multer.diskStorage({\n  destination: (req, file, cb) => {\n    const uploadPath = path.join(process.cwd(), 'public', 'uploads', 'products');\n    // Ensure directory exists\n    if (!fs.existsSync(uploadPath)) {\n      fs.mkdirSync(uploadPath, { recursive: true });\n    }\n    cb(null, uploadPath);\n  },\n  filename: (req, file, cb) => {\n    // Generate unique filename with timestamp and original extension\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    const ext = path.extname(file.originalname);\n    cb(null, file.fieldname + '-' + uniqueSuffix + ext);\n  }\n});\n\nconst upload = multer({\n  storage: storage_config,\n  limits: {\n    fileSize: 5 * 1024 * 1024, // 5MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    // Allow only image files\n    const allowedMimes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\n    if (allowedMimes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only image files (JPEG, PNG, WebP) are allowed'));\n    }\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Middleware for JSON parsing\n  app.use(express.json());\n  \n  // Serve static files from uploads directory\n  app.use('/uploads', express.static(path.join(process.cwd(), 'public', 'uploads')));\n\n  // Rate limiting for public routes\n  const publicRateLimit = rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 10, // limit each IP to 10 requests per windowMs\n    message: { error: \"Too many requests, please try again later\" }\n  });\n\n  // Rate limiting for admin login (more restrictive)\n  const loginRateLimit = rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 5, // limit each IP to 5 login attempts per windowMs\n    message: { error: \"Too many login attempts, please try again later\" },\n    standardHeaders: true,\n    legacyHeaders: false,\n  });\n\n  // JWT authentication middleware\n  const requireAuth = async (req: Request, res: Response, next: NextFunction) => {\n    const authHeader = req.headers.authorization;\n    if (!authHeader) {\n      return res.status(401).json({ error: \"Authorization required\" });\n    }\n    \n    const [type, token] = authHeader.split(' ');\n    if (type !== 'Bearer') {\n      return res.status(401).json({ error: \"Bearer token required\" });\n    }\n    \n    try {\n      const decoded = jwt.verify(token, JWT_SECRET) as { userId: string; username: string };\n      const user = await storage.getUser(decoded.userId);\n      \n      if (!user) {\n        return res.status(401).json({ error: \"Invalid token\" });\n      }\n      \n      if (!user.active) {\n        return res.status(401).json({ error: \"Account deactivated\" });\n      }\n      \n      (req as AuthenticatedRequest).user = user;\n      next();\n    } catch (error) {\n      return res.status(401).json({ error: \"Invalid token\" });\n    }\n  };\n\n  // Role-based access control middleware\n  const requireRole = (...allowedRoles: string[]) => {\n    return (req: Request, res: Response, next: NextFunction) => {\n      const authReq = req as AuthenticatedRequest;\n      if (!authReq.user) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n      \n      if (!allowedRoles.includes(authReq.user.role)) {\n        return res.status(403).json({ error: \"Insufficient permissions\" });\n      }\n      \n      next();\n    };\n  };\n\n  // Permission-based access control middleware\n  const requirePermission = (...permissions: Array<keyof Pick<User, 'editInventory' | 'addProduct' | 'deleteItems' | 'deleteAffiliate' | 'authorizeAffiliate' | 'pauseAffiliate'>>) => {\n    return (req: Request, res: Response, next: NextFunction) => {\n      const authReq = req as AuthenticatedRequest;\n      if (!authReq.user) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n      \n      // Admin role bypasses all permission checks\n      if (authReq.user.role === 'admin') {\n        return next();\n      }\n      \n      // Check if user has all required permissions\n      const hasAllPermissions = permissions.every(permission => {\n        return authReq.user[permission] === true;\n      });\n      \n      if (!hasAllPermissions) {\n        return res.status(403).json({ error: \"Insufficient permissions for this operation\" });\n      }\n      \n      next();\n    };\n  };\n\n  // Public routes (frontend)\n  \n  // Create affiliate application (with rate limiting)\n  app.post(\"/api/affiliates\", publicRateLimit, async (req, res) => {\n    try {\n      const validatedData = insertAffiliateSchema.parse(req.body);\n      const affiliate = await storage.createAffiliate(validatedData);\n      res.json({ success: true, data: affiliate });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Create contact message (with rate limiting)\n  app.post(\"/api/contact\", publicRateLimit, async (req, res) => {\n    try {\n      const validatedData = insertContactMessageSchema.parse(req.body);\n      const message = await storage.createContactMessage(validatedData);\n      res.json({ success: true, data: message });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Get active products with flavors (public)\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      // Use the updated storage method that properly handles flavor-level availability\n      const availableProducts = await storage.getActiveProducts();\n      \n      // Filter to only include products that should be shown on homepage\n      const homepageProducts = availableProducts.filter(product => product.showOnHomepage);\n      \n      // Get flavors for each available product and apply server-side filtering\n      const productsWithFlavors = [];\n      \n      for (const product of homepageProducts) {\n        const flavors = await storage.getProductFlavors(product.id);\n        \n        if (flavors.length === 0) {\n          // Product without flavors - include for backward compatibility\n          // Only if product-level inventory is available (already checked in getActiveProducts)\n          productsWithFlavors.push({\n            ...product,\n            flavors: []\n          });\n        } else {\n          // Product with flavors - apply server-side filtering\n          const activeFlavors = flavors.filter(flavor => flavor.active);\n          \n          // Server-side enforcement: only include flavors with available inventory > 0\n          const availableFlavors = activeFlavors.filter(flavor => {\n            return !isFlavorOutOfStock(flavor);\n          });\n          \n          // Only include product if it has at least one available flavor\n          // (This check should always pass due to getActiveProducts filtering)\n          if (availableFlavors.length > 0) {\n            productsWithFlavors.push({\n              ...product,\n              flavors: availableFlavors // Only return available flavors\n            });\n          }\n        }\n      }\n      \n      res.json({ success: true, data: productsWithFlavors });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Place order and deduct inventory (public)\n  app.post(\"/api/orders\", publicRateLimit, async (req, res) => {\n    try {\n      const { cartItems, customerData } = req.body;\n      \n      if (!cartItems || !Array.isArray(cartItems) || cartItems.length === 0) {\n        return res.status(400).json({ error: \"Cart items are required\" });\n      }\n      \n      if (!customerData || !customerData.firstName || !customerData.phone) {\n        return res.status(400).json({ error: \"Customer data is required\" });\n      }\n      \n      // Process each cart item and deduct flavor inventory\n      const orderItems = [];\n      \n      for (const item of cartItems) {\n        if (!item.id || !item.flavor || !item.quantity || item.quantity <= 0) {\n          return res.status(400).json({ error: \"Invalid cart item format\" });\n        }\n        \n        // Get product and find the specific flavor\n        const product = await storage.getProduct(item.id);\n        if (!product) {\n          return res.status(400).json({ error: `Product not found: ${item.id}` });\n        }\n        \n        const flavors = await storage.getProductFlavors(product.id);\n        const flavor = flavors.find(f => f.name === item.flavor && f.active);\n        \n        if (!flavor) {\n          return res.status(400).json({ error: `Flavor not available: ${item.flavor}` });\n        }\n        \n        // Check if sufficient inventory is available\n        const availableInventory = Math.max(0, flavor.inventory - flavor.reservedInventory);\n        if (availableInventory < item.quantity) {\n          return res.status(400).json({ \n            error: `Insufficient inventory for ${product.name} - ${flavor.name}. Available: ${availableInventory}, Requested: ${item.quantity}` \n          });\n        }\n        \n        // Reserve the inventory by increasing reservedInventory\n        await storage.updateProductFlavor(flavor.id, {\n          reservedInventory: flavor.reservedInventory + item.quantity\n        });\n        \n        orderItems.push({\n          productId: product.id,\n          productName: product.name,\n          flavorId: flavor.id,\n          flavorName: flavor.name,\n          quantity: item.quantity,\n          unitPrice: parseFloat(product.price),\n          totalPrice: parseFloat(product.price) * item.quantity\n        });\n      }\n      \n      // Calculate order total\n      const orderTotal = orderItems.reduce((sum, item) => sum + item.totalPrice, 0);\n      \n      // Create a sale record for tracking\n      const saleData = {\n        productId: orderItems[0].productId, // Use first product as main product\n        quantity: orderItems.reduce((sum, item) => sum + item.quantity, 0),\n        unitPrice: (orderTotal / orderItems.reduce((sum, item) => sum + item.quantity, 0)).toFixed(2),\n        totalAmount: orderTotal.toFixed(2),\n        customerName: `${customerData.firstName} ${customerData.lastName}`,\n        customerEmail: customerData.email || '',\n        customerPhone: customerData.phone,\n        discount: '0'\n      };\n      \n      const sale = await storage.createSale(saleData);\n      \n      res.json({ \n        success: true, \n        data: { \n          orderId: sale.id,\n          items: orderItems,\n          total: orderTotal,\n          message: \"Order placed successfully. Inventory has been reserved.\"\n        }\n      });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Get homepage content (public)\n  app.get(\"/api/homepage-content\", async (req, res) => {\n    try {\n      const allContent = await storage.getHomepageContent();\n      // Filter only active content for public consumption\n      const activeContent = allContent.filter(content => content.active);\n      \n      // Transform to a more convenient object structure for frontend\n      const contentMap = activeContent.reduce((acc, content) => {\n        acc[content.section] = {\n          title: content.title,\n          subtitle: content.subtitle,\n          description: content.description,\n          buttonText: content.buttonText,\n          buttonUrl: content.buttonUrl,\n          content: content.content\n        };\n        return acc;\n      }, {} as Record<string, any>);\n      \n      res.json({ success: true, data: contentMap });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Admin routes (require authentication)\n  \n  // Image upload endpoint for products\n  app.post(\"/api/admin/products/upload-image\", requireAuth, requirePermission('addProduct'), upload.single('image'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No image file provided\" });\n      }\n      \n      // Return the relative path that can be stored in database\n      const imagePath = `products/${req.file.filename}`;\n      \n      res.json({ \n        success: true, \n        data: { \n          imagePath: imagePath,\n          filename: req.file.filename,\n          originalName: req.file.originalname,\n          size: req.file.size\n        } \n      });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message || \"Failed to upload image\" });\n    }\n  });\n  \n  // Admin login (with rate limiting)\n  app.post(\"/api/admin/login\", loginRateLimit, async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      const user = await storage.getUserByUsername(username);\n      \n      if (!user) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n      \n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n      \n      // Generate JWT token\n      const token = jwt.sign(\n        { userId: user.id, username: user.username }, \n        JWT_SECRET, \n        { expiresIn: '24h' }\n      );\n      \n      res.json({ \n        success: true, \n        data: { \n          user: { \n            id: user.id, \n            username: user.username, \n            role: user.role,\n            editInventory: user.editInventory,\n            addProduct: user.addProduct,\n            deleteItems: user.deleteItems,\n            deleteAffiliate: user.deleteAffiliate,\n            authorizeAffiliate: user.authorizeAffiliate,\n            pauseAffiliate: user.pauseAffiliate\n          },\n          token: `Bearer ${token}`\n        }\n      });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Profile management routes\n  app.get(\"/api/admin/me\", requireAuth, async (req, res) => {\n    try {\n      const user = (req as AuthenticatedRequest).user;\n      res.json({ \n        success: true, \n        data: { \n          id: user.id, \n          username: user.username, \n          role: user.role, \n          active: user.active,\n          createdAt: user.createdAt \n        } \n      });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.patch(\"/api/admin/me\", requireAuth, async (req, res) => {\n    try {\n      // SECURITY: Only allow username updates for self-profile\n      // Role and active status can only be modified by admins through /api/admin/users/:id\n      const validatedData = updateSelfProfileSchema.parse(req.body);\n      const updatedUser = await storage.updateUser((req as AuthenticatedRequest).user.id, validatedData);\n      \n      res.json({ \n        success: true, \n        data: { \n          id: updatedUser.id, \n          username: updatedUser.username, \n          role: updatedUser.role, \n          active: updatedUser.active,\n          createdAt: updatedUser.createdAt \n        } \n      });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.patch(\"/api/admin/me/password\", requireAuth, async (req, res) => {\n    try {\n      const validatedData = changePasswordSchema.parse(req.body);\n      \n      // Verify current password\n      const isValidPassword = await bcrypt.compare(validatedData.currentPassword, (req as AuthenticatedRequest).user.password);\n      if (!isValidPassword) {\n        return res.status(400).json({ error: \"Current password is incorrect\" });\n      }\n      \n      // Validate new password strength\n      const passwordValidation = validatePasswordStrength(validatedData.newPassword);\n      if (!passwordValidation.isValid) {\n        return res.status(400).json({ \n          error: \"Password validation failed\", \n          details: passwordValidation.errors \n        });\n      }\n      \n      // Hash new password\n      const hashedPassword = await bcrypt.hash(validatedData.newPassword, 10);\n      \n      // Update password\n      await storage.setUserPassword((req as AuthenticatedRequest).user.id, hashedPassword);\n      \n      res.json({ success: true, data: { message: \"Password updated successfully\" } });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // User management routes (admin-only)\n  app.get(\"/api/admin/users\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const users = await storage.listUsers();\n      const safeUsers = users.map(user => ({\n        id: user.id,\n        username: user.username,\n        role: user.role,\n        active: user.active,\n        editInventory: user.editInventory,\n        addProduct: user.addProduct,\n        deleteItems: user.deleteItems,\n        deleteAffiliate: user.deleteAffiliate,\n        authorizeAffiliate: user.authorizeAffiliate,\n        pauseAffiliate: user.pauseAffiliate,\n        createdAt: user.createdAt\n      }));\n      \n      res.json({ success: true, data: safeUsers });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/users\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n      \n      // Validate password strength\n      const passwordValidation = validatePasswordStrength(validatedData.password);\n      if (!passwordValidation.isValid) {\n        return res.status(400).json({ \n          error: \"Password validation failed\", \n          details: passwordValidation.errors \n        });\n      }\n      \n      // Hash password\n      const hashedPassword = await bcrypt.hash(validatedData.password, 10);\n      \n      // Create user\n      const newUser = await storage.createUser({\n        ...validatedData,\n        password: hashedPassword\n      });\n      \n      res.json({ \n        success: true, \n        data: { \n          id: newUser.id, \n          username: newUser.username, \n          role: newUser.role, \n          active: newUser.active,\n          editInventory: newUser.editInventory,\n          addProduct: newUser.addProduct,\n          deleteItems: newUser.deleteItems,\n          deleteAffiliate: newUser.deleteAffiliate,\n          authorizeAffiliate: newUser.authorizeAffiliate,\n          pauseAffiliate: newUser.pauseAffiliate,\n          createdAt: newUser.createdAt \n        } \n      });\n    } catch (error: any) {\n      if (error.code === '23505') { // PostgreSQL unique constraint violation\n        res.status(400).json({ error: \"Username already exists\" });\n      } else {\n        res.status(400).json({ error: error.message });\n      }\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = updateUserSchema.parse(req.body);\n      \n      // Check if trying to deactivate the last admin\n      if (validatedData.active === false) {\n        const targetUser = await storage.getUser(id);\n        if (targetUser && targetUser.role === 'admin') {\n          const allUsers = await storage.listUsers();\n          const activeAdmins = allUsers.filter(u => u.role === 'admin' && u.active && u.id !== id);\n          \n          if (activeAdmins.length === 0) {\n            return res.status(400).json({ \n              error: \"Cannot deactivate the last active admin user\" \n            });\n          }\n        }\n      }\n      \n      const updatedUser = await storage.updateUser(id, validatedData);\n      \n      res.json({ \n        success: true, \n        data: { \n          id: updatedUser.id, \n          username: updatedUser.username, \n          role: updatedUser.role, \n          active: updatedUser.active,\n          editInventory: updatedUser.editInventory,\n          addProduct: updatedUser.addProduct,\n          deleteItems: updatedUser.deleteItems,\n          deleteAffiliate: updatedUser.deleteAffiliate,\n          authorizeAffiliate: updatedUser.authorizeAffiliate,\n          pauseAffiliate: updatedUser.pauseAffiliate,\n          createdAt: updatedUser.createdAt \n        } \n      });\n    } catch (error: any) {\n      if (error.code === '23505') { // PostgreSQL unique constraint violation\n        res.status(400).json({ error: \"Username already exists\" });\n      } else {\n        res.status(400).json({ error: error.message });\n      }\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id/password\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = adminResetPasswordSchema.parse(req.body);\n      \n      // Validate password strength\n      const passwordValidation = validatePasswordStrength(validatedData.newPassword);\n      if (!passwordValidation.isValid) {\n        return res.status(400).json({ \n          error: \"Password validation failed\", \n          details: passwordValidation.errors \n        });\n      }\n      \n      // Hash new password\n      const hashedPassword = await bcrypt.hash(validatedData.newPassword, 10);\n      \n      // Update password\n      await storage.setUserPassword(id, hashedPassword);\n      \n      res.json({ success: true, data: { message: \"Password reset successfully\" } });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Delete user endpoint\n  app.delete(\"/api/admin/users/:id\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const currentUserId = (req as AuthenticatedRequest).user.id;\n      \n      // Prevent self-deletion\n      if (id === currentUserId) {\n        return res.status(400).json({ error: \"No puedes eliminar tu propia cuenta\" });\n      }\n      \n      // Check if user exists\n      const userToDelete = await storage.getUser(id);\n      if (!userToDelete) {\n        return res.status(404).json({ error: \"Usuario no encontrado\" });\n      }\n      \n      // Count active admin users\n      const allUsers = await storage.listUsers();\n      const activeAdmins = allUsers.filter(user => user.role === 'admin' && user.active);\n      \n      // Prevent deleting the last active admin\n      if (userToDelete.role === 'admin' && userToDelete.active && activeAdmins.length <= 1) {\n        return res.status(400).json({ error: \"No puedes eliminar el último administrador activo\" });\n      }\n      \n      // Delete user\n      await storage.deleteUser(id);\n      \n      res.json({ success: true, data: { message: \"Usuario eliminado exitosamente\" } });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Distributor login (with rate limiting)\n  app.post(\"/api/auth/distributor/login\", loginRateLimit, async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ error: \"Email y contraseña son requeridos\" });\n      }\n\n      // Check for too many failed attempts\n      if (!checkAndUpdateFailedAttempts(email)) {\n        return res.status(429).json({ error: \"Demasiados intentos fallidos. Intenta de nuevo en una hora.\" });\n      }\n\n      const affiliate = await storage.getAffiliateByEmail(email);\n      \n      if (!affiliate) {\n        return res.status(401).json({ error: \"Credenciales inválidas\" });\n      }\n      \n      if (affiliate.status !== 'approved') {\n        return res.status(401).json({ error: \"Tu cuenta aún no ha sido aprobada\" });\n      }\n\n      if (!affiliate.password) {\n        return res.status(401).json({ error: \"Tu cuenta no tiene contraseña asignada. Contacta al administrador.\" });\n      }\n      \n      const isValidPassword = await bcrypt.compare(password, affiliate.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ error: \"Credenciales inválidas\" });\n      }\n      \n      // Clear failed attempts on successful login\n      clearFailedAttempts(email);\n      \n      res.json({ \n        success: true, \n        data: {\n          id: affiliate.id,\n          name: affiliate.name,\n          email: affiliate.email,\n          phone: affiliate.phone,\n          level: affiliate.level,\n          discount: affiliate.discount,\n          minimumPurchase: affiliate.minimumPurchase,\n          status: affiliate.status\n        }\n      });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/admin/dashboard\", requireAuth, async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json({ success: true, data: stats });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Affiliate management\n  app.get(\"/api/admin/affiliates\", requireAuth, async (req, res) => {\n    try {\n      const affiliates = await storage.getAffiliates();\n      res.json({ success: true, data: affiliates });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.patch(\"/api/admin/affiliates/:id/status\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n      \n      // Validate status update\n      if (!status || ![\"pending\", \"approved\", \"rejected\", \"standby\"].includes(status)) {\n        return res.status(400).json({ error: \"Invalid status value\" });\n      }\n      \n      // Check permissions based on status being set\n      const authReq = req as AuthenticatedRequest;\n      if (authReq.user.role !== 'admin') {\n        if (status === 'approved' && !authReq.user.authorizeAffiliate) {\n          return res.status(403).json({ error: \"Insufficient permissions to authorize affiliates\" });\n        }\n        if (status === 'standby' && !authReq.user.pauseAffiliate) {\n          return res.status(403).json({ error: \"Insufficient permissions to pause affiliates\" });\n        }\n      }\n      \n      const affiliate = await storage.updateAffiliateStatus(id, status, (req as any).user.id);\n      res.json({ success: true, data: affiliate });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Set affiliate password (admin only)\n  app.patch(\"/api/admin/affiliates/:id/password\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { password } = req.body;\n      \n      if (!password) {\n        return res.status(400).json({ error: \"Contraseña es requerida\" });\n      }\n      \n      // Validate password strength\n      const validation = validatePasswordStrength(password);\n      if (!validation.isValid) {\n        return res.status(400).json({ \n          error: \"Contraseña no cumple con los requisitos de seguridad\",\n          details: validation.errors \n        });\n      }\n      \n      // Hash password\n      const saltRounds = 12;\n      const hashedPassword = await bcrypt.hash(password, saltRounds);\n      \n      // Update affiliate password\n      const affiliate = await storage.updateAffiliatePassword(id, hashedPassword);\n      \n      res.json({ \n        success: true, \n        data: { \n          id: affiliate.id, \n          name: affiliate.name, \n          email: affiliate.email,\n          passwordSet: true \n        } \n      });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Delete affiliate (admin only)\n  app.delete(\"/api/admin/affiliates/:id\", requireAuth, requirePermission('deleteAffiliate'), async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Check if affiliate exists\n      const affiliate = await storage.getAffiliate(id);\n      if (!affiliate) {\n        return res.status(404).json({ error: \"Affiliate not found\" });\n      }\n      \n      // Delete affiliate\n      await storage.deleteAffiliate(id);\n      \n      res.json({ \n        success: true, \n        message: \"Affiliate deleted successfully\" \n      });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Product management\n  app.get(\"/api/admin/products\", requireAuth, async (req, res) => {\n    try {\n      const products = await storage.getProducts();\n      \n      // Include flavors for each product for admin view\n      const productsWithFlavors = [];\n      \n      for (const product of products) {\n        const flavors = await storage.getProductFlavors(product.id);\n        productsWithFlavors.push({\n          ...product,\n          flavors: flavors // Include all flavors for admin view\n        });\n      }\n      \n      res.json({ success: true, data: productsWithFlavors });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/products\", requireAuth, requirePermission('addProduct'), async (req, res) => {\n    try {\n      const validatedData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(validatedData);\n      res.json({ success: true, data: product });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.patch(\"/api/admin/products/:id\", requireAuth, requirePermission('editInventory'), async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Validate product update data - allow partial updates\n      const allowedFields = ['name', 'puffs', 'price', 'image', 'sabores', 'description', 'popular', 'active', 'inventory', 'reservedInventory', 'lowStockThreshold'];\n      const updateData = Object.keys(req.body)\n        .filter(key => allowedFields.includes(key))\n        .reduce((obj: any, key) => {\n          obj[key] = req.body[key];\n          return obj;\n        }, {});\n      \n      if (Object.keys(updateData).length === 0) {\n        return res.status(400).json({ error: \"No valid fields to update\" });\n      }\n      \n      // Check editInventory permission if any inventory-related fields are being updated\n      const inventoryFields = ['inventory', 'reservedInventory', 'lowStockThreshold'];\n      const isUpdatingInventory = inventoryFields.some(field => field in updateData);\n      \n      if (isUpdatingInventory) {\n        const authReq = req as AuthenticatedRequest;\n        // Admin role bypasses permission checks\n        if (authReq.user.role !== 'admin' && !authReq.user.editInventory) {\n          return res.status(403).json({ error: \"Insufficient permissions to edit inventory\" });\n        }\n      }\n      \n      // Validate inventory fields if they are being updated\n      if ('inventory' in updateData) {\n        if (!Number.isInteger(updateData.inventory) || updateData.inventory < 0) {\n          return res.status(400).json({ error: \"Inventory must be a non-negative integer\" });\n        }\n      }\n      \n      if ('reservedInventory' in updateData) {\n        if (!Number.isInteger(updateData.reservedInventory) || updateData.reservedInventory < 0) {\n          return res.status(400).json({ error: \"Reserved inventory must be a non-negative integer\" });\n        }\n      }\n      \n      if ('lowStockThreshold' in updateData) {\n        if (!Number.isInteger(updateData.lowStockThreshold) || updateData.lowStockThreshold < 0) {\n          return res.status(400).json({ error: \"Low stock threshold must be a non-negative integer\" });\n        }\n      }\n      \n      // Additional validation: reservedInventory cannot exceed inventory\n      if ('inventory' in updateData && 'reservedInventory' in updateData) {\n        if (updateData.reservedInventory > updateData.inventory) {\n          return res.status(400).json({ error: \"Reserved inventory cannot exceed total inventory\" });\n        }\n      } else if ('reservedInventory' in updateData) {\n        // If only updating reservedInventory, get current inventory from database\n        const currentProduct = await storage.getProduct(id);\n        if (!currentProduct) {\n          return res.status(404).json({ error: \"Product not found\" });\n        }\n        if (updateData.reservedInventory > currentProduct.inventory) {\n          return res.status(400).json({ error: \"Reserved inventory cannot exceed total inventory\" });\n        }\n      } else if ('inventory' in updateData) {\n        // If only updating inventory, ensure it's not less than current reservedInventory\n        const currentProduct = await storage.getProduct(id);\n        if (!currentProduct) {\n          return res.status(404).json({ error: \"Product not found\" });\n        }\n        if (updateData.inventory < currentProduct.reservedInventory) {\n          return res.status(400).json({ error: \"Inventory cannot be less than currently reserved inventory\" });\n        }\n      }\n      \n      const product = await storage.updateProduct(id, updateData);\n      res.json({ success: true, data: product });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.delete(\"/api/admin/products/:id\", requireAuth, requirePermission('deleteItems'), async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Verify product exists before deletion\n      const existingProduct = await storage.getProduct(id);\n      if (!existingProduct) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      \n      // Check if product has any associated sales\n      const sales = await storage.getSales();\n      const productSales = sales.filter(sale => sale.productId === id);\n      \n      if (productSales.length > 0) {\n        return res.status(400).json({ \n          error: \"Cannot delete product with existing sales. Consider deactivating it instead.\",\n          suggestion: \"Set the product as inactive to hide it from customers while preserving sales history.\"\n        });\n      }\n      \n      await storage.deleteProduct(id);\n      res.json({ success: true, message: \"Product and associated flavors deleted successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Seed hardcoded products from ProductStore.tsx\n  app.post(\"/api/admin/products/seed\", requireAuth, requirePermission('addProduct'), async (req, res) => {\n    try {\n      // Hardcoded product data from ProductStore.tsx\n      const hardcodedProducts = [\n        {\n          id: 'cyber',\n          name: 'CYBER',\n          puffs: '20,000 Puffs',\n          price: 'Q240',\n          sabores: ['Mango Ice', 'Blueberry', 'Cola', 'Grape', 'Sandía Chill'],\n          popular: true,\n          description: 'Vape premium CYBER con 20,000 puffs y una gran variedad de sabores refrescantes. Ideal para sesiones prolongadas con calidad superior.'\n        },\n        {\n          id: 'cube',\n          name: 'CUBE',\n          puffs: '20,000 Puffs',\n          price: 'Q220',\n          sabores: ['Strawberry Kiwi', 'Menta', 'Cola', 'Frutas Tropicales', 'Piña'],\n          description: 'Vape CUBE con diseño moderno y 20,000 puffs. Perfecto equilibrio entre sabor y duración con sabores únicos.'\n        },\n        {\n          id: 'energy',\n          name: 'ENERGY',\n          puffs: '15,000 Puffs',\n          price: 'Q170',\n          sabores: ['Blue Razz', 'Mango Chill', 'Fresa', 'Cereza', 'Uva'],\n          description: 'Vape ENERGY con 15,000 puffs y sabores intensos. Diseñado para darte la energía que necesitas durante todo el día.'\n        },\n        {\n          id: 'torch',\n          name: 'TORCH',\n          puffs: '6,000 Puffs',\n          price: 'Q125',\n          sabores: ['Menta', 'Banana Ice', 'Frutos Rojos', 'Chicle', 'Limonada'],\n          description: 'Vape TORCH compacto con 6,000 puffs. Perfecto para llevarlo contigo con sabores frescos y vibrantes.'\n        },\n        {\n          id: 'bar',\n          name: 'BAR',\n          puffs: '800 Puffs',\n          price: 'Q65',\n          sabores: ['Sandía', 'Uva', 'Cola', 'Mango', 'Piña Colada'],\n          description: 'Vape BAR económico con 800 puffs. Ideal para quienes buscan una opción accesible sin comprometer la calidad del sabor.'\n        }\n      ];\n\n      // Image mapping for products\n      const imageMapping: Record<string, string> = {\n        'CYBER': 'CYBER_1757558165027.png',\n        'CUBE': 'CUBE_1757558165026.png', \n        'ENERGY': 'ENERGY_1757558165028.png',\n        'TORCH': 'TORCH (1)_1757558165028.png',\n        'BAR': 'BAR (1)_1757558165026.png'\n      };\n\n      // Transform data to match database schema\n      const transformedProducts = hardcodedProducts.map(product => ({\n        name: product.name,\n        puffs: parseInt(product.puffs.replace(/[,\\s]/g, '').replace('Puffs', '')), // Convert \"20,000 Puffs\" to 20000\n        price: product.price.replace('Q', ''), // Convert \"Q240\" to \"240.00\"\n        image: imageMapping[product.name] || null, // Map product name to image filename\n        sabores: product.sabores,\n        description: product.description,\n        popular: product.popular || false,\n        active: true,\n        inventory: 100, // Default inventory\n        reservedInventory: 0, // Default reserved\n        lowStockThreshold: 10 // Default threshold\n      }));\n\n      // Check for existing products to avoid duplicates\n      const existingProducts = await storage.getProducts();\n      const existingNames = new Set(existingProducts.map(p => p.name));\n\n      let createdCount = 0;\n      let skippedCount = 0;\n      const results = [];\n\n      for (const productData of transformedProducts) {\n        if (existingNames.has(productData.name)) {\n          skippedCount++;\n          results.push({\n            name: productData.name,\n            status: 'skipped',\n            reason: 'Product already exists'\n          });\n        } else {\n          try {\n            const validatedData = insertProductSchema.parse(productData);\n            const product = await storage.createProduct(validatedData);\n            createdCount++;\n            results.push({\n              name: product.name,\n              status: 'created',\n              id: product.id\n            });\n          } catch (error: any) {\n            results.push({\n              name: productData.name,\n              status: 'error',\n              reason: error.message\n            });\n          }\n        }\n      }\n\n      res.json({\n        success: true,\n        message: `Seeding completed: ${createdCount} products created, ${skippedCount} skipped`,\n        data: {\n          created: createdCount,\n          skipped: skippedCount,\n          total: transformedProducts.length,\n          details: results\n        }\n      });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Product Flavor management\n  app.get(\"/api/admin/products/:productId/flavors\", requireAuth, async (req, res) => {\n    try {\n      const { productId } = req.params;\n      \n      // Verify product exists\n      const product = await storage.getProduct(productId);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      \n      const flavors = await storage.getProductFlavors(productId);\n      res.json({ success: true, data: flavors });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/products/:productId/flavors\", requireAuth, requirePermission('editInventory'), async (req, res) => {\n    try {\n      const { productId } = req.params;\n      \n      // Verify product exists\n      const product = await storage.getProduct(productId);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      \n      // Validate and create flavor\n      const flavorData = { ...req.body, productId };\n      const validatedData = insertProductFlavorSchema.parse(flavorData);\n      \n      // Validate inventory constraints\n      if (typeof validatedData.reservedInventory === 'number' && typeof validatedData.inventory === 'number') {\n        if (validatedData.reservedInventory > validatedData.inventory) {\n          return res.status(400).json({ error: \"Reserved inventory cannot exceed total inventory\" });\n        }\n      }\n      \n      const flavor = await storage.createProductFlavor(validatedData);\n      res.json({ success: true, data: flavor });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.patch(\"/api/admin/flavors/:flavorId\", requireAuth, requirePermission('editInventory'), async (req, res) => {\n    try {\n      const { flavorId } = req.params;\n      \n      // Verify flavor exists\n      const existingFlavor = await storage.getProductFlavor(flavorId);\n      if (!existingFlavor) {\n        return res.status(404).json({ error: \"Flavor not found\" });\n      }\n      \n      // Validate update data\n      const validatedData = updateProductFlavorSchema.parse(req.body);\n      \n      // Validate inventory constraints if they are being updated\n      if ('inventory' in validatedData && 'reservedInventory' in validatedData) {\n        if (typeof validatedData.reservedInventory === 'number' && typeof validatedData.inventory === 'number') {\n          if (validatedData.reservedInventory > validatedData.inventory) {\n            return res.status(400).json({ error: \"Reserved inventory cannot exceed total inventory\" });\n          }\n        }\n      } else if ('reservedInventory' in validatedData) {\n        if (typeof validatedData.reservedInventory === 'number') {\n          if (validatedData.reservedInventory > existingFlavor.inventory) {\n            return res.status(400).json({ error: \"Reserved inventory cannot exceed total inventory\" });\n          }\n        }\n      } else if ('inventory' in validatedData) {\n        if (typeof validatedData.inventory === 'number') {\n          if (validatedData.inventory < existingFlavor.reservedInventory) {\n            return res.status(400).json({ error: \"Inventory cannot be less than currently reserved inventory\" });\n          }\n        }\n      }\n      \n      const flavor = await storage.updateProductFlavor(flavorId, validatedData);\n      res.json({ success: true, data: flavor });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.delete(\"/api/admin/flavors/:flavorId\", requireAuth, requirePermission('deleteItems'), async (req, res) => {\n    try {\n      const { flavorId } = req.params;\n      \n      // Verify flavor exists\n      const existingFlavor = await storage.getProductFlavor(flavorId);\n      if (!existingFlavor) {\n        return res.status(404).json({ error: \"Flavor not found\" });\n      }\n      \n      await storage.deleteProductFlavor(flavorId);\n      res.json({ success: true, message: \"Flavor deleted successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Migration endpoint - Convert sabores to product flavors\n  app.post(\"/api/admin/migrate-flavors\", requireAuth, requirePermission('editInventory'), async (req, res) => {\n    try {\n      console.log(\"Starting sabores migration...\");\n      \n      // Get all existing products\n      const allProducts = await storage.getProducts();\n      console.log(`Found ${allProducts.length} products to process`);\n      \n      let totalFlavorsCreated = 0;\n      let totalFlavorsSkipped = 0;\n      let productsProcessed = 0;\n      let productsSkipped = 0;\n      const results: Array<{\n        productId: string;\n        productName: string;\n        saboresCount: number;\n        flavorsCreated: number;\n        flavorsSkipped: number;\n        status: 'processed' | 'skipped' | 'error';\n        reason?: string;\n      }> = [];\n\n      for (const product of allProducts) {\n        try {\n          // Check if product already has flavors (idempotent check)\n          const existingFlavors = await storage.getProductFlavors(product.id);\n          \n          if (existingFlavors.length > 0) {\n            // Product already has flavors, skip it\n            productsSkipped++;\n            results.push({\n              productId: product.id,\n              productName: product.name,\n              saboresCount: product.sabores.length,\n              flavorsCreated: 0,\n              flavorsSkipped: existingFlavors.length,\n              status: 'skipped',\n              reason: 'Product already has flavors'\n            });\n            console.log(`Skipping ${product.name} - already has ${existingFlavors.length} flavors`);\n            continue;\n          }\n\n          // Check if product has sabores to migrate\n          if (!product.sabores || product.sabores.length === 0) {\n            productsSkipped++;\n            results.push({\n              productId: product.id,\n              productName: product.name,\n              saboresCount: 0,\n              flavorsCreated: 0,\n              flavorsSkipped: 0,\n              status: 'skipped',\n              reason: 'No sabores to migrate'\n            });\n            console.log(`Skipping ${product.name} - no sabores to migrate`);\n            continue;\n          }\n\n          // Calculate inventory distribution\n          const totalInventory = product.inventory || 0;\n          const flavorCount = product.sabores.length;\n          const baseInventoryPerFlavor = Math.floor(totalInventory / flavorCount);\n          const remainder = totalInventory % flavorCount;\n\n          console.log(`Migrating ${product.name}: ${flavorCount} flavors, ${totalInventory} total inventory`);\n          console.log(`Base inventory per flavor: ${baseInventoryPerFlavor}, remainder: ${remainder}`);\n\n          let productFlavorsCreated = 0;\n          let productFlavorsSkipped = 0;\n\n          // Create flavor entries for each sabor\n          for (let i = 0; i < product.sabores.length; i++) {\n            const flavorName = product.sabores[i].trim();\n            \n            if (!flavorName) {\n              console.log(`Skipping empty flavor name for product ${product.name}`);\n              continue;\n            }\n\n            // Calculate inventory for this flavor (distribute remainder to first N flavors)\n            const flavorInventory = baseInventoryPerFlavor + (i < remainder ? 1 : 0);\n\n            try {\n              // Check if this exact flavor already exists (extra safety)\n              const existingFlavorCheck = await db\n                .select()\n                .from(productFlavors)\n                .where(eq(productFlavors.productId, product.id));\n              \n              const duplicateCheck = existingFlavorCheck.find(f => \n                f.name.toLowerCase().trim() === flavorName.toLowerCase().trim()\n              );\n\n              if (duplicateCheck) {\n                productFlavorsSkipped++;\n                console.log(`Skipping duplicate flavor ${flavorName} for ${product.name}`);\n                continue;\n              }\n\n              // Create the flavor entry\n              const flavorData = {\n                productId: product.id,\n                name: flavorName,\n                inventory: flavorInventory,\n                reservedInventory: 0,\n                lowStockThreshold: 10,\n                active: true\n              };\n\n              const newFlavor = await storage.createProductFlavor(flavorData);\n              productFlavorsCreated++;\n              console.log(`Created flavor: ${flavorName} with ${flavorInventory} inventory for ${product.name}`);\n            } catch (flavorError: any) {\n              console.error(`Error creating flavor ${flavorName} for ${product.name}:`, flavorError);\n              // Continue with other flavors even if one fails\n            }\n          }\n\n          productsProcessed++;\n          totalFlavorsCreated += productFlavorsCreated;\n          totalFlavorsSkipped += productFlavorsSkipped;\n\n          results.push({\n            productId: product.id,\n            productName: product.name,\n            saboresCount: product.sabores.length,\n            flavorsCreated: productFlavorsCreated,\n            flavorsSkipped: productFlavorsSkipped,\n            status: 'processed'\n          });\n\n          console.log(`Completed ${product.name}: ${productFlavorsCreated} flavors created, ${productFlavorsSkipped} skipped`);\n\n        } catch (productError: any) {\n          console.error(`Error processing product ${product.name}:`, productError);\n          results.push({\n            productId: product.id,\n            productName: product.name,\n            saboresCount: product.sabores?.length || 0,\n            flavorsCreated: 0,\n            flavorsSkipped: 0,\n            status: 'error',\n            reason: productError.message\n          });\n        }\n      }\n\n      const summary = {\n        totalProducts: allProducts.length,\n        productsProcessed,\n        productsSkipped,\n        totalFlavorsCreated,\n        totalFlavorsSkipped,\n        results\n      };\n\n      console.log(\"Migration completed:\", summary);\n\n      res.json({\n        success: true,\n        message: `Migration completed: ${totalFlavorsCreated} flavors created, ${totalFlavorsSkipped} skipped across ${productsProcessed} products`,\n        data: summary\n      });\n\n    } catch (error: any) {\n      console.error(\"Migration failed:\", error);\n      res.status(500).json({ \n        error: `Migration failed: ${error.message}`,\n        success: false \n      });\n    }\n  });\n\n  // Sales management\n  app.get(\"/api/admin/sales\", requireAuth, async (req, res) => {\n    try {\n      const sales = await storage.getSales();\n      res.json({ success: true, data: sales });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/sales\", requireAuth, async (req, res) => {\n    try {\n      const validatedData = insertSaleSchema.parse(req.body);\n      const sale = await storage.createSale(validatedData);\n      res.json({ success: true, data: sale });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.patch(\"/api/admin/sales/:id/status\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n      \n      // Validate status update\n      if (!status || ![\"pending\", \"completed\", \"cancelled\"].includes(status)) {\n        return res.status(400).json({ error: \"Invalid status value\" });\n      }\n      \n      const sale = await storage.updateSaleStatus(id, status);\n      res.json({ success: true, data: sale });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Contact messages management\n  app.get(\"/api/admin/messages\", requireAuth, async (req, res) => {\n    try {\n      const messages = await storage.getContactMessages();\n      res.json({ success: true, data: messages });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.patch(\"/api/admin/messages/:id/status\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n      \n      // Validate status update\n      if (!status || ![\"unread\", \"read\", \"replied\"].includes(status)) {\n        return res.status(400).json({ error: \"Invalid status value\" });\n      }\n      \n      const message = await storage.updateContactMessageStatus(id, status);\n      res.json({ success: true, data: message });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Homepage content management\n  app.get(\"/api/admin/homepage-content\", requireAuth, async (req, res) => {\n    try {\n      const content = await storage.getHomepageContent();\n      res.json({ success: true, data: content });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.patch(\"/api/admin/homepage-content/:section\", requireAuth, async (req, res) => {\n    try {\n      const { section } = req.params;\n      \n      // Validate section\n      const validSections = [\"navigation\", \"hero\", \"about\", \"products\", \"testimonials\", \"contact\", \"affiliates\", \"footer\"];\n      if (!validSections.includes(section)) {\n        return res.status(400).json({ error: \"Invalid section name\" });\n      }\n      \n      // Validate update data - allow partial updates for homepage content\n      const allowedFields = ['title', 'subtitle', 'description', 'buttonText', 'buttonSecondaryText', 'buttonUrl', 'content', 'active'];\n      const updateData = Object.keys(req.body)\n        .filter(key => allowedFields.includes(key))\n        .reduce((obj: any, key) => {\n          obj[key] = req.body[key];\n          return obj;\n        }, {});\n      \n      if (Object.keys(updateData).length === 0) {\n        return res.status(400).json({ error: \"No valid fields to update\" });\n      }\n      \n      const content = await storage.updateHomepageContentBySection(section, updateData);\n      res.json({ success: true, data: content });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Seed homepage content from hardcoded components (DEVELOPMENT ONLY)\n  app.post(\"/api/admin/homepage-content/seed\", requireAuth, async (req, res) => {\n    try {\n      const defaultContent = [\n        {\n          section: \"navigation\",\n          title: \"Navigation\",\n          subtitle: \"Header navigation content\",\n          description: \"\",\n          buttonText: \"\",\n          buttonSecondaryText: \"\",\n          buttonUrl: \"\",\n          content: JSON.stringify({\n            logoAlt: \"VAPEOLO\",\n            menuItems: {\n              inicio: \"Inicio\",\n              productos: \"Productos\",\n              afiliados: \"Afiliados\",\n              contacto: \"Contacto\"\n            },\n            buttons: {\n              cart: \"Carrito\",\n              login: \"Iniciar Sesión\",\n              mobileMenu: \"Menú\"\n            }\n          }),\n          active: true\n        },\n        {\n          section: \"hero\",\n          title: \"VAPEOLO:\",\n          subtitle: \"Donde la experiencia y el sabor se fusionan\",\n          description: \"15 años diseñando los mejores cigarrillos electrónicos del mercado\",\n          buttonText: \"Ver Productos\",\n          buttonSecondaryText: \"Unirme como Afiliado\",\n          buttonUrl: \"#productos\",\n          content: JSON.stringify({\n            flavors: \"Más de 25 sabores\",\n            puffs: \"Hasta 20,000 puffs\",\n            shipping: \"Envíos a todo el país\"\n          }),\n          active: true\n        },\n        {\n          section: \"about\",\n          title: \"¿Quiénes somos?\",\n          subtitle: \"VAPEOLO es distribuidora oficial de LAVIE, una marca con más de 15 años de innovación en diseño y fabricación de vapes.\",\n          description: \"Nuestra misión: redefinir el vapeo en Latinoamérica\",\n          buttonText: \"\",\n          buttonSecondaryText: \"\",\n          buttonUrl: \"\",\n          content: JSON.stringify({\n            highlights: [\n              {\n                title: \"Presencia en más de 10 países\",\n                description: \"Distribuyendo experiencias únicas a nivel internacional\"\n              },\n              {\n                title: \"Baterías de larga duración\",\n                description: \"Tecnología avanzada para máximo rendimiento\"\n              },\n              {\n                title: \"Hasta 20,000 puffs por dispositivo\",\n                description: \"La duración más larga del mercado\"\n              },\n              {\n                title: \"Garantía de calidad\",\n                description: \"15 años de experiencia y excelencia comprobada\"\n              }\n            ],\n            stats: {\n              experience: \"Años de experiencia\",\n              flavors: \"Sabores disponibles\",\n              countries: \"Países con presencia\"\n            }\n          }),\n          active: true\n        },\n        {\n          section: \"products\",\n          title: \"Productos\",\n          subtitle: \"Nuestra línea de vapes premium\",\n          description: \"Descubre nuestra colección de dispositivos de vapeo\",\n          buttonText: \"\",\n          buttonSecondaryText: \"\",\n          buttonUrl: \"\",\n          content: JSON.stringify({\n            sectionTitle: \"Productos\",\n            sectionSubtitle: \"Encuentra tu vape perfecto\",\n            labels: {\n              popular: \"Popular\",\n              outOfStock: \"Agotado\",\n              lowStock: \"Pocas unidades\",\n              addToCart: \"Agregar al carrito\",\n              selectFlavor: \"Seleccionar sabor\",\n              inStock: \"En stock\"\n            }\n          }),\n          active: true\n        },\n        {\n          section: \"testimonials\",\n          title: \"Testimonios\",\n          subtitle: \"Lo que dicen nuestros clientes y socios\",\n          description: \"\",\n          buttonText: \"\",\n          buttonSecondaryText: \"\",\n          buttonUrl: \"\",\n          content: JSON.stringify({\n            socialPrompt: \"Síguenos en redes sociales\",\n            socialPlatforms: [\n              { platform: \"Instagram\", handle: \"@lavievapes.gt\", followers: \"45.2K\" },\n              { platform: \"TikTok\", handle: \"@lavievapes\", followers: \"32.8K\" },\n              { platform: \"Facebook\", handle: \"LAVIE Vapes Guatemala\", followers: \"28.1K\" }\n            ],\n            ctaPrompt: \"Síguenos para contenido exclusivo\",\n            ctaFeatures: \"📸 Fotos de clientes • 🎥 Reviews y unboxing • 🎁 Promos y giveaways\"\n          }),\n          active: true\n        },\n        {\n          section: \"contact\",\n          title: \"Contacto\",\n          subtitle: \"Estamos aquí para ayudarte\",\n          description: \"\",\n          buttonText: \"\",\n          buttonSecondaryText: \"\",\n          buttonUrl: \"\",\n          content: JSON.stringify({\n            formTitle: \"Envíanos un mensaje\",\n            formLabels: {\n              name: \"Nombre completo\",\n              email: \"Email\",\n              message: \"Mensaje\"\n            },\n            formPlaceholders: {\n              name: \"Tu nombre\",\n              email: \"tu@email.com\",\n              message: \"¿En qué podemos ayudarte?\"\n            },\n            formButton: \"Enviar mensaje\",\n            contactInfo: [\n              {\n                title: \"WhatsApp\",\n                description: \"¿Dudas? Escríbenos al instante\",\n                value: \"+502 1234-5678\",\n                action: \"Chatear ahora\"\n              },\n              {\n                title: \"Email\",\n                description: \"Contacto comercial\",\n                value: \"info@lavievapes.gt\",\n                action: \"Enviar email\"\n              },\n              {\n                title: \"Ubicación\",\n                description: \"Envíos a toda Guatemala\",\n                value: \"Ciudad de Guatemala\",\n                action: \"Ver cobertura\"\n              }\n            ],\n            shippingInfo: [\n              {\n                title: \"Envíos a toda Guatemala\",\n                description: \"Entregas en 24-72h hábiles\"\n              },\n              {\n                title: \"Múltiples métodos de pago\",\n                description: \"Tarjeta, transferencia, contra entrega\"\n              },\n              {\n                title: \"Envío gratis\",\n                description: \"En compras desde Q200\"\n              }\n            ],\n            paymentMethods: [\"Tarjeta de crédito\", \"Transferencia\", \"Contra entrega\"],\n            shippingNotice: \"* Contra entrega minimo de Q200 o costo de Q35 por envio\"\n          }),\n          active: true\n        },\n        {\n          section: \"affiliates\",\n          title: \"Programa de Afiliación\",\n          subtitle: \"Gana mientras vapeas - ¡Haz parte de LAVIE!\",\n          description: \"¿Quieres ganar dinero vendiendo vapes LAVIE? ¡Únete a VAPEOLO!\",\n          buttonText: \"\",\n          buttonSecondaryText: \"\",\n          buttonUrl: \"\",\n          content: JSON.stringify({\n            sectionSubtitle: \"Únete a nuestro programa de afiliación\",\n            levels: [\n              {\n                id: \"agente\",\n                name: \"Agente\",\n                discount: \"10% - 12%\",\n                minimum: \"Q500\",\n                features: [\n                  \"Descuento del 10% al 12%\",\n                  \"Monto mínimo de compra: Q500\",\n                  \"Ideal para uso personal\",\n                  \"Acceso a ofertas exclusivas\"\n                ]\n              },\n              {\n                id: \"distribuidor\",\n                name: \"Distribuidor\",\n                discount: \"25% - 30%\",\n                minimum: \"Q1,500\",\n                features: [\n                  \"Descuento del 25% al 30%\",\n                  \"Monto mínimo de compra: Q1,500\",\n                  \"Para revendedores activos\",\n                  \"Herramientas de marketing incluidas\"\n                ]\n              },\n              {\n                id: \"socio\",\n                name: \"Socio\",\n                discount: \"45% - 50%\",\n                minimum: \"Q3,500\",\n                features: [\n                  \"Descuento del 45% al 50%\",\n                  \"Monto mínimo de compra: Q3,500\",\n                  \"Apoyo comercial personalizado\",\n                  \"Beneficios exclusivos y prioridad de stock\"\n                ]\n              }\n            ],\n            formTitle: \"Registrarse como Afiliado\",\n            formLabels: {\n              name: \"Nombre completo\",\n              email: \"Email\",\n              phone: \"Teléfono\",\n              level: \"Nivel de afiliación deseado\",\n              message: \"Mensaje (opcional)\"\n            },\n            formPlaceholders: {\n              name: \"Tu nombre completo\",\n              email: \"tu@email.com\",\n              phone: \"+502 1234-5678\",\n              message: \"Cuéntanos sobre tu experiencia en ventas o por qué quieres ser parte de LAVIE...\"\n            },\n            formButton: \"Enviar Solicitud\",\n            levelOptions: [\n              { label: \"Agente (10-12%)\", value: \"agente\" },\n              { label: \"Distribuidor (25-30%)\", value: \"distribuidor\" },\n              { label: \"Socio (45-50%)\", value: \"socio\" }\n            ],\n            messages: {\n              success: {\n                title: \"¡Solicitud enviada!\",\n                description: \"Nos pondremos en contacto contigo pronto para revisar tu aplicación.\"\n              },\n              error: {\n                title: \"Error\",\n                description: \"No se pudo enviar la solicitud. Por favor, inténtalo de nuevo.\"\n              }\n            }\n          }),\n          active: true\n        },\n        {\n          section: \"footer\",\n          title: \"Footer\",\n          subtitle: \"Footer content and links\",\n          description: \"\",\n          buttonText: \"\",\n          buttonSecondaryText: \"\",\n          buttonUrl: \"\",\n          content: JSON.stringify({\n            brandName: \"VAPEOLO\",\n            brandDescription: \"Distribuidora oficial de LAVIE con 15 años diseñando los mejores cigarrillos electrónicos del mercado. Donde la experiencia y el sabor se fusionan.\",\n            columns: {\n              products: {\n                title: \"Productos\",\n                links: [\n                  { name: \"CYBER - 20,000 Puffs\", href: \"#productos\" },\n                  { name: \"CUBE - 20,000 Puffs\", href: \"#productos\" },\n                  { name: \"ENERGY - 15,000 Puffs\", href: \"#productos\" },\n                  { name: \"TORCH - 6,000 Puffs\", href: \"#productos\" },\n                  { name: \"BAR - 800 Puffs\", href: \"#productos\" }\n                ]\n              },\n              company: {\n                title: \"Empresa\",\n                links: [\n                  { name: \"Sobre LAVIE\", href: \"#inicio\" },\n                  { name: \"Programa de Afiliación\", href: \"#afiliados\" },\n                  { name: \"Testimonios\", href: \"#testimonios\" },\n                  { name: \"Contacto\", href: \"#contacto\" }\n                ]\n              },\n              support: {\n                title: \"Soporte\",\n                links: [\n                  { name: \"Envíos y devoluciones\", href: \"#contacto\" },\n                  { name: \"Métodos de pago\", href: \"#contacto\" },\n                  { name: \"Preguntas frecuentes\", href: \"#contacto\" },\n                  { name: \"Soporte técnico\", href: \"#contacto\" }\n                ]\n              }\n            },\n            copyright: \"© {currentYear} VAPEOLO - Distribuidora oficial LAVIE. Todos los derechos reservados.\",\n            legalLinks: [\n              { name: \"Términos y Condiciones\", href: \"#\" },\n              { name: \"Política de Privacidad\", href: \"#\" },\n              { name: \"Política de Cookies\", href: \"#\" }\n            ],\n            ageWarning: \"Este sitio web es solo para mayores de 18 años. Los productos de vapeo contienen nicotina, una sustancia química adictiva.\"\n          }),\n          active: true\n        }\n      ];\n\n      const createdContent = [];\n      for (const content of defaultContent) {\n        // Check if content already exists for this section\n        const existing = await storage.getHomepageContentBySection(content.section);\n        if (!existing) {\n          const created = await storage.createHomepageContent(content);\n          createdContent.push(created);\n        }\n      }\n\n      res.json({ \n        success: true, \n        message: `Seeded ${createdContent.length} homepage content sections`,\n        data: createdContent\n      });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Create initial admin user (DEVELOPMENT ONLY)\n  app.post(\"/api/admin/setup\", async (req, res) => {\n    // Block this endpoint in production\n    if (process.env.NODE_ENV === \"production\") {\n      return res.status(404).json({ error: \"Not found\" });\n    }\n\n    try {\n      const existingAdmin = await storage.getUserByUsername(\"admin\");\n      if (existingAdmin) {\n        return res.status(400).json({ error: \"Admin already exists\" });\n      }\n\n      // Use password from env or default for development\n      const password = process.env.ADMIN_INITIAL_PASSWORD || \"admin123\";\n      const hashedPassword = await bcrypt.hash(password, 10);\n      const validatedData = insertUserSchema.parse({\n        username: \"admin\",\n        password: hashedPassword\n      });\n      \n      const admin = await storage.createUser(validatedData);\n      res.json({ \n        success: true, \n        message: \"Admin user created for development\", \n        data: { id: admin.id, username: admin.username, role: admin.role }\n      });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":70152},"server/storage.ts":{"content":"import { \n  users, \n  affiliates, \n  products, \n  sales, \n  contactMessages,\n  homepageContent,\n  productFlavors,\n  type User, \n  type InsertUser,\n  type UpdateUser,\n  type Affiliate,\n  type InsertAffiliate,\n  type Product,\n  type InsertProduct,\n  type Sale,\n  type InsertSale,\n  type ContactMessage,\n  type InsertContactMessage,\n  type HomepageContent,\n  type InsertHomepageContent,\n  type UpdateHomepageContent,\n  type ProductFlavor,\n  type InsertProductFlavor,\n  type UpdateProductFlavor,\n  getAvailableInventory,\n  getProductTotalAvailableInventory,\n  isProductOutOfStock\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, sql, count } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  listUsers(): Promise<User[]>;\n  updateUser(id: string, updates: UpdateUser): Promise<User>;\n  setUserPassword(id: string, hashedPassword: string): Promise<User>;\n  deleteUser(id: string): Promise<void>;\n  \n  // Affiliates\n  createAffiliate(affiliate: InsertAffiliate): Promise<Affiliate>;\n  getAffiliates(): Promise<Affiliate[]>;\n  getAffiliate(id: string): Promise<Affiliate | undefined>;\n  getAffiliateByEmail(email: string): Promise<Affiliate | undefined>;\n  updateAffiliateStatus(id: string, status: string, approvedBy?: string): Promise<Affiliate>;\n  updateAffiliatePassword(id: string, hashedPassword: string): Promise<Affiliate>;\n  deleteAffiliate(id: string): Promise<void>;\n  \n  // Products\n  getProducts(): Promise<Product[]>;\n  getActiveProducts(): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product>;\n  deleteProduct(id: string): Promise<void>;\n  \n  // Sales\n  createSale(sale: InsertSale): Promise<Sale>;\n  getSale(id: string): Promise<Sale | undefined>;\n  getSales(): Promise<Sale[]>;\n  getSalesByAffiliate(affiliateId: string): Promise<Sale[]>;\n  updateSaleStatus(id: string, status: string): Promise<Sale>;\n  \n  // Contact Messages\n  createContactMessage(message: InsertContactMessage): Promise<ContactMessage>;\n  getContactMessages(): Promise<ContactMessage[]>;\n  updateContactMessageStatus(id: string, status: string): Promise<ContactMessage>;\n  \n  // Homepage Content\n  getHomepageContent(): Promise<HomepageContent[]>;\n  getHomepageContentBySection(section: string): Promise<HomepageContent | undefined>;\n  createHomepageContent(content: InsertHomepageContent): Promise<HomepageContent>;\n  updateHomepageContentBySection(section: string, content: UpdateHomepageContent): Promise<HomepageContent>;\n  \n  // Product Flavors\n  getProductFlavors(productId: string): Promise<ProductFlavor[]>;\n  getProductFlavor(flavorId: string): Promise<ProductFlavor | undefined>;\n  createProductFlavor(flavor: InsertProductFlavor): Promise<ProductFlavor>;\n  updateProductFlavor(flavorId: string, flavor: UpdateProductFlavor): Promise<ProductFlavor>;\n  deleteProductFlavor(flavorId: string): Promise<void>;\n  \n  // Dashboard Stats\n  getDashboardStats(): Promise<{\n    totalAffiliates: number;\n    pendingAffiliates: number;\n    totalSales: number;\n    totalRevenue: string;\n    unreadMessages: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async listUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  async updateUser(id: string, updates: UpdateUser): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set(updates)\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async setUserPassword(id: string, hashedPassword: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ password: hashedPassword })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await db\n      .delete(users)\n      .where(eq(users.id, id));\n  }\n\n  // Affiliates\n  async createAffiliate(affiliate: InsertAffiliate): Promise<Affiliate> {\n    // Set discount and minimum purchase based on level\n    const levelConfig = {\n      agente: { discount: \"11.00\", minimumPurchase: \"500.00\" },\n      distribuidor: { discount: \"27.50\", minimumPurchase: \"1500.00\" },\n      socio: { discount: \"47.50\", minimumPurchase: \"3500.00\" }\n    };\n\n    const config = levelConfig[affiliate.level as keyof typeof levelConfig];\n    \n    const [newAffiliate] = await db\n      .insert(affiliates)\n      .values({\n        ...affiliate,\n        discount: config.discount,\n        minimumPurchase: config.minimumPurchase,\n      })\n      .returning();\n    return newAffiliate;\n  }\n\n  async getAffiliates(): Promise<Affiliate[]> {\n    return await db.select().from(affiliates).orderBy(desc(affiliates.createdAt));\n  }\n\n  async getAffiliate(id: string): Promise<Affiliate | undefined> {\n    const [affiliate] = await db.select().from(affiliates).where(eq(affiliates.id, id));\n    return affiliate || undefined;\n  }\n\n  async getAffiliateByEmail(email: string): Promise<Affiliate | undefined> {\n    const [affiliate] = await db.select().from(affiliates).where(eq(affiliates.email, email));\n    return affiliate || undefined;\n  }\n\n  async updateAffiliateStatus(id: string, status: string, approvedBy?: string): Promise<Affiliate> {\n    const updateData: any = { status };\n    if (status === 'approved') {\n      updateData.approvedAt = sql`now()`;\n      if (approvedBy) updateData.approvedBy = approvedBy;\n    }\n\n    const [affiliate] = await db\n      .update(affiliates)\n      .set(updateData)\n      .where(eq(affiliates.id, id))\n      .returning();\n    return affiliate;\n  }\n\n  async updateAffiliatePassword(id: string, hashedPassword: string): Promise<Affiliate> {\n    const [affiliate] = await db\n      .update(affiliates)\n      .set({ password: hashedPassword })\n      .where(eq(affiliates.id, id))\n      .returning();\n    return affiliate;\n  }\n\n  async deleteAffiliate(id: string): Promise<void> {\n    await db\n      .delete(affiliates)\n      .where(eq(affiliates.id, id));\n  }\n\n  // Products\n  async getProducts(): Promise<Product[]> {\n    return await db.select().from(products).orderBy(desc(products.createdAt));\n  }\n\n  async getActiveProducts(): Promise<Product[]> {\n    const allActiveProducts = await db.select().from(products).where(eq(products.active, true));\n    \n    // Filter out products with zero available inventory, considering flavor-level stock\n    const productsWithAvailability = [];\n    \n    for (const product of allActiveProducts) {\n      const flavors = await this.getProductFlavors(product.id);\n      \n      // If product has flavors, check flavor-level availability\n      if (flavors.length > 0) {\n        const activeFlavors = flavors.filter(f => f.active);\n        if (activeFlavors.length > 0 && !isProductOutOfStock(activeFlavors)) {\n          productsWithAvailability.push(product);\n        }\n      } else {\n        // Fallback to product-level inventory for products without flavors\n        if (getAvailableInventory(product) > 0) {\n          productsWithAvailability.push(product);\n        }\n      }\n    }\n    \n    return productsWithAvailability;\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product || undefined;\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const [newProduct] = await db\n      .insert(products)\n      .values(product)\n      .returning();\n    return newProduct;\n  }\n\n  async updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product> {\n    const [updatedProduct] = await db\n      .update(products)\n      .set(product)\n      .where(eq(products.id, id))\n      .returning();\n    return updatedProduct;\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    // First delete all associated flavors\n    await db\n      .delete(productFlavors)\n      .where(eq(productFlavors.productId, id));\n    \n    // Then delete the product\n    await db\n      .delete(products)\n      .where(eq(products.id, id));\n  }\n\n  // Product Flavors\n  async getProductFlavors(productId: string): Promise<ProductFlavor[]> {\n    return await db\n      .select()\n      .from(productFlavors)\n      .where(eq(productFlavors.productId, productId))\n      .orderBy(desc(productFlavors.createdAt));\n  }\n\n  async getProductFlavor(flavorId: string): Promise<ProductFlavor | undefined> {\n    const [flavor] = await db\n      .select()\n      .from(productFlavors)\n      .where(eq(productFlavors.id, flavorId));\n    return flavor || undefined;\n  }\n\n  async createProductFlavor(flavor: InsertProductFlavor): Promise<ProductFlavor> {\n    const [newFlavor] = await db\n      .insert(productFlavors)\n      .values(flavor)\n      .returning();\n    return newFlavor;\n  }\n\n  async updateProductFlavor(flavorId: string, flavor: UpdateProductFlavor): Promise<ProductFlavor> {\n    const [updatedFlavor] = await db\n      .update(productFlavors)\n      .set(flavor)\n      .where(eq(productFlavors.id, flavorId))\n      .returning();\n    return updatedFlavor;\n  }\n\n  async deleteProductFlavor(flavorId: string): Promise<void> {\n    await db\n      .delete(productFlavors)\n      .where(eq(productFlavors.id, flavorId));\n  }\n\n  // Sales\n  async createSale(sale: InsertSale): Promise<Sale> {\n    const [newSale] = await db\n      .insert(sales)\n      .values(sale)\n      .returning();\n    return newSale;\n  }\n\n  async getSale(id: string): Promise<Sale | undefined> {\n    const [sale] = await db.select().from(sales).where(eq(sales.id, id));\n    return sale || undefined;\n  }\n\n  async getSales(): Promise<Sale[]> {\n    return await db.select().from(sales).orderBy(desc(sales.createdAt));\n  }\n\n  async getSalesByAffiliate(affiliateId: string): Promise<Sale[]> {\n    return await db.select().from(sales).where(eq(sales.affiliateId, affiliateId));\n  }\n\n  async updateSaleStatus(id: string, status: string): Promise<Sale> {\n    const [sale] = await db\n      .update(sales)\n      .set({ status })\n      .where(eq(sales.id, id))\n      .returning();\n    return sale;\n  }\n\n  // Contact Messages\n  async createContactMessage(message: InsertContactMessage): Promise<ContactMessage> {\n    const [newMessage] = await db\n      .insert(contactMessages)\n      .values(message)\n      .returning();\n    return newMessage;\n  }\n\n  async getContactMessages(): Promise<ContactMessage[]> {\n    return await db.select().from(contactMessages).orderBy(desc(contactMessages.createdAt));\n  }\n\n  async updateContactMessageStatus(id: string, status: string): Promise<ContactMessage> {\n    const [message] = await db\n      .update(contactMessages)\n      .set({ status })\n      .where(eq(contactMessages.id, id))\n      .returning();\n    return message;\n  }\n\n  // Homepage Content\n  async getHomepageContent(): Promise<HomepageContent[]> {\n    return await db.select().from(homepageContent).orderBy(desc(homepageContent.createdAt));\n  }\n\n  async getHomepageContentBySection(section: string): Promise<HomepageContent | undefined> {\n    const [content] = await db.select().from(homepageContent).where(eq(homepageContent.section, section));\n    return content || undefined;\n  }\n\n  async createHomepageContent(content: InsertHomepageContent): Promise<HomepageContent> {\n    const [newContent] = await db\n      .insert(homepageContent)\n      .values(content)\n      .returning();\n    return newContent;\n  }\n\n  async updateHomepageContentBySection(section: string, content: UpdateHomepageContent): Promise<HomepageContent> {\n    const updateData = {\n      ...content,\n      updatedAt: sql`now()`\n    };\n\n    const [updatedContent] = await db\n      .update(homepageContent)\n      .set(updateData)\n      .where(eq(homepageContent.section, section))\n      .returning();\n    return updatedContent;\n  }\n\n  // Dashboard Stats\n  async getDashboardStats() {\n    const [affiliateStats] = await db\n      .select({ \n        total: count(),\n        pending: sql<number>`count(*) filter (where status = 'pending')`\n      })\n      .from(affiliates);\n\n    const [salesStats] = await db\n      .select({ \n        total: count(),\n        revenue: sql<string>`coalesce(sum(total_amount), 0)`\n      })\n      .from(sales);\n\n    const [messageStats] = await db\n      .select({ \n        unread: sql<number>`count(*) filter (where status = 'unread')`\n      })\n      .from(contactMessages);\n\n    return {\n      totalAffiliates: Number(affiliateStats.total),\n      pendingAffiliates: Number(affiliateStats.pending),\n      totalSales: Number(salesStats.total),\n      totalRevenue: salesStats.revenue || \"0\",\n      unreadMessages: Number(messageStats.unread),\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":13367},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, boolean, unique, check } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table (admins and sales team)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().default(\"sales\"), // 'admin' | 'sales'\n  active: boolean(\"active\").notNull().default(true),\n  \n  // Granular permissions\n  editInventory: boolean(\"edit_inventory\").notNull().default(false),\n  addProduct: boolean(\"add_product\").notNull().default(false),\n  deleteItems: boolean(\"delete_items\").notNull().default(false),\n  deleteAffiliate: boolean(\"delete_affiliate\").notNull().default(false),\n  authorizeAffiliate: boolean(\"authorize_affiliate\").notNull().default(false),\n  pauseAffiliate: boolean(\"pause_affiliate\").notNull().default(false),\n  \n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\n// Affiliates table\nexport const affiliates = pgTable(\"affiliates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  phone: text(\"phone\").notNull(),\n  level: text(\"level\").notNull(), // 'agente', 'distribuidor', 'socio'\n  discount: decimal(\"discount\", { precision: 5, scale: 2 }).notNull(),\n  minimumPurchase: decimal(\"minimum_purchase\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // 'pending', 'approved', 'rejected', 'standby'\n  password: text(\"password\"), // Para login de distribuidores (null si no aprobado)\n  message: text(\"message\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  approvedAt: timestamp(\"approved_at\"),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n});\n\n// Products table\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  puffs: integer(\"puffs\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  image: text(\"image\"),\n  sabores: text(\"sabores\").array().notNull().default(sql`ARRAY[]::text[]`),\n  description: text(\"description\"),\n  popular: boolean(\"popular\").notNull().default(false),\n  active: boolean(\"active\").notNull().default(true),\n  showOnHomepage: boolean(\"show_on_homepage\").notNull().default(true), // Controls homepage visibility\n  inventory: integer(\"inventory\").notNull().default(0), // Total stock quantity\n  reservedInventory: integer(\"reserved_inventory\").notNull().default(0), // Items reserved in orders\n  lowStockThreshold: integer(\"low_stock_threshold\").notNull().default(10), // Reorder point\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n}, (table) => ({\n  inventoryCheck: check(\"product_inventory_non_negative\", sql`inventory >= 0`),\n  reservedInventoryCheck: check(\"product_reserved_inventory_non_negative\", sql`reserved_inventory >= 0`),\n  priceCheck: check(\"product_price_positive\", sql`price > 0`),\n}));\n\n// Sales table\nexport const sales = pgTable(\"sales\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  affiliateId: varchar(\"affiliate_id\").references(() => affiliates.id),\n  productId: varchar(\"product_id\").notNull().references(() => products.id),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  discount: decimal(\"discount\", { precision: 5, scale: 2 }),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  customerName: text(\"customer_name\"),\n  customerEmail: text(\"customer_email\"),\n  customerPhone: text(\"customer_phone\"),\n  status: text(\"status\").notNull().default(\"pending\"), // 'pending', 'completed', 'cancelled'\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\n// Contact messages table\nexport const contactMessages = pgTable(\"contact_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  message: text(\"message\").notNull(),\n  status: text(\"status\").notNull().default(\"unread\"), // 'unread', 'read', 'replied'\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\n// Comprehensive homepage content table\nexport const homepageContent = pgTable(\"homepage_content\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  section: text(\"section\").notNull().unique(), // 'navigation', 'hero', 'about', 'products', 'testimonials', 'contact', 'affiliates', 'footer'\n  \n  // Core content fields\n  title: text(\"title\"),\n  subtitle: text(\"subtitle\"),\n  description: text(\"description\"),\n  buttonText: text(\"button_text\"),\n  buttonSecondaryText: text(\"button_secondary_text\"),\n  buttonUrl: text(\"button_url\"),\n  \n  // JSON fields for complex content structures\n  content: text(\"content\"), // JSON string for complex nested content\n  \n  // Metadata\n  active: boolean(\"active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\"),\n});\n\n// Product flavors table\nexport const productFlavors = pgTable(\"product_flavors\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").notNull().references(() => products.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(), // e.g., 'Mango Ice', 'Blueberry'\n  inventory: integer(\"inventory\").notNull().default(0), // Stock quantity for this flavor\n  reservedInventory: integer(\"reserved_inventory\").notNull().default(0), // Items reserved in orders\n  lowStockThreshold: integer(\"low_stock_threshold\").notNull().default(5), // Reorder point for flavor\n  active: boolean(\"active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n}, (table) => ({\n  uniqueProductFlavor: unique().on(table.productId, table.name),\n  inventoryCheck: check(\"inventory_non_negative\", sql`inventory >= 0`),\n  reservedInventoryCheck: check(\"reserved_inventory_non_negative\", sql`reserved_inventory >= 0`),\n}));\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  approvedAffiliates: many(affiliates),\n}));\n\nexport const affiliatesRelations = relations(affiliates, ({ one, many }) => ({\n  approvedBy: one(users, {\n    fields: [affiliates.approvedBy],\n    references: [users.id],\n  }),\n  sales: many(sales),\n}));\n\nexport const productsRelations = relations(products, ({ many }) => ({\n  sales: many(sales),\n  flavors: many(productFlavors),\n}));\n\nexport const salesRelations = relations(sales, ({ one }) => ({\n  affiliate: one(affiliates, {\n    fields: [sales.affiliateId],\n    references: [affiliates.id],\n  }),\n  product: one(products, {\n    fields: [sales.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const productFlavorsRelations = relations(productFlavors, ({ one }) => ({\n  product: one(products, {\n    fields: [productFlavors.productId],\n    references: [products.id],\n  }),\n}));\n\n// Schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  role: true,\n  active: true,\n  editInventory: true,\n  addProduct: true,\n  deleteItems: true,\n  deleteAffiliate: true,\n  authorizeAffiliate: true,\n  pauseAffiliate: true,\n});\n\nexport const updateUserSchema = createInsertSchema(users).pick({\n  username: true,\n  role: true,\n  active: true,\n  editInventory: true,\n  addProduct: true,\n  deleteItems: true,\n  deleteAffiliate: true,\n  authorizeAffiliate: true,\n  pauseAffiliate: true,\n}).partial();\n\n// Self-profile update schema - ONLY allows username updates (for security)\nexport const updateSelfProfileSchema = createInsertSchema(users).pick({\n  username: true,\n}).partial();\n\nexport const changePasswordSchema = z.object({\n  currentPassword: z.string().min(1, \"Current password is required\"),\n  newPassword: z.string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(/[A-Z]/, \"Password must contain at least one uppercase letter\")\n    .regex(/[a-z]/, \"Password must contain at least one lowercase letter\")\n    .regex(/[0-9]/, \"Password must contain at least one number\")\n    .regex(/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/, \"Password must contain at least one special character\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport const adminResetPasswordSchema = z.object({\n  newPassword: z.string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(/[A-Z]/, \"Password must contain at least one uppercase letter\")\n    .regex(/[a-z]/, \"Password must contain at least one lowercase letter\")\n    .regex(/[0-9]/, \"Password must contain at least one number\")\n    .regex(/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/, \"Password must contain at least one special character\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport const insertAffiliateSchema = createInsertSchema(affiliates).pick({\n  name: true,\n  email: true,\n  phone: true,\n  level: true,\n  message: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).pick({\n  name: true,\n  puffs: true,\n  price: true,\n  image: true,\n  sabores: true,\n  description: true,\n  popular: true,\n  active: true,\n  showOnHomepage: true,\n  inventory: true,\n  reservedInventory: true,\n  lowStockThreshold: true,\n});\n\nexport const insertSaleSchema = createInsertSchema(sales).pick({\n  affiliateId: true,\n  productId: true,\n  quantity: true,\n  unitPrice: true,\n  discount: true,\n  totalAmount: true,\n  customerName: true,\n  customerEmail: true,\n  customerPhone: true,\n});\n\nexport const insertContactMessageSchema = createInsertSchema(contactMessages).pick({\n  name: true,\n  email: true,\n  message: true,\n});\n\nexport const insertHomepageContentSchema = createInsertSchema(homepageContent).pick({\n  section: true,\n  title: true,\n  subtitle: true,\n  description: true,\n  buttonText: true,\n  buttonSecondaryText: true,\n  buttonUrl: true,\n  content: true,\n  active: true,\n});\n\nexport const updateHomepageContentSchema = createInsertSchema(homepageContent).pick({\n  title: true,\n  subtitle: true,\n  description: true,\n  buttonText: true,\n  buttonSecondaryText: true,\n  buttonUrl: true,\n  content: true,\n  active: true,\n}).partial();\n\nexport const insertProductFlavorSchema = createInsertSchema(productFlavors).pick({\n  productId: true,\n  name: true,\n  inventory: true,\n  reservedInventory: true,\n  lowStockThreshold: true,\n  active: true,\n});\n\nexport const updateProductFlavorSchema = createInsertSchema(productFlavors).pick({\n  name: true,\n  inventory: true,\n  reservedInventory: true,\n  lowStockThreshold: true,\n  active: true,\n}).partial();\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type UpdateUser = z.infer<typeof updateUserSchema>;\nexport type UpdateSelfProfile = z.infer<typeof updateSelfProfileSchema>;\nexport type ChangePassword = z.infer<typeof changePasswordSchema>;\nexport type AdminResetPassword = z.infer<typeof adminResetPasswordSchema>;\n\nexport type Affiliate = typeof affiliates.$inferSelect;\nexport type InsertAffiliate = z.infer<typeof insertAffiliateSchema>;\n\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\n\nexport type Sale = typeof sales.$inferSelect;\nexport type InsertSale = z.infer<typeof insertSaleSchema>;\n\nexport type ContactMessage = typeof contactMessages.$inferSelect;\nexport type InsertContactMessage = z.infer<typeof insertContactMessageSchema>;\n\nexport type HomepageContent = typeof homepageContent.$inferSelect;\nexport type InsertHomepageContent = z.infer<typeof insertHomepageContentSchema>;\nexport type UpdateHomepageContent = z.infer<typeof updateHomepageContentSchema>;\n\nexport type ProductFlavor = typeof productFlavors.$inferSelect;\nexport type InsertProductFlavor = z.infer<typeof insertProductFlavorSchema>;\nexport type UpdateProductFlavor = z.infer<typeof updateProductFlavorSchema>;\n\n// API Response types\nexport type ApiResponse<T> = {\n  success: true;\n  data: T;\n} | {\n  error: string;\n};\n\nexport type HomepageContentResponse = ApiResponse<{\n  navigation: HomepageContent | null;\n  hero: HomepageContent | null;\n  about: HomepageContent | null;\n  products: HomepageContent | null;\n  testimonials: HomepageContent | null;\n  contact: HomepageContent | null;\n  affiliates: HomepageContent | null;\n  footer: HomepageContent | null;\n}>;\n\n// Content structure definitions for JSON content field\nexport interface NavigationContent {\n  logoAlt: string;\n  menuItems: {\n    inicio: string;\n    productos: string;\n    afiliados: string;\n    contacto: string;\n  };\n  buttons: {\n    cart: string;\n    login: string;\n    mobileMenu: string;\n  };\n}\n\nexport interface HeroFeature {\n  icon: string;\n  text: string;\n}\n\nexport interface HeroContent {\n  features: HeroFeature[];\n  buttons: {\n    primary: string;\n    secondary: string;\n  };\n}\n\nexport interface HeroFeatures {\n  flavors: string;\n  puffs: string;\n  shipping: string;\n}\n\nexport interface AboutHighlight {\n  title: string;\n  description: string;\n}\n\nexport interface AboutStats {\n  experience: string;\n  flavors: string;\n  countries: string;\n}\n\nexport interface AboutContent {\n  highlights: AboutHighlight[];\n  stats: AboutStats;\n}\n\nexport interface ProductsContent {\n  sectionTitle: string;\n  sectionSubtitle: string;\n  labels: {\n    popular: string;\n    outOfStock: string;\n    lowStock: string;\n    addToCart: string;\n    selectFlavor: string;\n    inStock: string;\n  };\n}\n\nexport interface TestimonialsContent {\n  socialPrompt: string;\n  socialPlatforms: {\n    platform: string;\n    handle: string;\n    followers: string;\n  }[];\n  ctaPrompt: string;\n  ctaFeatures: string;\n}\n\nexport interface ContactInfo {\n  title: string;\n  description: string;\n  value: string;\n  action: string;\n}\n\nexport interface ShippingInfo {\n  title: string;\n  description: string;\n}\n\nexport interface ContactContent {\n  formTitle: string;\n  formLabels: {\n    name: string;\n    email: string;\n    message: string;\n  };\n  formPlaceholders: {\n    name: string;\n    email: string;\n    message: string;\n  };\n  formButton: string;\n  contactInfo: ContactInfo[];\n  shippingInfo: ShippingInfo[];\n  paymentMethods: string[];\n  shippingNotice: string;\n}\n\nexport interface AffiliateLevel {\n  id: string;\n  name: string;\n  discount: string;\n  minimum: string;\n  features: string[];\n}\n\nexport interface AffiliatesContent {\n  sectionSubtitle: string;\n  levels: AffiliateLevel[];\n  formTitle: string;\n  formLabels: {\n    name: string;\n    email: string;\n    phone: string;\n    level: string;\n    message: string;\n  };\n  formPlaceholders: {\n    name: string;\n    email: string;\n    phone: string;\n    message: string;\n  };\n  formButton: string;\n  levelOptions: {\n    label: string;\n    value: string;\n  }[];\n  messages: {\n    success: {\n      title: string;\n      description: string;\n    };\n    error: {\n      title: string;\n      description: string;\n    };\n  };\n}\n\nexport interface FooterLinkGroup {\n  name: string;\n  href: string;\n}\n\nexport interface FooterContent {\n  brandName: string;\n  brandDescription: string;\n  columns: {\n    products: {\n      title: string;\n      links: FooterLinkGroup[];\n    };\n    company: {\n      title: string;\n      links: FooterLinkGroup[];\n    };\n    support: {\n      title: string;\n      links: FooterLinkGroup[];\n    };\n  };\n  copyright: string;\n  legalLinks: FooterLinkGroup[];\n  ageWarning: string;\n}\n\n// Utility functions for inventory calculations\n\n// Flavor-level inventory functions\nexport function getFlavorAvailableInventory(flavor: ProductFlavor): number {\n  return Math.max(0, flavor.inventory - flavor.reservedInventory);\n}\n\nexport function isFlavorOutOfStock(flavor: ProductFlavor): boolean {\n  return !flavor.active || getFlavorAvailableInventory(flavor) === 0;\n}\n\nexport function isFlavorLowStock(flavor: ProductFlavor): boolean {\n  if (!flavor.active) return false;\n  const available = getFlavorAvailableInventory(flavor);\n  return available <= flavor.lowStockThreshold && available > 0;\n}\n\nexport function getFlavorStockStatus(flavor: ProductFlavor): 'out_of_stock' | 'low_stock' | 'in_stock' {\n  if (!flavor.active) return 'out_of_stock';\n  const available = getFlavorAvailableInventory(flavor);\n  if (available === 0) return 'out_of_stock';\n  if (available <= flavor.lowStockThreshold) return 'low_stock';\n  return 'in_stock';\n}\n\n// Product-level inventory functions (legacy - for backward compatibility)\nexport function getAvailableInventory(product: Product): number {\n  return Math.max(0, product.inventory - product.reservedInventory);\n}\n\nexport function isOutOfStock(product: Product): boolean {\n  return getAvailableInventory(product) === 0;\n}\n\nexport function isLowStock(product: Product): boolean {\n  return getAvailableInventory(product) <= product.lowStockThreshold && getAvailableInventory(product) > 0;\n}\n\nexport function getStockStatus(product: Product): 'out_of_stock' | 'low_stock' | 'in_stock' {\n  const available = getAvailableInventory(product);\n  if (available === 0) return 'out_of_stock';\n  if (available <= product.lowStockThreshold) return 'low_stock';\n  return 'in_stock';\n}\n\n// Product-level functions that work with flavors\nexport function getProductTotalAvailableInventory(flavors: ProductFlavor[]): number {\n  return flavors\n    .filter(flavor => flavor.active)\n    .reduce((total, flavor) => total + getFlavorAvailableInventory(flavor), 0);\n}\n\nexport function isProductOutOfStock(flavors: ProductFlavor[]): boolean {\n  const activeFlavors = flavors.filter(flavor => flavor.active);\n  if (activeFlavors.length === 0) return true;\n  return activeFlavors.every(flavor => isFlavorOutOfStock(flavor));\n}\n\nexport function isProductLowStock(flavors: ProductFlavor[]): boolean {\n  const activeFlavors = flavors.filter(flavor => flavor.active);\n  if (activeFlavors.length === 0) return false;\n  return activeFlavors.some(flavor => isFlavorLowStock(flavor)) && !isProductOutOfStock(flavors);\n}\n\nexport function getProductStockStatus(flavors: ProductFlavor[]): 'out_of_stock' | 'low_stock' | 'in_stock' {\n  if (isProductOutOfStock(flavors)) return 'out_of_stock';\n  if (isProductLowStock(flavors)) return 'low_stock';\n  return 'in_stock';\n}\n\nexport function getAvailableFlavors(flavors: ProductFlavor[]): ProductFlavor[] {\n  return flavors.filter(flavor => flavor.active && !isFlavorOutOfStock(flavor));\n}\n\nexport function getLowStockFlavors(flavors: ProductFlavor[]): ProductFlavor[] {\n  return flavors.filter(flavor => flavor.active && isFlavorLowStock(flavor));\n}\n\nexport function getOutOfStockFlavors(flavors: ProductFlavor[]): ProductFlavor[] {\n  return flavors.filter(flavor => flavor.active && isFlavorOutOfStock(flavor));\n}\n","size_bytes":19088},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport { CartProvider } from \"@/contexts/CartContext\";\nimport { DistributorProvider } from \"@/contexts/DistributorContext\";\nimport CartModal from \"@/components/CartModal\";\nimport Home from \"@/pages/Home\";\nimport Affiliates from \"@/pages/Affiliates\";\nimport AdminLogin from \"@/pages/AdminLogin\";\nimport AdminDashboard from \"@/pages/AdminDashboard\";\nimport AdminProfile from \"@/pages/AdminProfile\";\nimport AdminUsers from \"@/pages/AdminUsers\";\nimport AdminAffiliates from \"@/pages/AdminAffiliates\";\nimport AdminProducts from \"@/pages/AdminProducts\";\nimport AdminHomepage from \"@/pages/AdminHomepage\";\nimport AdminSales from \"@/pages/AdminSales\";\nimport AdminMessages from \"@/pages/AdminMessages\";\nimport DistributorLogin from \"@/pages/DistributorLogin\";\nimport DistributorDashboard from \"@/pages/DistributorDashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/affiliates\" component={Affiliates} />\n      <Route path=\"/admin/login\" component={AdminLogin} />\n      <Route path=\"/admin\" component={AdminDashboard} />\n      <Route path=\"/admin/profile\" component={AdminProfile} />\n      <Route path=\"/admin/users\" component={AdminUsers} />\n      <Route path=\"/admin/affiliates\" component={AdminAffiliates} />\n      <Route path=\"/admin/products\" component={AdminProducts} />\n      <Route path=\"/admin/homepage\" component={AdminHomepage} />\n      <Route path=\"/admin/sales\" component={AdminSales} />\n      <Route path=\"/admin/messages\" component={AdminMessages} />\n      <Route path=\"/distributor/login\" component={DistributorLogin} />\n      <Route path=\"/distributor/dashboard\" component={DistributorDashboard} />\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <DistributorProvider>\n          <CartProvider>\n            <AuthProvider>\n              <Toaster />\n              <Router />\n              <CartModal />\n            </AuthProvider>\n          </CartProvider>\n        </DistributorProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2544},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 0 0% 12%;\n\n  --border: 0 0% 88%;\n\n  --card: 0 0% 96%;\n\n  --card-foreground: 0 0% 12%;\n\n  --card-border: 0 0% 90%;\n\n  --sidebar: 0 0% 94%;\n\n  --sidebar-foreground: 0 0% 12%;\n\n  --sidebar-border: 0 0% 86%;\n\n  --sidebar-primary: 280 85% 30%;\n\n  --sidebar-primary-foreground: 280 20% 95%;\n\n  --sidebar-accent: 0 0% 92%;\n\n  --sidebar-accent-foreground: 0 0% 20%;\n\n  --sidebar-ring: 280 85% 60%;\n\n  --popover: 0 0% 94%;\n\n  --popover-foreground: 0 0% 12%;\n\n  --popover-border: 0 0% 86%;\n\n  --primary: 280 85% 30%;\n\n  --primary-foreground: 280 20% 95%;\n\n  --secondary: 0 0% 92%;\n\n  --secondary-foreground: 0 0% 20%;\n\n  --muted: 0 0% 90%;\n\n  --muted-foreground: 0 0% 35%;\n\n  --accent: 280 15% 92%;\n\n  --accent-foreground: 280 30% 20%;\n\n  --destructive: 0 75% 30%;\n\n  --destructive-foreground: 0 20% 95%;\n\n  --input: 0 0% 80%;\n  --ring: 280 85% 60%;\n  --chart-1: 280 85% 30%;\n  --chart-2: 200 100% 25%;\n  --chart-3: 120 80% 25%;\n  --chart-4: 300 90% 30%;\n  --chart-5: 180 70% 25%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(280 85% 30% / 0.05);\n  --shadow-xs: 0px 2px 0px 0px hsl(280 85% 30% / 0.05);\n  --shadow-sm: 0px 2px 0px 0px hsl(280 85% 30% / 0.05), 0px 1px 2px -1px hsl(280 85% 30% / 0.10);\n  --shadow: 0px 2px 0px 0px hsl(280 85% 30% / 0.05), 0px 1px 2px -1px hsl(280 85% 30% / 0.10);\n  --shadow-md: 0px 2px 0px 0px hsl(280 85% 30% / 0.05), 0px 2px 4px -1px hsl(280 85% 30% / 0.15);\n  --shadow-lg: 0px 2px 0px 0px hsl(280 85% 30% / 0.05), 0px 4px 6px -1px hsl(280 85% 30% / 0.20);\n  --shadow-xl: 0px 2px 0px 0px hsl(280 85% 30% / 0.05), 0px 8px 10px -1px hsl(280 85% 30% / 0.25);\n  --shadow-2xl: 0px 2px 0px 0px hsl(280 85% 30% / 0.05);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 0 0% 8%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 0 0% 18%;\n\n  --card: 0 0% 12%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 0 0% 20%;\n\n  --sidebar: 0 0% 10%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 0 0% 18%;\n\n  --sidebar-primary: 280 85% 60%;\n\n  --sidebar-primary-foreground: 280 20% 95%;\n\n  --sidebar-accent: 0 0% 15%;\n\n  --sidebar-accent-foreground: 0 0% 85%;\n\n  --sidebar-ring: 280 85% 60%;\n\n  --popover: 0 0% 14%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 0 0% 22%;\n\n  --primary: 280 85% 60%;\n\n  --primary-foreground: 280 20% 95%;\n\n  --secondary: 0 0% 16%;\n\n  --secondary-foreground: 0 0% 85%;\n\n  --muted: 0 0% 14%;\n\n  --muted-foreground: 0 0% 65%;\n\n  --accent: 280 15% 16%;\n\n  --accent-foreground: 280 30% 85%;\n\n  --destructive: 0 75% 35%;\n\n  --destructive-foreground: 0 20% 95%;\n\n  --input: 0 0% 22%;\n  --ring: 280 85% 60%;\n  --chart-1: 280 85% 70%;\n  --chart-2: 200 100% 75%;\n  --chart-3: 120 80% 65%;\n  --chart-4: 300 90% 70%;\n  --chart-5: 180 70% 65%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(280 85% 60% / 0.05);\n  --shadow-xs: 0px 2px 0px 0px hsl(280 85% 60% / 0.05);\n  --shadow-sm: 0px 2px 0px 0px hsl(280 85% 60% / 0.05), 0px 1px 2px -1px hsl(280 85% 60% / 0.10);\n  --shadow: 0px 2px 0px 0px hsl(280 85% 60% / 0.05), 0px 1px 2px -1px hsl(280 85% 60% / 0.10);\n  --shadow-md: 0px 2px 0px 0px hsl(280 85% 60% / 0.05), 0px 2px 4px -1px hsl(280 85% 60% / 0.15);\n  --shadow-lg: 0px 2px 0px 0px hsl(280 85% 60% / 0.05), 0px 4px 6px -1px hsl(280 85% 60% / 0.20);\n  --shadow-xl: 0px 2px 0px 0px hsl(280 85% 60% / 0.05), 0px 8px 10px -1px hsl(280 85% 60% / 0.25);\n  --shadow-2xl: 0px 2px 0px 0px hsl(280 85% 60% / 0.05);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* VAPEOLO Toast Custom Styles */\n  .toast-vapeolo-base {\n    backdrop-filter: blur(16px);\n    -webkit-backdrop-filter: blur(16px);\n    background: rgba(0, 0, 0, 0.7);\n    border-radius: 12px;\n    position: relative;\n    overflow: hidden;\n    transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);\n  }\n\n  .toast-vapeolo-base::before {\n    content: '';\n    position: absolute;\n    inset: 0;\n    padding: 1px;\n    background: linear-gradient(135deg, var(--toast-border-start), var(--toast-border-end));\n    border-radius: inherit;\n    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n    mask-composite: xor;\n    -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n    -webkit-mask-composite: xor;\n  }\n\n  .toast-vapeolo-success {\n    --toast-border-start: hsl(120 80% 45% / 0.8);\n    --toast-border-end: hsl(120 80% 55% / 0.4);\n    background: linear-gradient(135deg, \n      rgba(34, 197, 94, 0.15) 0%, \n      rgba(34, 197, 94, 0.05) 100%),\n      rgba(0, 0, 0, 0.8);\n    box-shadow: 0 8px 32px rgba(34, 197, 94, 0.2),\n                0 0 20px rgba(34, 197, 94, 0.1);\n    color: hsl(120 80% 90%);\n  }\n\n  .toast-vapeolo-error {\n    --toast-border-start: hsl(350 100% 60% / 0.8);\n    --toast-border-end: hsl(350 100% 70% / 0.4);\n    background: linear-gradient(135deg, \n      rgba(239, 68, 68, 0.15) 0%, \n      rgba(239, 68, 68, 0.05) 100%),\n      rgba(0, 0, 0, 0.8);\n    box-shadow: 0 8px 32px rgba(239, 68, 68, 0.2),\n                0 0 20px rgba(239, 68, 68, 0.1);\n    color: hsl(350 100% 90%);\n  }\n\n  .toast-vapeolo-warning {\n    --toast-border-start: hsl(45 100% 60% / 0.8);\n    --toast-border-end: hsl(45 100% 70% / 0.4);\n    background: linear-gradient(135deg, \n      rgba(251, 191, 36, 0.15) 0%, \n      rgba(251, 191, 36, 0.05) 100%),\n      rgba(0, 0, 0, 0.8);\n    box-shadow: 0 8px 32px rgba(251, 191, 36, 0.2),\n                0 0 20px rgba(251, 191, 36, 0.1);\n    color: hsl(45 100% 90%);\n  }\n\n  .toast-vapeolo-info {\n    --toast-border-start: hsl(200 100% 50% / 0.8);\n    --toast-border-end: hsl(200 100% 60% / 0.4);\n    background: linear-gradient(135deg, \n      rgba(0, 191, 255, 0.15) 0%, \n      rgba(0, 191, 255, 0.05) 100%),\n      rgba(0, 0, 0, 0.8);\n    box-shadow: 0 8px 32px rgba(0, 191, 255, 0.2),\n                0 0 20px rgba(0, 191, 255, 0.1);\n    color: hsl(200 100% 90%);\n  }\n\n  .toast-vapeolo-default {\n    --toast-border-start: hsl(280 85% 60% / 0.8);\n    --toast-border-end: hsl(280 85% 70% / 0.4);\n    background: linear-gradient(135deg, \n      rgba(147, 51, 234, 0.15) 0%, \n      rgba(147, 51, 234, 0.05) 100%),\n      rgba(0, 0, 0, 0.8);\n    box-shadow: 0 8px 32px rgba(147, 51, 234, 0.2),\n                0 0 20px rgba(147, 51, 234, 0.1);\n    color: hsl(280 85% 95%);\n  }\n\n  .toast-vapeolo-icon {\n    filter: drop-shadow(0 0 8px currentColor);\n    flex-shrink: 0;\n  }\n\n  .toast-vapeolo-close {\n    transition: all 0.2s ease;\n    border-radius: 6px;\n    opacity: 0.7;\n  }\n\n  .toast-vapeolo-close:hover {\n    background: rgba(255, 255, 255, 0.1);\n    transform: scale(1.1);\n    opacity: 1;\n  }\n\n  /* Toast animation improvements */\n  @keyframes toast-slide-in-right {\n    from {\n      transform: translateX(calc(100% + 1rem));\n      opacity: 0;\n    }\n    to {\n      transform: translateX(0);\n      opacity: 1;\n    }\n  }\n\n  @keyframes toast-slide-out-right {\n    from {\n      transform: translateX(0);\n      opacity: 1;\n    }\n    to {\n      transform: translateX(calc(100% + 1rem));\n      opacity: 0;\n    }\n  }\n\n  .toast-vapeolo-base[data-state=\"open\"] {\n    animation: toast-slide-in-right 0.3s cubic-bezier(0.16, 1, 0.3, 1);\n  }\n\n  .toast-vapeolo-base[data-state=\"closed\"] {\n    animation: toast-slide-out-right 0.2s ease-in;\n  }\n\n  /* Reduced Motion Support for Accessibility */\n  @media (prefers-reduced-motion: reduce) {\n    /* Disable transitions and transforms for motion-sensitive users */\n    .toast-vapeolo-base {\n      transition: none;\n      backdrop-filter: none;\n      -webkit-backdrop-filter: none;\n    }\n\n    .toast-vapeolo-close {\n      transition: none;\n    }\n\n    .toast-vapeolo-close:hover {\n      transform: none;\n    }\n\n    /* Replace slide animations with simple fade */\n    @keyframes toast-fade-in {\n      from {\n        opacity: 0;\n      }\n      to {\n        opacity: 1;\n      }\n    }\n\n    @keyframes toast-fade-out {\n      from {\n        opacity: 1;\n      }\n      to {\n        opacity: 0;\n      }\n    }\n\n    .toast-vapeolo-base[data-state=\"open\"] {\n      animation: toast-fade-in 0.15s ease;\n    }\n\n    .toast-vapeolo-base[data-state=\"closed\"] {\n      animation: toast-fade-out 0.15s ease;\n    }\n\n    /* Reduce icon filter effects */\n    .toast-vapeolo-icon {\n      filter: none;\n    }\n  }\n}","size_bytes":14450},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AboutSection.tsx":{"content":"import { Card } from '@/components/ui/card'\nimport { Globe, Battery, Wind, Shield } from 'lucide-react'\nimport { useQuery } from '@tanstack/react-query'\nimport { HomepageContentResponse, type AboutContent } from '@shared/schema'\n\nexport default function AboutSection() {\n  // Fetch homepage content with graceful fallback\n  const { data: homepageContent } = useQuery<HomepageContentResponse>({\n    queryKey: ['/api/homepage-content'],\n    staleTime: 5 * 60 * 1000, // 5 minutes cache\n  })\n\n  // Default hardcoded content as fallback\n  const defaultContent = {\n    title: '¿Quiénes somos?',\n    subtitle: 'VAPEOLO es distribuidora oficial de LAVIE, una marca con más de 15 años de innovación en diseño y fabricación de vapes.',\n    description: 'Nuestra misión: redefinir el vapeo en Latinoamérica'\n  }\n\n  // Use database content if available, otherwise fallback to default\n  const content = (homepageContent && 'success' in homepageContent && homepageContent.data?.about) || defaultContent\n\n  // Default highlights as fallback\n  const defaultHighlights = [\n    {\n      icon: Globe,\n      title: \"Presencia en más de 10 países\",\n      description: \"Distribuyendo experiencias únicas a nivel internacional\"\n    },\n    {\n      icon: Battery,\n      title: \"Baterías de larga duración\", \n      description: \"Tecnología avanzada para máximo rendimiento\"\n    },\n    {\n      icon: Wind,\n      title: \"Hasta 20,000 puffs por dispositivo\",\n      description: \"La duración más larga del mercado\"\n    },\n    {\n      icon: Shield,\n      title: \"Garantía de calidad\",\n      description: \"15 años de experiencia y excelencia comprobada\"\n    }\n  ]\n\n  // Parse highlights and stats from content JSON field or use defaults\n  let highlights = defaultHighlights\n  let statsContent = {\n    experience: 'Años de experiencia',\n    flavors: 'Sabores disponibles', \n    countries: 'Países con presencia'\n  }\n  \n  try {\n    if (content && 'content' in content && content.content) {\n      const parsedContent = JSON.parse(content.content) as AboutContent\n      if (parsedContent.highlights) {\n        highlights = parsedContent.highlights.map((highlight, index) => ({\n          ...highlight,\n          icon: [Globe, Battery, Wind, Shield][index] || Globe\n        }))\n      }\n      if (parsedContent.stats) {\n        statsContent = parsedContent.stats\n      }\n    }\n  } catch {\n    // Fallback to default if JSON parsing fails\n    highlights = defaultHighlights\n  }\n\n  return (\n    <section className=\"py-20 bg-gradient-to-b from-black to-gray-900 relative\">\n      {/* Background Elements */}\n      <div className=\"absolute top-10 left-10 w-64 h-64 bg-purple-500/10 rounded-full blur-3xl\"></div>\n      <div className=\"absolute bottom-10 right-10 w-48 h-48 bg-blue-500/10 rounded-full blur-2xl\"></div>\n      \n      <div className=\"container mx-auto px-4 relative z-10\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-black text-white mb-6\">\n            <span className=\"bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent\">\n              {content.title}\n            </span>\n          </h2>\n          <div className=\"max-w-4xl mx-auto\">\n            <p className=\"text-xl text-gray-300 mb-6 leading-relaxed\">\n              {content.subtitle || content.description || defaultContent.subtitle}\n            </p>\n            {(content.description && content.subtitle !== content.description) && (\n              <p className=\"text-lg text-blue-300 font-medium\">\n                {content.description}\n              </p>\n            )}\n          </div>\n        </div>\n\n        {/* Highlights Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {highlights.map((highlight, index) => (\n            <Card \n              key={index} \n              className=\"bg-black/40 border-purple-500/20 hover:border-purple-400/50 transition-all duration-300 p-6 hover-elevate\"\n              data-testid={`card-highlight-${index}`}\n            >\n              <div className=\"text-center\">\n                <div className=\"mb-4 mx-auto w-16 h-16 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full flex items-center justify-center\">\n                  <highlight.icon className=\"h-8 w-8 text-white\" />\n                </div>\n                <h3 className=\"text-lg font-bold text-white mb-2\">\n                  {highlight.title}\n                </h3>\n                <p className=\"text-gray-400 text-sm\">\n                  {highlight.description}\n                </p>\n              </div>\n            </Card>\n          ))}\n        </div>\n\n        {/* Stats */}\n        <div className=\"mt-16 grid grid-cols-1 md:grid-cols-3 gap-8 text-center\">\n          <div className=\"bg-gradient-to-r from-purple-500/20 to-transparent p-6 rounded-lg\">\n            <div className=\"text-4xl font-black text-purple-400 mb-2\">15+</div>\n            <div className=\"text-gray-300\">Años de experiencia</div>\n          </div>\n          <div className=\"bg-gradient-to-r from-blue-500/20 to-transparent p-6 rounded-lg\">\n            <div className=\"text-4xl font-black text-blue-400 mb-2\">25+</div>\n            <div className=\"text-gray-300\">Sabores disponibles</div>\n          </div>\n          <div className=\"bg-gradient-to-r from-green-500/20 to-transparent p-6 rounded-lg\">\n            <div className=\"text-4xl font-black text-green-400 mb-2\">10+</div>\n            <div className=\"text-gray-300\">Países con presencia</div>\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}","size_bytes":5587},"client/src/components/AffiliateProgram.tsx":{"content":"import { useState } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Input } from '@/components/ui/input'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Label } from '@/components/ui/label'\nimport { User, Briefcase, Crown, Check, DollarSign, Users, Headphones, Loader2 } from 'lucide-react'\nimport { useMutation } from '@tanstack/react-query'\nimport { useToast } from '@/hooks/use-toast'\n\nexport default function AffiliateProgram() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    level: 'agente',\n    message: ''\n  })\n\n  const affiliateLevels = [\n    {\n      id: 'agente',\n      name: 'Agente',\n      icon: User,\n      discount: '10% - 12%',\n      minimum: 'Q500',\n      color: 'from-purple-500 to-purple-600',\n      features: [\n        'Descuento del 10% al 12%',\n        'Monto mínimo de compra: Q500',\n        'Ideal para uso personal',\n        'Acceso a ofertas exclusivas'\n      ]\n    },\n    {\n      id: 'distribuidor',\n      name: 'Distribuidor', \n      icon: Briefcase,\n      discount: '25% - 30%',\n      minimum: 'Q1,500',\n      color: 'from-blue-500 to-blue-600',\n      popular: true,\n      features: [\n        'Descuento del 25% al 30%',\n        'Monto mínimo de compra: Q1,500',\n        'Para revendedores activos',\n        'Herramientas de marketing incluidas'\n      ]\n    },\n    {\n      id: 'socio',\n      name: 'Socio',\n      icon: Crown,\n      discount: '45% - 50%',\n      minimum: 'Q3,500',\n      color: 'from-yellow-500 to-orange-500',\n      features: [\n        'Descuento del 45% al 50%',\n        'Monto mínimo de compra: Q3,500',\n        'Apoyo comercial personalizado',\n        'Beneficios exclusivos y prioridad de stock'\n      ]\n    }\n  ]\n\n  const { toast } = useToast()\n\n  const affiliateMutation = useMutation({\n    mutationFn: async (affiliateData: typeof formData) => {\n      const response = await fetch('/api/affiliates', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(affiliateData),\n      })\n      \n      if (!response.ok) {\n        throw new Error('Error al enviar la solicitud')\n      }\n      \n      return response.json()\n    },\n    onSuccess: () => {\n      toast({\n        title: \"¡Solicitud enviada!\",\n        description: \"Nos pondremos en contacto contigo pronto para revisar tu aplicación.\",\n      })\n      setFormData({\n        name: '',\n        email: '',\n        phone: '',\n        level: 'agente',\n        message: ''\n      })\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo enviar la solicitud. Por favor, inténtalo de nuevo.\",\n        variant: \"destructive\",\n      })\n    },\n  })\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    affiliateMutation.mutate(formData)\n  }\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }))\n  }\n\n  return (\n    <section id=\"afiliados\" className=\"py-20 bg-gradient-to-b from-gray-900 to-black relative overflow-hidden\">\n      {/* Background Elements */}\n      <div className=\"absolute top-0 left-0 w-96 h-96 bg-purple-500/10 rounded-full blur-3xl\"></div>\n      <div className=\"absolute bottom-0 right-0 w-64 h-64 bg-blue-500/10 rounded-full blur-2xl\"></div>\n      \n      <div className=\"container mx-auto px-4 relative z-10\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-black text-white mb-6\">\n            <span className=\"bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent\">\n              Programa de Afiliación\n            </span>\n          </h2>\n          <p className=\"text-xl text-gray-300 mb-4\">\n            Gana mientras vapeas - ¡Haz parte de LAVIE!\n          </p>\n          <p className=\"text-lg text-purple-300\">\n            ¿Quieres ganar dinero vendiendo vapes LAVIE? ¡Únete a VAPEOLO!\n          </p>\n        </div>\n\n        {/* Affiliate Levels */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mb-16\">\n          {affiliateLevels.map((level) => (\n            <Card \n              key={level.id}\n              className={`relative bg-black/60 border-2 transition-all duration-300 hover-elevate ${\n                level.popular ? 'border-blue-400/50 scale-105' : 'border-purple-500/20 hover:border-purple-400/50'\n              }`}\n              data-testid={`card-affiliate-${level.id}`}\n            >\n              {level.popular && (\n                <Badge className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 bg-gradient-to-r from-blue-500 to-purple-500\">\n                  Más popular\n                </Badge>\n              )}\n              \n              <CardHeader className=\"text-center pb-4\">\n                <div className={`mx-auto w-16 h-16 bg-gradient-to-r ${level.color} rounded-full flex items-center justify-center mb-4`}>\n                  <level.icon className=\"h-8 w-8 text-white\" />\n                </div>\n                <CardTitle className=\"text-2xl font-black text-white\">{level.name}</CardTitle>\n                <div className=\"text-3xl font-black bg-gradient-to-r from-green-400 to-green-500 bg-clip-text text-transparent\">\n                  {level.discount}\n                </div>\n                <p className=\"text-gray-400\">Monto mínimo: {level.minimum}</p>\n              </CardHeader>\n\n              <CardContent>\n                <ul className=\"space-y-3\">\n                  {level.features.map((feature, idx) => (\n                    <li key={idx} className=\"flex items-start\">\n                      <Check className=\"h-5 w-5 text-green-400 mr-3 mt-0.5 flex-shrink-0\" />\n                      <span className=\"text-gray-300 text-sm\">{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Registration Form */}\n        <div className=\"max-w-2xl mx-auto\">\n          <Card className=\"bg-black/60 border-purple-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl font-bold text-white text-center\">\n                Registrarse como Afiliado\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"name\" className=\"text-white\">Nombre completo</Label>\n                    <Input\n                      id=\"name\"\n                      value={formData.name}\n                      onChange={(e) => handleInputChange('name', e.target.value)}\n                      className=\"bg-gray-800/50 border-purple-500/30 text-white\"\n                      placeholder=\"Tu nombre completo\"\n                      data-testid=\"input-name\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"email\" className=\"text-white\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => handleInputChange('email', e.target.value)}\n                      className=\"bg-gray-800/50 border-purple-500/30 text-white\"\n                      placeholder=\"tu@email.com\"\n                      data-testid=\"input-email\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"phone\" className=\"text-white\">Teléfono</Label>\n                  <Input\n                    id=\"phone\"\n                    value={formData.phone}\n                    onChange={(e) => handleInputChange('phone', e.target.value)}\n                    className=\"bg-gray-800/50 border-purple-500/30 text-white\"\n                    placeholder=\"+502 1234-5678\"\n                    data-testid=\"input-phone\"\n                    required\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"level\" className=\"text-white\">Nivel de afiliación deseado</Label>\n                  <select\n                    id=\"level\"\n                    value={formData.level}\n                    onChange={(e) => handleInputChange('level', e.target.value)}\n                    className=\"w-full bg-gray-800/50 border border-purple-500/30 text-white rounded-md px-3 py-2\"\n                    data-testid=\"select-level\"\n                  >\n                    <option value=\"agente\">Agente (10-12%)</option>\n                    <option value=\"distribuidor\">Distribuidor (25-30%)</option>\n                    <option value=\"socio\">Socio (45-50%)</option>\n                  </select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"affiliate-message\" className=\"text-white\">Mensaje (opcional)</Label>\n                  <Textarea\n                    id=\"affiliate-message\"\n                    value={formData.message}\n                    onChange={(e) => handleInputChange('message', e.target.value)}\n                    className=\"bg-gray-800/50 border-purple-500/30 text-white\"\n                    placeholder=\"Cuéntanos sobre tu experiencia en ventas o por qué quieres ser parte de LAVIE...\"\n                    rows={4}\n                    data-testid=\"textarea-affiliate-message\"\n                  />\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white font-bold py-3\"\n                  data-testid=\"button-submit-affiliate\"\n                  disabled={affiliateMutation.isPending}\n                >\n                  {affiliateMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                  {affiliateMutation.isPending ? 'Enviando...' : 'Enviar Solicitud'}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  )\n}","size_bytes":10372},"client/src/components/ContactSection.tsx":{"content":"import { useState } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Label } from '@/components/ui/label'\nimport { MapPin, Phone, Mail, MessageCircle, Truck, CreditCard, Clock, Loader2 } from 'lucide-react'\nimport { useMutation, useQuery } from '@tanstack/react-query'\nimport { useToast } from '@/hooks/use-toast'\nimport { HomepageContentResponse, ContactContent } from '@shared/schema'\n\nexport default function ContactSection() {\n  // Fetch homepage content\n  const { data: homepageContent, isLoading } = useQuery<HomepageContentResponse>({\n    queryKey: ['/api/homepage-content'],\n    staleTime: 5 * 60 * 1000, // 5 minutes cache\n  })\n\n  // Parse contact content from database\n  let contactData: ContactContent | null = null;\n  try {\n    if (homepageContent && 'success' in homepageContent && homepageContent.data?.contact?.content) {\n      contactData = JSON.parse(homepageContent.data.contact.content);\n    }\n  } catch (error) {\n    console.error('Error parsing contact content:', error);\n  }\n\n  const content = homepageContent && 'success' in homepageContent ? homepageContent.data?.contact : null;\n\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    message: ''\n  })\n\n  const { toast } = useToast()\n\n  const contactMutation = useMutation({\n    mutationFn: async (contactSubmissionData: typeof formData) => {\n      const response = await fetch('/api/contact', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(contactSubmissionData),\n      })\n      \n      if (!response.ok) {\n        throw new Error('Error al enviar el mensaje')\n      }\n      \n      return response.json()\n    },\n    onSuccess: () => {\n      toast({\n        title: \"¡Mensaje enviado!\",\n        description: \"Nos pondremos en contacto contigo pronto.\",\n      })\n      setFormData({ name: '', email: '', message: '' })\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo enviar el mensaje. Por favor, inténtalo de nuevo.\",\n        variant: \"destructive\",\n      })\n    },\n  })\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    contactMutation.mutate(formData)\n  }\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }))\n  }\n\n  // Get icon for contact info\n  const getContactIcon = (title: string) => {\n    const titleLower = title.toLowerCase();\n    if (titleLower.includes('whatsapp') || titleLower.includes('teléfono') || titleLower.includes('telefono')) return Phone;\n    if (titleLower.includes('email') || titleLower.includes('correo')) return Mail;\n    if (titleLower.includes('ubicación') || titleLower.includes('ubicacion') || titleLower.includes('dirección') || titleLower.includes('direccion')) return MapPin;\n    return Mail; // Default\n  };\n\n  // Get icon for shipping info\n  const getShippingIcon = (title: string) => {\n    const titleLower = title.toLowerCase();\n    if (titleLower.includes('envío') || titleLower.includes('envio') || titleLower.includes('entrega')) return Truck;\n    if (titleLower.includes('pago') || titleLower.includes('tarjeta') || titleLower.includes('método')) return CreditCard;\n    if (titleLower.includes('gratis') || titleLower.includes('tiempo') || titleLower.includes('hora')) return Clock;\n    return Truck; // Default\n  };\n\n  // Show loading state if data is still loading\n  if (isLoading) {\n    return (\n      <section id=\"contacto\" className=\"py-20 bg-gradient-to-b from-black to-gray-900 relative\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-purple-400 mx-auto mb-4\" />\n          <p className=\"text-gray-400\">Cargando información de contacto...</p>\n        </div>\n      </section>\n    );\n  }\n\n  // Show error state if no content is available\n  if (!content || !contactData) {\n    return (\n      <section id=\"contacto\" className=\"py-20 bg-gradient-to-b from-black to-gray-900 relative\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-4xl md:text-5xl font-black text-white mb-6\">\n            <span className=\"bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent\">\n              Contacto\n            </span>\n          </h2>\n          <p className=\"text-gray-400 mb-8\">\n            La información de contacto no está disponible en este momento.\n          </p>\n          <Button \n            onClick={() => window.location.reload()} \n            className=\"bg-gradient-to-r from-purple-600 to-blue-600\"\n          >\n            Recargar página\n          </Button>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section id=\"contacto\" className=\"py-20 bg-gradient-to-b from-black to-gray-900 relative\">\n      {/* Background Elements */}\n      <div className=\"absolute top-10 right-10 w-64 h-64 bg-purple-500/10 rounded-full blur-3xl\"></div>\n      <div className=\"absolute bottom-10 left-10 w-48 h-48 bg-blue-500/10 rounded-full blur-2xl\"></div>\n      <div className=\"container mx-auto px-4 relative z-10\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-black text-white mb-6\">\n            <span className=\"bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent\">\n              {content.title}\n            </span>\n          </h2>\n          <p className=\"text-xl text-gray-300\">\n            {content.subtitle}\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n          {/* Contact Form - COMPLETELY DYNAMIC */}\n          <Card className=\"bg-black/60 border-purple-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl font-bold text-white\">\n                {contactData.formTitle}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"contact-name\" className=\"text-white\">\n                    {contactData.formLabels.name}\n                  </Label>\n                  <Input\n                    id=\"contact-name\"\n                    value={formData.name}\n                    onChange={(e) => handleInputChange('name', e.target.value)}\n                    className=\"bg-gray-800/50 border-purple-500/30 text-white\"\n                    placeholder={contactData.formPlaceholders.name}\n                    data-testid=\"input-contact-name\"\n                    required\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"contact-email\" className=\"text-white\">\n                    {contactData.formLabels.email}\n                  </Label>\n                  <Input\n                    id=\"contact-email\"\n                    type=\"email\"\n                    value={formData.email}\n                    onChange={(e) => handleInputChange('email', e.target.value)}\n                    className=\"bg-gray-800/50 border-purple-500/30 text-white\"\n                    placeholder={contactData.formPlaceholders.email}\n                    data-testid=\"input-contact-email\"\n                    required\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"contact-message\" className=\"text-white\">\n                    {contactData.formLabels.message}\n                  </Label>\n                  <Textarea\n                    id=\"contact-message\"\n                    value={formData.message}\n                    onChange={(e) => handleInputChange('message', e.target.value)}\n                    className=\"bg-gray-800/50 border-purple-500/30 text-white\"\n                    placeholder={contactData.formPlaceholders.message}\n                    rows={4}\n                    data-testid=\"textarea-contact-message\"\n                    required\n                  />\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white font-bold\"\n                  data-testid=\"button-submit-contact\"\n                  disabled={contactMutation.isPending}\n                >\n                  {contactMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                  {contactMutation.isPending ? 'Enviando...' : contactData.formButton}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Contact Info & Shipping - COMPLETELY DYNAMIC */}\n          <div className=\"space-y-8\">\n            {/* Contact Methods - DYNAMIC FROM DATABASE */}\n            <div className=\"space-y-4\">\n              {contactData.contactInfo.map((info, idx) => {\n                const IconComponent = getContactIcon(info.title);\n                return (\n                  <Card \n                    key={idx}\n                    className=\"bg-gray-900/60 border-purple-500/20 hover:border-purple-400/30 transition-all duration-300 hover-elevate\"\n                    data-testid={`card-contact-${idx}`}\n                  >\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-12 h-12 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full flex items-center justify-center\">\n                          <IconComponent className=\"h-6 w-6 text-white\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <h3 className=\"text-white font-bold\">{info.title}</h3>\n                          <p className=\"text-gray-400 text-sm\">{info.description}</p>\n                          <p className=\"text-purple-300 font-medium\">{info.value}</p>\n                        </div>\n                        {info.title.toLowerCase().includes('whatsapp') && (\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            className=\"border-green-500/30 text-green-400 hover:bg-green-500/10\"\n                            data-testid=\"button-whatsapp\"\n                          >\n                            <MessageCircle className=\"h-4 w-4 mr-1\" />\n                            {info.action}\n                          </Button>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n\n            {/* Shipping Info - COMPLETELY DYNAMIC */}\n            <Card className=\"bg-black/60 border-purple-500/20\">\n              <CardHeader>\n                <CardTitle className=\"text-xl font-bold text-white\">\n                  Envío y Pagos\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {/* Dynamic Shipping Information */}\n                <div className=\"space-y-4\">\n                  {contactData.shippingInfo.map((info, idx) => {\n                    const IconComponent = getShippingIcon(info.title);\n                    return (\n                      <div key={idx} className=\"flex items-start space-x-3\">\n                        <div className=\"w-8 h-8 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                          <IconComponent className=\"h-4 w-4 text-white\" />\n                        </div>\n                        <div>\n                          <h4 className=\"text-white font-medium\">{info.title}</h4>\n                          <p className=\"text-gray-400 text-sm\">{info.description}</p>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n\n                {/* Dynamic Payment Methods */}\n                <div className=\"mt-6 pt-6 border-t border-purple-500/20\">\n                  <h4 className=\"text-white font-medium mb-3\">Métodos de pago aceptados:</h4>\n                  <div className=\"grid grid-cols-3 gap-2 text-sm text-gray-400\">\n                    {contactData.paymentMethods.map((method, idx) => (\n                      <div key={idx}>✓ {method}</div>\n                    ))}\n                  </div>\n                  {/* Dynamic Shipping Notice */}\n                  <p className=\"text-xs text-purple-300 mt-2\">{contactData.shippingNotice}</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":12855},"client/src/components/Footer.tsx":{"content":"import { Facebook, Instagram, MessageCircle, Loader2 } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport { useQuery } from '@tanstack/react-query'\nimport { HomepageContentResponse, type FooterContent } from '@shared/schema'\n\nexport default function Footer() {\n  const currentYear = new Date().getFullYear()\n\n  // Fetch homepage content for footer\n  const { data: homepageContent, isLoading } = useQuery<HomepageContentResponse>({\n    queryKey: ['/api/homepage-content'],\n    staleTime: 5 * 60 * 1000, // 5 minutes cache\n  })\n\n  // Parse footer content from database\n  let footerData: FooterContent | null = null;\n  try {\n    if (homepageContent && 'success' in homepageContent && homepageContent.data?.footer?.content) {\n      footerData = JSON.parse(homepageContent.data.footer.content);\n    }\n  } catch (error) {\n    console.error('Error parsing footer content:', error);\n  }\n\n  const content = homepageContent && 'success' in homepageContent ? homepageContent.data?.footer : null;\n\n  // Show loading state\n  if (isLoading) {\n    return (\n      <footer className=\"bg-black border-t border-purple-500/20\">\n        <div className=\"container mx-auto px-4 py-16 text-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-purple-400 mx-auto mb-4\" />\n          <p className=\"text-gray-400\">Cargando información del footer...</p>\n        </div>\n      </footer>\n    );\n  }\n\n  // Show error state if no content is available\n  if (!content || !footerData) {\n    return (\n      <footer className=\"bg-black border-t border-purple-500/20\">\n        <div className=\"container mx-auto px-4 py-16 text-center\">\n          <h3 className=\"text-white font-bold text-lg mb-4\">Footer</h3>\n          <p className=\"text-gray-400 mb-8\">\n            La información del footer no está disponible en este momento.\n          </p>\n          <Button \n            onClick={() => window.location.reload()} \n            className=\"bg-gradient-to-r from-purple-600 to-blue-600\"\n          >\n            Recargar página\n          </Button>\n        </div>\n      </footer>\n    );\n  }\n\n  return (\n    <footer className=\"bg-black border-t border-purple-500/20\">\n      <div className=\"container mx-auto px-4\">\n        {/* Main Footer Content */}\n        <div className=\"py-16 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {/* Brand Column - COMPLETELY DYNAMIC */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"text-3xl font-black bg-gradient-to-r from-purple-500 to-blue-500 bg-clip-text text-transparent mb-4 font-mono\">\n              {footerData.brandName}\n            </div>\n            <p className=\"text-gray-400 mb-6 leading-relaxed\">\n              {footerData.brandDescription}\n            </p>\n            \n            {/* Social Links - Static for now */}\n            <div className=\"flex space-x-4\">\n              <Button \n                variant=\"outline\" \n                size=\"icon\"\n                className=\"border-purple-500/30 hover:border-purple-400 hover:bg-purple-500/10\"\n                data-testid=\"button-social-instagram\"\n                onClick={() => window.open('https://www.instagram.com/vapeolo', '_blank')}\n              >\n                <Instagram className=\"h-4 w-4\" />\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"icon\"\n                className=\"border-blue-500/30 hover:border-blue-400 hover:bg-blue-500/10\"\n                data-testid=\"button-social-facebook\"\n                onClick={() => window.open('https://www.facebook.com/vapeolo', '_blank')}\n              >\n                <Facebook className=\"h-4 w-4\" />\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"icon\"\n                className=\"border-green-500/30 hover:border-green-400 hover:bg-green-500/10\"\n                data-testid=\"button-social-whatsapp\"\n                onClick={() => window.open('https://wa.me/50212345678', '_blank')}\n              >\n                <MessageCircle className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Dynamic Columns - COMPLETELY FROM DATABASE */}\n          {Object.entries(footerData.columns).map(([key, column], columnIdx) => (\n            <div key={key}>\n              <h3 className=\"text-white font-bold text-lg mb-4\">{column.title}</h3>\n              <ul className=\"space-y-3\">\n                {column.links.map((link, linkIdx) => (\n                  <li key={linkIdx}>\n                    <a \n                      href={link.href}\n                      className=\"text-gray-400 hover:text-purple-400 transition-colors text-sm\"\n                      data-testid={`link-column-${columnIdx}-${linkIdx}`}\n                    >\n                      {link.name}\n                    </a>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          ))}\n        </div>\n\n        {/* Bottom Footer - COMPLETELY DYNAMIC */}\n        <div className=\"py-8 border-t border-purple-500/20\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0\">\n            <div className=\"text-gray-400 text-sm\">\n              {footerData.copyright.replace('{currentYear}', currentYear.toString()).replace('$currentYear', currentYear.toString())}\n            </div>\n            \n            {/* Dynamic Legal Links */}\n            <div className=\"flex flex-wrap gap-6 text-sm\">\n              {footerData.legalLinks.map((link, idx) => (\n                <a \n                  key={idx} \n                  href={link.href} \n                  className=\"text-gray-400 hover:text-purple-400 transition-colors\"\n                  data-testid={`link-legal-${idx}`}\n                >\n                  {link.name}\n                </a>\n              ))}\n            </div>\n          </div>\n\n          {/* Additional Info - DYNAMIC AGE NOTICE */}\n          <div className=\"mt-6 pt-6 border-t border-purple-500/10 text-center\">\n            <p className=\"text-gray-500 text-xs\">\n              {footerData.ageWarning}\n            </p>\n          </div>\n        </div>\n      </div>\n    </footer>\n  )\n}","size_bytes":6180},"client/src/components/Header.tsx":{"content":"import { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Menu, ShoppingCart, User, X, Loader2 } from 'lucide-react'\nimport { useCart } from '@/contexts/CartContext'\nimport { useDistributor } from '@/contexts/DistributorContext'\nimport { useLocation } from 'wouter'\nimport { useQuery } from '@tanstack/react-query'\nimport { HomepageContentResponse, type NavigationContent } from '@shared/schema'\nimport vapeologyLogo from '@assets/VAPEOLO(com)LOGO PNG_1757600785076.png'\n\nexport default function Header() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false)\n  const { getCartCount, openCart } = useCart()\n  const { distributor } = useDistributor()\n  const [, setLocation] = useLocation()\n\n  // Fetch homepage content for navigation\n  const { data: homepageContent, isLoading } = useQuery<HomepageContentResponse>({\n    queryKey: ['/api/homepage-content'],\n    staleTime: 5 * 60 * 1000, // 5 minutes cache\n  })\n\n  // Parse navigation content from database\n  let navigationData: NavigationContent | null = null;\n  try {\n    if (homepageContent && 'success' in homepageContent && homepageContent.data?.navigation?.content) {\n      navigationData = JSON.parse(homepageContent.data.navigation.content);\n    }\n  } catch (error) {\n    console.error('Error parsing navigation content:', error);\n  }\n\n  const content = homepageContent && 'success' in homepageContent ? homepageContent.data?.navigation : null;\n\n  // Show loading state\n  if (isLoading) {\n    return (\n      <header className=\"fixed top-0 w-full z-50 bg-black/90 backdrop-blur-md border-b border-purple-500/20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex items-center justify-center h-16\">\n            <Loader2 className=\"h-5 w-5 animate-spin text-purple-400\" />\n            <span className=\"text-gray-400 ml-2\">Cargando navegación...</span>\n          </div>\n        </div>\n      </header>\n    );\n  }\n\n  // Show minimal header if no content is available\n  if (!content || !navigationData) {\n    return (\n      <header className=\"fixed top-0 w-full z-50 bg-black/90 backdrop-blur-md border-b border-purple-500/20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-2\">\n              <img \n                src={vapeologyLogo} \n                alt=\"VAPEOLO\" \n                className=\"h-14 w-auto\"\n                data-testid=\"img-vapeolo-logo\"\n              />\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button \n                variant=\"outline\" \n                size=\"icon\" \n                className=\"relative border-purple-500/30 hover:border-purple-400 text-white hover:text-white\"\n                onClick={openCart}\n                data-testid=\"button-cart\"\n              >\n                <ShoppingCart className=\"h-4 w-4 text-white\" />\n                {getCartCount() > 0 && (\n                  <span className=\"absolute -top-2 -right-2 bg-purple-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n                    {getCartCount()}\n                  </span>\n                )}\n              </Button>\n              <Button \n                onClick={() => window.location.reload()} \n                className=\"bg-gradient-to-r from-purple-600 to-blue-600 text-sm\"\n              >\n                Recargar\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n    );\n  }\n\n  return (\n    <header className=\"fixed top-0 w-full z-50 bg-black/90 backdrop-blur-md border-b border-purple-500/20\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo - DYNAMIC ALT TEXT */}\n          <div className=\"flex items-center space-x-2\">\n            <img \n              src={vapeologyLogo} \n              alt={navigationData.logoAlt} \n              className=\"h-14 w-auto\"\n              data-testid=\"img-vapeolo-logo\"\n            />\n          </div>\n\n          {/* Desktop Navigation - COMPLETELY DYNAMIC */}\n          <nav className=\"hidden lg:flex items-center space-x-8\">\n            {Object.entries(navigationData.menuItems).map(([key, label], idx) => {\n              const urlMap: Record<string, string> = {\n                inicio: '#inicio',\n                productos: '#productos', \n                afiliados: '/affiliates',\n                contacto: '#contacto'\n              };\n              return (\n                <a \n                  key={idx}\n                  href={urlMap[key] || '#'} \n                  className=\"text-gray-300 hover:text-purple-400 transition-colors\"\n                  data-testid={`link-menu-${idx}`}\n                >\n                  {label}\n                </a>\n              );\n            })}\n          </nav>\n\n          {/* Action Buttons - DYNAMIC TOOLTIPS/LABELS */}\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"outline\" \n              size=\"icon\" \n              className=\"relative border-purple-500/30 hover:border-purple-400 text-white hover:text-white\"\n              onClick={openCart}\n              data-testid=\"button-cart\"\n              title={navigationData.buttons.cart}\n            >\n              <ShoppingCart className=\"h-4 w-4 text-white\" />\n              {getCartCount() > 0 && (\n                <span className=\"absolute -top-2 -right-2 bg-purple-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n                  {getCartCount()}\n                </span>\n              )}\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              size=\"icon\" \n              className=\"hidden lg:flex border-purple-500/30 hover:border-purple-400 text-white hover:text-white\"\n              onClick={() => distributor ? setLocation('/distributor/dashboard') : setLocation('/distributor/login')}\n              data-testid=\"button-distributor\"\n              title={navigationData.buttons.login}\n            >\n              <User className=\"h-4 w-4 text-white\" />\n            </Button>\n\n            <Button \n              variant=\"outline\" \n              size=\"icon\" \n              className=\"lg:hidden border-purple-500/30 text-white hover:text-white\"\n              onClick={() => setIsMenuOpen(!isMenuOpen)}\n              title={navigationData.buttons.mobileMenu}\n              data-testid=\"button-mobile-menu\"\n            >\n              {isMenuOpen ? <X className=\"h-4 w-4 text-white\" /> : <Menu className=\"h-4 w-4 text-white\" />}\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile Menu - COMPLETELY DYNAMIC */}\n        {isMenuOpen && (\n          <div className=\"lg:hidden py-4 border-t border-purple-500/20\">\n            <nav className=\"flex flex-col space-y-4\">\n              {Object.entries(navigationData.menuItems).map(([key, label], idx) => {\n                const urlMap: Record<string, string> = {\n                  inicio: '#inicio',\n                  productos: '#productos', \n                  afiliados: '/affiliates',\n                  contacto: '#contacto'\n                };\n                return (\n                  <a \n                    key={idx}\n                    href={urlMap[key] || '#'} \n                    className=\"text-gray-300 hover:text-purple-400 transition-colors py-2\"\n                    data-testid={`link-mobile-menu-${idx}`}\n                    onClick={() => setIsMenuOpen(false)}\n                  >\n                    {label}\n                  </a>\n                );\n              })}\n              <Button \n                variant=\"outline\" \n                className=\"w-full border-purple-500/30 hover:border-purple-400 text-white hover:text-white\"\n                onClick={() => {\n                  setIsMenuOpen(false);\n                  distributor ? setLocation('/distributor/dashboard') : setLocation('/distributor/login');\n                }}\n                data-testid=\"button-mobile-login\"\n              >\n                <User className=\"h-4 w-4 mr-2 text-white\" />\n                {navigationData.buttons.login}\n              </Button>\n            </nav>\n          </div>\n        )}\n      </div>\n    </header>\n  )\n}","size_bytes":8301},"client/src/components/HeroSection.tsx":{"content":"import { Button } from '@/components/ui/button'\nimport { ArrowRight, ShoppingCart, Users, Loader2 } from 'lucide-react'\nimport { useLocation } from 'wouter'\nimport { useQuery } from '@tanstack/react-query'\nimport { HomepageContentResponse, type HeroContent, type HeroFeature } from '@shared/schema'\nimport heroImage from '@assets/generated_images/Hero_banner_lifestyle_image_3d61fbb5.png'\n\nexport default function HeroSection() {\n  const [, setLocation] = useLocation()\n\n  // Fetch homepage content for hero section\n  const { data: homepageContent, isLoading } = useQuery<HomepageContentResponse>({\n    queryKey: ['/api/homepage-content'],\n    staleTime: 5 * 60 * 1000, // 5 minutes cache\n  })\n\n  // Parse hero content from database\n  let heroData: HeroContent | null = null;\n  try {\n    if (homepageContent && 'success' in homepageContent && homepageContent.data?.hero?.content) {\n      heroData = JSON.parse(homepageContent.data.hero.content);\n    }\n  } catch (error) {\n    console.error('Error parsing hero content:', error);\n  }\n\n  const content = homepageContent && 'success' in homepageContent ? homepageContent.data?.hero : null;\n\n  const scrollToProducts = () => {\n    const productosSection = document.getElementById('productos')\n    if (productosSection) {\n      productosSection.scrollIntoView({ behavior: 'smooth' })\n    }\n  }\n\n  const navigateToAffiliates = () => {\n    setLocation('/affiliates')\n  }\n\n  // Show loading state\n  if (isLoading) {\n    return (\n      <section id=\"inicio\" className=\"relative min-h-screen flex items-center justify-center overflow-hidden\">\n        <div className=\"absolute inset-0\">\n          <img \n            src={heroImage} \n            alt=\"LAVIE Vapes Hero\" \n            className=\"w-full h-full object-cover\"\n          />\n          <div className=\"absolute inset-0 bg-gradient-to-r from-black/80 via-purple-900/50 to-blue-900/30\"></div>\n        </div>\n        <div className=\"relative z-10 text-center\">\n          <Loader2 className=\"h-12 w-12 animate-spin text-purple-400 mx-auto mb-4\" />\n          <p className=\"text-gray-300 text-xl\">Cargando contenido principal...</p>\n        </div>\n      </section>\n    );\n  }\n\n  // Show error state if no content is available\n  if (!content || !heroData) {\n    return (\n      <section id=\"inicio\" className=\"relative min-h-screen flex items-center justify-center overflow-hidden\">\n        <div className=\"absolute inset-0\">\n          <img \n            src={heroImage} \n            alt=\"LAVIE Vapes Hero\" \n            className=\"w-full h-full object-cover\"\n          />\n          <div className=\"absolute inset-0 bg-gradient-to-r from-black/80 via-purple-900/50 to-blue-900/30\"></div>\n        </div>\n        <div className=\"relative z-10 text-center\">\n          <h1 className=\"text-5xl md:text-7xl font-black mb-6 leading-tight\">\n            <span className=\"bg-gradient-to-r from-purple-400 via-pink-400 to-blue-400 bg-clip-text text-transparent\">\n              VAPEOLO\n            </span>\n          </h1>\n          <p className=\"text-xl text-gray-300 mb-8\">\n            El contenido principal no está disponible en este momento.\n          </p>\n          <Button \n            onClick={() => window.location.reload()} \n            className=\"bg-gradient-to-r from-purple-600 to-blue-600\"\n          >\n            Recargar página\n          </Button>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section id=\"inicio\" className=\"relative min-h-screen flex items-center overflow-hidden\">\n      {/* Background Image with Gradient Overlay */}\n      <div className=\"absolute inset-0\">\n        <img \n          src={heroImage} \n          alt=\"LAVIE Vapes Hero\" \n          className=\"w-full h-full object-cover\"\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-r from-black/80 via-purple-900/50 to-blue-900/30\"></div>\n      </div>\n      \n      {/* Content - COMPLETELY DYNAMIC */}\n      <div className=\"relative z-10 container mx-auto px-4 pt-20\">\n        <div className=\"max-w-4xl\">\n          {/* Main Heading - DYNAMIC FROM DATABASE */}\n          <h1 className=\"text-5xl md:text-7xl font-black mb-6 leading-tight\">\n            <span className=\"bg-gradient-to-r from-purple-400 via-pink-400 to-blue-400 bg-clip-text text-transparent\">\n              {content.title}\n            </span>\n            <br />\n            <span className=\"text-white\">\n              {content.subtitle}\n            </span>\n          </h1>\n\n          {/* Subtitle - DYNAMIC FROM DATABASE */}\n          <p className=\"text-xl md:text-2xl text-gray-300 mb-8 font-medium\">\n            {content.description}\n          </p>\n\n          {/* Features - COMPLETELY DYNAMIC FROM DATABASE */}\n          <div className=\"flex flex-wrap gap-6 mb-10 text-lg\">\n            {heroData.features.map((feature: HeroFeature, idx: number) => (\n              <div key={idx} className=\"flex items-center text-purple-300\">\n                <span className=\"text-2xl mr-2\">{feature.icon}</span>\n                <span className={`${\n                  idx === 0 ? 'text-purple-300' : \n                  idx === 1 ? 'text-blue-300' : 'text-green-300'\n                }`}>\n                  {feature.text}\n                </span>\n              </div>\n            ))}\n          </div>\n\n          {/* CTA Buttons - DYNAMIC FROM DATABASE */}\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <Button \n              size=\"lg\" \n              className=\"bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white font-bold px-8 py-4 text-lg\"\n              data-testid=\"button-ver-productos\"\n              onClick={scrollToProducts}\n            >\n              <ShoppingCart className=\"mr-2 h-5 w-5\" />\n              {heroData.buttons.primary}\n              <ArrowRight className=\"ml-2 h-5 w-5\" />\n            </Button>\n            \n            <Button \n              size=\"lg\" \n              variant=\"outline\" \n              className=\"border-2 border-purple-400 text-purple-300 hover:bg-purple-400 hover:text-black font-bold px-8 py-4 text-lg backdrop-blur-sm\"\n              data-testid=\"button-afiliado\"\n              onClick={navigateToAffiliates}\n            >\n              <Users className=\"mr-2 h-5 w-5\" />\n              {heroData.buttons.secondary}\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Floating Elements */}\n      <div className=\"absolute bottom-10 right-10 opacity-20\">\n        <div className=\"w-32 h-32 rounded-full bg-gradient-to-r from-purple-500 to-blue-500 blur-xl\"></div>\n      </div>\n      <div className=\"absolute top-1/3 right-1/4 opacity-10\">\n        <div className=\"w-20 h-20 rounded-full bg-gradient-to-r from-pink-500 to-purple-500 blur-lg\"></div>\n      </div>\n    </section>\n  )\n}","size_bytes":6750},"client/src/components/ProductStore.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { Star, ShoppingCart, Loader2, AlertCircle } from 'lucide-react'\nimport { useCart } from '@/contexts/CartContext'\nimport { useDistributor } from '@/contexts/DistributorContext'\nimport FlavorSelector from '@/components/FlavorSelector'\nimport { useQuery } from '@tanstack/react-query'\nimport type { Product, ProductFlavor } from '@shared/schema'\nimport { getFlavorAvailableInventory, isFlavorOutOfStock } from '@shared/schema'\nimport barImage from '@assets/BAR (1)_1757558165026.png'\nimport cubeImage from '@assets/CUBE_1757558165026.png'\nimport cyberImage from '@assets/CYBER_1757558165027.png'\nimport energyImage from '@assets/ENERGY_1757558165028.png'\nimport torchImage from '@assets/TORCH (1)_1757558165028.png'\n\n// Image mapping for products from database\nconst imageMapping: Record<string, string> = {\n  'CYBER_1757558165027.png': cyberImage,\n  'CUBE_1757558165026.png': cubeImage,\n  'ENERGY_1757558165028.png': energyImage,\n  'TORCH (1)_1757558165028.png': torchImage,\n  'BAR (1)_1757558165026.png': barImage,\n};\n\n// Transform database product for display\nfunction transformProduct(product: Product & { flavors?: ProductFlavor[] }) {\n  // Use only actual flavors from database - no legacy fallback to sabores\n  const flavors = product.flavors || [];\n  \n  // Get available flavors (active and not out of stock)\n  const availableFlavors = flavors.filter(flavor => flavor.active && !isFlavorOutOfStock(flavor));\n\n  // Handle image paths - support both uploaded images and legacy static imports\n  let imageSrc = '';\n  if (product.image) {\n    if (product.image.startsWith('products/')) {\n      // This is an uploaded image, serve from uploads directory\n      imageSrc = `/uploads/${product.image}`;\n    } else {\n      // This is a legacy image, use the mapping\n      imageSrc = imageMapping[product.image] || '';\n    }\n  }\n\n  return {\n    id: product.id,\n    name: product.name,\n    puffs: `${product.puffs.toLocaleString()} Puffs`, // Format number with commas\n    price: `Q${Math.round(parseFloat(product.price))}`, // Add Q prefix and round\n    image: imageSrc,\n    sabores: product.sabores, // Include sabores for FlavorSelector compatibility\n    flavors: flavors, // Actual flavors from database\n    availableFlavors: availableFlavors, // Only flavors that can be selected\n    hasFlavorInventory: flavors.length > 0, // Indicates if product uses flavor-based inventory\n    popular: product.popular,\n    originalPrice: parseFloat(product.price), // Keep original for calculations\n  };\n}\n\nexport default function ProductStore() {\n  const { getCartCount } = useCart()\n  const { distributor } = useDistributor()\n\n  // Fetch products from API\n  const { data: productsResponse, isLoading, error } = useQuery<{success: boolean; data: (Product & { flavors?: ProductFlavor[] })[]}>({\n    queryKey: ['/api/products'],\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Transform products for display\n  const products = productsResponse?.data?.map((product: Product) => transformProduct(product)) || [];\n\n\n  return (\n    <section id=\"productos\" className=\"py-20 bg-gray-900\">\n      <div className=\"container mx-auto px-4\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-black text-white mb-6\">\n            <span className=\"bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent\">\n              Ordena Online\n            </span>\n          </h2>\n          <p className=\"text-xl text-gray-300 mb-8\">\n            Descubre nuestra línea completa de vapes premium\n          </p>\n        </div>\n\n        {/* Loading State */}\n        {isLoading && (\n          <div className=\"flex flex-col items-center justify-center py-20\" data-testid=\"loading-products\">\n            <Loader2 className=\"h-12 w-12 animate-spin text-purple-400 mb-4\" />\n            <p className=\"text-xl text-gray-300\">Cargando productos...</p>\n          </div>\n        )}\n\n        {/* Error State */}\n        {error && (\n          <div className=\"flex flex-col items-center justify-center py-20\" data-testid=\"error-products\">\n            <AlertCircle className=\"h-12 w-12 text-red-400 mb-4\" />\n            <p className=\"text-xl text-red-300 mb-2\">Error al cargar productos</p>\n            <p className=\"text-gray-400\">Por favor, intenta recargar la página</p>\n          </div>\n        )}\n\n        {/* No Products State */}\n        {!isLoading && !error && products.length === 0 && (\n          <div className=\"flex flex-col items-center justify-center py-20\" data-testid=\"no-products\">\n            <ShoppingCart className=\"h-12 w-12 text-gray-400 mb-4\" />\n            <p className=\"text-xl text-gray-300 mb-2\">No hay productos disponibles</p>\n            <p className=\"text-gray-400\">Vuelve pronto para ver nuestros productos</p>\n          </div>\n        )}\n\n        {/* Products Grid */}\n        {!isLoading && !error && products.length > 0 && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {products.map((product) => (\n            <Card \n              key={product.id}\n              className=\"bg-black/60 border-purple-500/20 hover:border-purple-400/50 transition-all duration-300 overflow-hidden hover-elevate\"\n              data-testid={`card-product-${product.id}`}\n            >\n              <div className=\"relative\">\n                {product.popular && (\n                  <Badge className=\"absolute top-4 left-4 z-10 bg-gradient-to-r from-purple-500 to-pink-500\">\n                    <Star className=\"h-3 w-3 mr-1\" />\n                    Popular\n                  </Badge>\n                )}\n                \n                <div className=\"aspect-square bg-gradient-to-br from-purple-900/20 to-blue-900/20 flex items-center justify-center p-8\">\n                  {product.image ? (\n                    <img \n                      src={product.image} \n                      alt={product.name}\n                      className=\"max-w-full max-h-full object-contain\"\n                      data-testid={`img-product-${product.id}`}\n                    />\n                  ) : (\n                    <div className=\"w-32 h-32 bg-gray-700/50 rounded-lg flex items-center justify-center\">\n                      <ShoppingCart className=\"h-8 w-8 text-gray-400\" />\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <CardContent className=\"p-6\">\n                <div className=\"flex justify-between items-start mb-4\">\n                  <div>\n                    <h3 className=\"text-2xl font-black text-white mb-1\">{product.name}</h3>\n                    <p className=\"text-purple-300 font-medium\">{product.puffs}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    {distributor ? (\n                      <div className=\"space-y-1\">\n                        <div className=\"text-sm text-gray-400 line-through\">\n                          Público: {product.price}\n                        </div>\n                        <div className=\"text-2xl font-black text-green-400\">\n                          Q{(product.originalPrice * (1 - parseFloat(distributor.discount) / 100)).toFixed(0)}\n                        </div>\n                        <div className=\"text-xs text-purple-300\">\n                          {distributor.discount}% desc.\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"text-2xl font-black text-green-400\">{product.price}</div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Sabores */}\n                <div className=\"mb-6\">\n                  <p className=\"text-gray-400 text-sm mb-2\">Sabores disponibles:</p>\n                  <div className=\"flex flex-wrap gap-1\">\n                    {product.availableFlavors.slice(0, 3).map((flavor, idx: number) => (\n                      <Badge key={idx} variant=\"outline\" className=\"text-xs border-purple-500/30 text-purple-300\">\n                        {flavor.name}\n                      </Badge>\n                    ))}\n                    {product.availableFlavors.length > 3 && (\n                      <Badge variant=\"outline\" className=\"text-xs border-blue-500/30 text-blue-300\">\n                        +{product.availableFlavors.length - 3} más\n                      </Badge>\n                    )}\n                    {product.availableFlavors.length === 0 && product.hasFlavorInventory && (\n                      <Badge variant=\"outline\" className=\"text-xs border-red-500/30 text-red-300\">\n                        Sin sabores disponibles\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n\n                <FlavorSelector product={product} />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n        )}\n\n        {/* Cart Summary */}\n        {getCartCount() > 0 && (\n          <div className=\"mt-12 text-center\">\n            <div className=\"inline-flex items-center bg-purple-600/20 border border-purple-500/30 rounded-lg px-6 py-3\">\n              <ShoppingCart className=\"mr-2 h-5 w-5 text-purple-400\" />\n              <span className=\"text-white\">\n                {getCartCount()} producto{getCartCount() !== 1 ? 's' : ''} en el carrito\n              </span>\n            </div>\n          </div>\n        )}\n      </div>\n    </section>\n  )\n}","size_bytes":9520},"client/src/components/TestimonialsSection.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card'\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\nimport { Star, Quote } from 'lucide-react'\nimport { useQuery } from '@tanstack/react-query'\nimport { HomepageContentResponse, type TestimonialsContent } from '@shared/schema'\n\nexport default function TestimonialsSection() {\n  // Fetch homepage content with graceful fallback\n  const { data: homepageContent } = useQuery<HomepageContentResponse>({\n    queryKey: ['/api/homepage-content'],\n    staleTime: 5 * 60 * 1000, // 5 minutes cache\n  })\n\n  // Default hardcoded content as fallback\n  const defaultContent = {\n    title: 'Testimonios',\n    subtitle: 'Lo que dicen nuestros clientes y socios'\n  }\n\n  // Use database content if available, otherwise fallback to default\n  const content = (homepageContent && 'success' in homepageContent && homepageContent.data?.testimonials) || defaultContent\n\n  // Default social content as fallback\n  const defaultSocialContent = {\n    socialPrompt: 'Síguenos en redes sociales',\n    socialPlatforms: [\n      { platform: \"Instagram\", handle: \"@lavievapes.gt\", followers: \"45.2K\" },\n      { platform: \"TikTok\", handle: \"@lavievapes\", followers: \"32.8K\" },\n      { platform: \"Facebook\", handle: \"LAVIE Vapes Guatemala\", followers: \"28.1K\" }\n    ],\n    ctaPrompt: 'Síguenos para contenido exclusivo',\n    ctaFeatures: '📸 Fotos de clientes • 🎥 Reviews y unboxing • 🎁 Promos y giveaways'\n  }\n\n  // Parse social content from content JSON field or use defaults\n  let socialContent = defaultSocialContent\n  try {\n    if (content && 'content' in content && content.content) {\n      const parsedContent = JSON.parse(content.content) as TestimonialsContent\n      socialContent = parsedContent\n    }\n  } catch {\n    // Fallback to default if JSON parsing fails\n    socialContent = defaultSocialContent\n  }\n\n  // TODO: Remove mock functionality\n  const testimonials = [\n    {\n      id: 1,\n      name: \"Carlos G.\",\n      role: \"Socio\",\n      avatar: \"\",\n      rating: 5,\n      text: \"Desde que soy distribuidor de LAVIE, genero ingresos mensuales constantes y mis clientes aman los sabores. La calidad es excepcional.\"\n    },\n    {\n      id: 2,\n      name: \"Ana M.\", \n      role: \"Cliente frecuente\",\n      avatar: \"\",\n      rating: 5,\n      text: \"Los sabores son intensos, el diseño es moderno y duran muchísimo. Definitivamente la mejor marca de vapes que he probado.\"\n    },\n    {\n      id: 3,\n      name: \"Roberto L.\",\n      role: \"Distribuidor\",\n      avatar: \"\",\n      rating: 5,\n      text: \"El programa de afiliación es muy justo y el soporte es excelente. LAVIE realmente cuida a sus socios comerciales.\"\n    },\n    {\n      id: 4,\n      name: \"María S.\",\n      role: \"Cliente\",\n      avatar: \"\",\n      rating: 5,\n      text: \"La duración de 20,000 puffs es real. Un solo vape me dura semanas. Excelente relación precio-calidad.\"\n    }\n  ]\n\n  // Remove hardcoded socialStats as they now come from CMS\n\n  return (\n    <section className=\"py-20 bg-black relative overflow-hidden\">\n      {/* Background Effects */}\n      <div className=\"absolute top-20 left-20 w-64 h-64 bg-purple-500/5 rounded-full blur-3xl\"></div>\n      <div className=\"absolute bottom-20 right-20 w-48 h-48 bg-blue-500/5 rounded-full blur-2xl\"></div>\n      <div className=\"container mx-auto px-4 relative z-10\">\n        {/* Section Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-black text-white mb-6\">\n            <span className=\"bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent\">\n              {content.title}\n            </span>\n          </h2>\n          <p className=\"text-xl text-gray-300\">\n            {content.subtitle}\n          </p>\n        </div>\n\n        {/* Testimonials Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-16\">\n          {testimonials.map((testimonial) => (\n            <Card \n              key={testimonial.id}\n              className=\"bg-gray-900/60 border-purple-500/20 hover:border-purple-400/30 transition-all duration-300 hover-elevate\"\n              data-testid={`card-testimonial-${testimonial.id}`}\n            >\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start space-x-4\">\n                  <Quote className=\"h-8 w-8 text-purple-400 flex-shrink-0 mt-1\" />\n                  <div className=\"flex-1\">\n                    <p className=\"text-gray-300 mb-4 italic\">\n                      \"{testimonial.text}\"\n                    </p>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Avatar className=\"border-2 border-purple-500/30\">\n                          <AvatarImage src={testimonial.avatar} />\n                          <AvatarFallback className=\"bg-gradient-to-r from-purple-500 to-blue-500 text-white font-bold\">\n                            {testimonial.name.split(' ').map(n => n[0]).join('')}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <div className=\"text-white font-bold\">{testimonial.name}</div>\n                          <div className=\"text-purple-300 text-sm\">{testimonial.role}</div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-1\">\n                        {[...Array(testimonial.rating)].map((_, i) => (\n                          <Star key={i} className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Social Media Section */}\n        <div className=\"text-center\">\n          <h3 className=\"text-2xl font-bold text-white mb-8\">\n            Síguenos en redes sociales\n          </h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n            {socialContent.socialPlatforms.map((social: any, idx: number) => (\n              <Card \n                key={idx}\n                className=\"bg-gradient-to-br from-purple-900/20 to-blue-900/20 border-purple-500/20 hover:border-purple-400/50 transition-all duration-300 hover-elevate\"\n                data-testid={`card-social-${idx}`}\n              >\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"text-2xl font-black text-white mb-2\">{social.followers}</div>\n                  <div className=\"font-medium mb-1 text-[#7e23de]\">{social.platform}</div>\n                  <div className=\"text-sm text-[#3c3e42]\">{social.handle}</div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* CTA */}\n          <div className=\"bg-gradient-to-r from-purple-600/20 to-blue-600/20 border border-purple-500/30 rounded-lg p-6 inline-block\">\n            <p className=\"text-lg text-white mb-2\">\n              <span className=\"text-purple-400 font-bold\">Síguenos</span> para contenido exclusivo\n            </p>\n            <p className=\"text-gray-300\">\n              📸 Fotos de clientes • 🎥 Reviews y unboxing • 🎁 Promos y giveaways\n            </p>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":7491},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface User {\n  id: string;\n  username: string;\n  role: string;\n  editInventory: boolean;\n  addProduct: boolean;\n  deleteItems: boolean;\n  deleteAffiliate: boolean;\n  authorizeAffiliate: boolean;\n  pauseAffiliate: boolean;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  token: string | null;\n  login: (username: string, password: string) => Promise<boolean>;\n  logout: () => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    // Check for existing session on app load\n    const savedToken = localStorage.getItem(\"admin_token\");\n    const savedUser = localStorage.getItem(\"admin_user\");\n    \n    if (savedToken && savedUser) {\n      setToken(savedToken);\n      setUser(JSON.parse(savedUser));\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = async (username: string, password: string): Promise<boolean> => {\n    try {\n      const response = await fetch(\"/api/admin/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ username, password }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        toast({\n          title: \"Error de autenticación\",\n          description: data.error || \"Credenciales inválidas\",\n          variant: \"destructive\",\n        });\n        return false;\n      }\n\n      if (data.success) {\n        setUser(data.data.user);\n        setToken(data.data.token);\n        localStorage.setItem(\"admin_token\", data.data.token);\n        localStorage.setItem(\"admin_user\", JSON.stringify(data.data.user));\n        \n        toast({\n          title: \"Bienvenido\",\n          description: `Sesión iniciada como ${data.data.user.username}`,\n        });\n        return true;\n      }\n\n      return false;\n    } catch (error) {\n      toast({\n        title: \"Error de conexión\",\n        description: \"No se pudo conectar con el servidor\",\n        variant: \"destructive\",\n      });\n      return false;\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem(\"admin_token\");\n    localStorage.removeItem(\"admin_user\");\n    \n    toast({\n      title: \"Sesión cerrada\",\n      description: \"Has cerrado sesión exitosamente\",\n    });\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, token, login, logout, isLoading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}","size_bytes":3024},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 5000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\n// VAPEOLO Toast Convenience Methods\ntoast.success = (title: string, description?: string) => {\n  return toast({\n    title,\n    description,\n    variant: \"success\",\n  })\n}\n\ntoast.error = (title: string, description?: string) => {\n  return toast({\n    title,\n    description,\n    variant: \"error\",\n  })\n}\n\ntoast.warning = (title: string, description?: string) => {\n  return toast({\n    title,\n    description,\n    variant: \"warning\",\n  })\n}\n\ntoast.info = (title: string, description?: string) => {\n  return toast({\n    title,\n    description,\n    variant: \"info\",\n  })\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":4463},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const token = localStorage.getItem(\"admin_token\");\n  const headers: Record<string, string> = data ? { \"Content-Type\": \"application/json\" } : {};\n  \n  if (token) {\n    headers[\"Authorization\"] = token;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem(\"admin_token\");\n    const headers: Record<string, string> = {};\n    \n    if (token) {\n      headers[\"Authorization\"] = token;\n    }\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1726},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AdminAffiliates.tsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { \n  ArrowLeft, \n  Check, \n  X, \n  Users,\n  Mail,\n  Phone,\n  Calendar,\n  DollarSign,\n  Pause,\n  Trash2\n} from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\nimport AdminProfileDropdown from \"@/components/AdminProfileDropdown\";\n\ninterface Affiliate {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  level: string;\n  discount: string;\n  minimumPurchase: string;\n  status: string;\n  message?: string;\n  createdAt: string;\n  approvedAt?: string;\n}\n\nexport default function AdminAffiliates() {\n  const { user, token } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [deletingAffiliate, setDeletingAffiliate] = useState<Affiliate | null>(null);\n  const [standbyAffiliate, setStandbyAffiliate] = useState<Affiliate | null>(null);\n\n  // Redirect if not logged in\n  if (!user) {\n    setLocation(\"/admin/login\");\n    return null;\n  }\n\n  const { data: affiliates, isLoading } = useQuery({\n    queryKey: [\"/api/admin/affiliates\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/affiliates\", {\n        headers: {\n          Authorization: token || \"\",\n        },\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch affiliates\");\n      }\n      const result = await response.json();\n      return result.data as Affiliate[];\n    },\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      const response = await fetch(`/api/admin/affiliates/${id}/status`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token || \"\",\n        },\n        body: JSON.stringify({ status }),\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to update affiliate status\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/affiliates\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/dashboard\"] });\n      toast({\n        title: \"Estado actualizado\",\n        description: \"El estado del afiliado se ha actualizado correctamente\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo actualizar el estado del afiliado\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteAffiliateMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/admin/affiliates/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          Authorization: token || \"\",\n        },\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to delete affiliate\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/affiliates\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/dashboard\"] });\n      toast({\n        title: \"Afiliado eliminado\",\n        description: \"El afiliado se ha eliminado correctamente\",\n      });\n      setDeletingAffiliate(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo eliminar el afiliado\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUpdateStatus = (id: string, status: string) => {\n    updateStatusMutation.mutate({ id, status });\n  };\n\n  const handleConfirmDelete = () => {\n    if (deletingAffiliate) {\n      deleteAffiliateMutation.mutate(deletingAffiliate.id);\n    }\n  };\n\n  const handleConfirmStandby = () => {\n    if (standbyAffiliate) {\n      updateStatusMutation.mutate({ id: standbyAffiliate.id, status: \"standby\" });\n      setStandbyAffiliate(null);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <Badge variant=\"secondary\" className=\"bg-yellow-500/10 text-yellow-400\">Pendiente</Badge>;\n      case \"approved\":\n        return <Badge variant=\"secondary\" className=\"bg-green-500/10 text-green-400\">Aprobado</Badge>;\n      case \"rejected\":\n        return <Badge variant=\"secondary\" className=\"bg-red-500/10 text-red-400\">Rechazado</Badge>;\n      case \"standby\":\n        return <Badge variant=\"secondary\" className=\"bg-orange-500/10 text-orange-400\">En Espera</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const getLevelInfo = (level: string) => {\n    switch (level) {\n      case \"agente\":\n        return { name: \"Agente\", discount: \"10-12%\", minimum: \"Q500\" };\n      case \"distribuidor\":\n        return { name: \"Distribuidor\", discount: \"25-30%\", minimum: \"Q1,500\" };\n      case \"socio\":\n        return { name: \"Socio\", discount: \"45-50%\", minimum: \"Q3,500\" };\n      default:\n        return { name: level, discount: \"N/A\", minimum: \"N/A\" };\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black\">\n      {/* Header */}\n      <header className=\"bg-gray-900 border-b border-purple-500/20 p-4\">\n        <div className=\"max-w-7xl mx-auto flex justify-between items-center\">\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setLocation(\"/admin\")}\n              className=\"border-purple-500/50 text-purple-400 hover:bg-purple-500/10\"\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Volver al Dashboard\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-white\">Gestión de Afiliados</h1>\n              <p className=\"text-gray-400\">Aprobar y gestionar solicitudes de afiliación</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <AdminProfileDropdown />\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto p-6\">\n        {isLoading ? (\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <Card key={i} className=\"bg-gray-900 border-purple-500/20\">\n                <CardHeader>\n                  <Skeleton className=\"h-6 w-48 bg-gray-800\" />\n                  <Skeleton className=\"h-4 w-32 bg-gray-800\" />\n                </CardHeader>\n                <CardContent>\n                  <Skeleton className=\"h-20 bg-gray-800\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {affiliates?.length === 0 ? (\n              <Card className=\"bg-gray-900 border-purple-500/20\">\n                <CardContent className=\"text-center py-12\">\n                  <Users className=\"w-12 h-12 text-gray-600 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">No hay afiliados registrados</h3>\n                  <p className=\"text-gray-400\">Las solicitudes de afiliación aparecerán aquí</p>\n                </CardContent>\n              </Card>\n            ) : (\n              affiliates?.map((affiliate) => {\n                const levelInfo = getLevelInfo(affiliate.level);\n                return (\n                  <Card key={affiliate.id} className=\"bg-gray-900 border-purple-500/20\">\n                    <CardHeader>\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <CardTitle className=\"text-white flex items-center gap-2\">\n                            {affiliate.name}\n                            {getStatusBadge(affiliate.status)}\n                          </CardTitle>\n                          <div className=\"text-sm text-gray-400 mt-2 space-y-1\">\n                            <div className=\"flex items-center gap-2\">\n                              <Mail className=\"w-4 h-4\" />\n                              {affiliate.email}\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <Phone className=\"w-4 h-4\" />\n                              {affiliate.phone}\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <Calendar className=\"w-4 h-4\" />\n                              Solicitud: {format(new Date(affiliate.createdAt), \"dd/MM/yyyy\")}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge variant=\"outline\" className=\"mb-2 border-purple-500/50 text-purple-400\">\n                            {levelInfo.name}\n                          </Badge>\n                          <div className=\"text-sm text-gray-400\">\n                            <div>Descuento: {levelInfo.discount}</div>\n                            <div>Mínimo: {levelInfo.minimum}</div>\n                          </div>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      {affiliate.message && (\n                        <div className=\"mb-4 p-3 bg-gray-800 rounded-lg\">\n                          <p className=\"text-sm text-gray-300\">\n                            <strong>Mensaje:</strong> {affiliate.message}\n                          </p>\n                        </div>\n                      )}\n                      \n                      <div className=\"grid md:grid-cols-2 gap-3 mb-4 text-sm\">\n                        <div className=\"flex items-center gap-2 text-gray-300\">\n                          <DollarSign className=\"w-4 h-4 text-green-400\" />\n                          Descuento asignado: {affiliate.discount}%\n                        </div>\n                        <div className=\"flex items-center gap-2 text-gray-300\">\n                          <DollarSign className=\"w-4 h-4 text-blue-400\" />\n                          Compra mínima: Q{affiliate.minimumPurchase}\n                        </div>\n                      </div>\n\n                      {/* Action Buttons */}\n                      <div className=\"flex gap-3 flex-wrap\">\n                        {affiliate.status === \"pending\" && (\n                          <>\n                            <Button\n                              onClick={() => handleUpdateStatus(affiliate.id, \"approved\")}\n                              disabled={updateStatusMutation.isPending}\n                              className=\"bg-green-600 hover:bg-green-700\"\n                              data-testid={`button-approve-${affiliate.id}`}\n                            >\n                              <Check className=\"w-4 h-4 mr-2\" />\n                              Aprobar\n                            </Button>\n                            <Button\n                              onClick={() => handleUpdateStatus(affiliate.id, \"rejected\")}\n                              disabled={updateStatusMutation.isPending}\n                              variant=\"destructive\"\n                              data-testid={`button-reject-${affiliate.id}`}\n                            >\n                              <X className=\"w-4 h-4 mr-2\" />\n                              Rechazar\n                            </Button>\n                            <Button\n                              onClick={() => setStandbyAffiliate(affiliate)}\n                              disabled={updateStatusMutation.isPending}\n                              variant=\"outline\"\n                              className=\"border-orange-500/50 text-orange-400 hover:bg-orange-500/10\"\n                              data-testid={`button-standby-${affiliate.id}`}\n                            >\n                              <Pause className=\"w-4 h-4 mr-2\" />\n                              En Espera\n                            </Button>\n                          </>\n                        )}\n                        \n                        {affiliate.status === \"approved\" && (\n                          <>\n                            <Button\n                              onClick={() => setStandbyAffiliate(affiliate)}\n                              disabled={updateStatusMutation.isPending}\n                              variant=\"outline\"\n                              className=\"border-orange-500/50 text-orange-400 hover:bg-orange-500/10\"\n                              data-testid={`button-standby-${affiliate.id}`}\n                            >\n                              <Pause className=\"w-4 h-4 mr-2\" />\n                              En Espera\n                            </Button>\n                            <Button\n                              onClick={() => handleUpdateStatus(affiliate.id, \"rejected\")}\n                              disabled={updateStatusMutation.isPending}\n                              variant=\"outline\"\n                              className=\"border-red-500/50 text-red-400 hover:bg-red-500/10\"\n                              data-testid={`button-reject-${affiliate.id}`}\n                            >\n                              <X className=\"w-4 h-4 mr-2\" />\n                              Rechazar\n                            </Button>\n                          </>\n                        )}\n                        \n                        {affiliate.status === \"standby\" && (\n                          <>\n                            <Button\n                              onClick={() => handleUpdateStatus(affiliate.id, \"approved\")}\n                              disabled={updateStatusMutation.isPending}\n                              className=\"bg-green-600 hover:bg-green-700\"\n                              data-testid={`button-approve-${affiliate.id}`}\n                            >\n                              <Check className=\"w-4 h-4 mr-2\" />\n                              Aprobar\n                            </Button>\n                            <Button\n                              onClick={() => handleUpdateStatus(affiliate.id, \"rejected\")}\n                              disabled={updateStatusMutation.isPending}\n                              variant=\"outline\"\n                              className=\"border-red-500/50 text-red-400 hover:bg-red-500/10\"\n                              data-testid={`button-reject-${affiliate.id}`}\n                            >\n                              <X className=\"w-4 h-4 mr-2\" />\n                              Rechazar\n                            </Button>\n                          </>\n                        )}\n                        \n                        {(affiliate.status === \"rejected\" || affiliate.status === \"standby\") && (\n                          <Button\n                            onClick={() => setDeletingAffiliate(affiliate)}\n                            disabled={deleteAffiliateMutation.isPending}\n                            variant=\"outline\"\n                            className=\"border-red-500/50 text-red-400 hover:bg-red-500/10\"\n                            data-testid={`button-delete-${affiliate.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4 mr-2\" />\n                            Eliminar\n                          </Button>\n                        )}\n                      </div>\n\n                      {affiliate.approvedAt && (\n                        <div className=\"text-sm text-green-400\">\n                          ✓ Aprobado el {format(new Date(affiliate.approvedAt), \"dd/MM/yyyy\")}\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                );\n              })\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={!!deletingAffiliate} onOpenChange={() => setDeletingAffiliate(null)}>\n        <AlertDialogContent className=\"bg-gray-900 border-red-500/20 text-white\">\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"text-red-400\">¿Eliminar Afiliado?</AlertDialogTitle>\n            <AlertDialogDescription className=\"text-gray-300\">\n              ¿Estás seguro de que deseas eliminar al afiliado \"{deletingAffiliate?.name}\"?\n              <br />\n              Esta acción no se puede deshacer y se perderán todos los datos asociados.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel \n              onClick={() => setDeletingAffiliate(null)}\n              className=\"border-gray-700 text-gray-300 hover:bg-gray-800\"\n              data-testid=\"button-cancel-delete-affiliate\"\n            >\n              Cancelar\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleConfirmDelete}\n              disabled={deleteAffiliateMutation.isPending}\n              className=\"bg-red-600 hover:bg-red-700 text-white\"\n              data-testid=\"button-confirm-delete-affiliate\"\n            >\n              {deleteAffiliateMutation.isPending ? \"Eliminando...\" : \"Eliminar\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Standby Confirmation Dialog */}\n      <AlertDialog open={!!standbyAffiliate} onOpenChange={() => setStandbyAffiliate(null)}>\n        <AlertDialogContent className=\"bg-gray-900 border-orange-500/20 text-white\">\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"text-orange-400\">¿Poner en Espera?</AlertDialogTitle>\n            <AlertDialogDescription className=\"text-gray-300\">\n              ¿Estás seguro de que deseas poner al afiliado \"{standbyAffiliate?.name}\" en estado de espera?\n              <br />\n              Podrás reactivarlo más tarde si es necesario.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel \n              onClick={() => setStandbyAffiliate(null)}\n              className=\"border-gray-700 text-gray-300 hover:bg-gray-800\"\n              data-testid=\"button-cancel-standby-affiliate\"\n            >\n              Cancelar\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleConfirmStandby}\n              disabled={updateStatusMutation.isPending}\n              className=\"bg-orange-600 hover:bg-orange-700 text-white\"\n              data-testid=\"button-confirm-standby-affiliate\"\n            >\n              {updateStatusMutation.isPending ? \"Procesando...\" : \"Poner en Espera\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}","size_bytes":19332},"client/src/pages/AdminDashboard.tsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Users, \n  Package, \n  ShoppingCart, \n  MessageSquare, \n  UserCheck,\n  DollarSign,\n  Layout,\n  User,\n  Settings,\n  TestTube\n} from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport AdminProfileDropdown from \"@/components/AdminProfileDropdown\";\nimport { toast } from \"@/hooks/use-toast\";\n\nexport default function AdminDashboard() {\n  const { user, logout, token } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Redirect if not logged in\n  if (!user) {\n    setLocation(\"/admin/login\");\n    return null;\n  }\n\n  const { data: stats, isLoading } = useQuery({\n    queryKey: [\"/api/admin/dashboard\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/dashboard\", {\n        headers: {\n          Authorization: token || \"\",\n        },\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch dashboard stats\");\n      }\n      const result = await response.json();\n      return result.data;\n    },\n  });\n\n  const handleLogout = () => {\n    logout();\n    setLocation(\"/admin/login\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black\">\n      {/* Header */}\n      <header className=\"bg-gray-900 border-b border-purple-500/20 p-4\">\n        <div className=\"max-w-7xl mx-auto flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-white\">VAPEOLO Admin</h1>\n            <p className=\"text-gray-400\">Panel de Administración</p>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <AdminProfileDropdown />\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto p-6\">\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"bg-gray-900 border-purple-500/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-white\">\n                Total Afiliados\n              </CardTitle>\n              <Users className=\"h-4 w-4 text-purple-400\" />\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <Skeleton className=\"h-8 w-16 bg-gray-800\" />\n              ) : (\n                <div className=\"text-2xl font-bold text-white\" data-testid=\"stat-total-affiliates\">\n                  {stats?.totalAffiliates || 0}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900 border-purple-500/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-white\">\n                Afiliados Pendientes\n              </CardTitle>\n              <UserCheck className=\"h-4 w-4 text-yellow-400\" />\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <Skeleton className=\"h-8 w-16 bg-gray-800\" />\n              ) : (\n                <div className=\"text-2xl font-bold text-white\" data-testid=\"stat-pending-affiliates\">\n                  {stats?.pendingAffiliates || 0}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900 border-purple-500/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-white\">\n                Total Ventas\n              </CardTitle>\n              <ShoppingCart className=\"h-4 w-4 text-green-400\" />\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <Skeleton className=\"h-8 w-16 bg-gray-800\" />\n              ) : (\n                <div className=\"text-2xl font-bold text-white\" data-testid=\"stat-total-sales\">\n                  {stats?.totalSales || 0}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900 border-purple-500/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-white\">\n                Ingresos Totales\n              </CardTitle>\n              <DollarSign className=\"h-4 w-4 text-blue-400\" />\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <Skeleton className=\"h-8 w-20 bg-gray-800\" />\n              ) : (\n                <div className=\"text-2xl font-bold text-white\" data-testid=\"stat-total-revenue\">\n                  Q{parseFloat(stats?.totalRevenue || \"0\").toFixed(2)}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* VAPEOLO Toast System Test Section */}\n        <Card className=\"bg-gray-900 border-purple-500/20 mb-8\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center\">\n              <TestTube className=\"w-5 h-5 mr-2 text-purple-400\" />\n              VAPEOLO Toast System Test\n            </CardTitle>\n            <CardDescription className=\"text-gray-400\">\n              Test all toast notification types with VAPEOLO branding\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-5 gap-4\">\n              <Button\n                className=\"bg-purple-600 hover:bg-purple-700\"\n                onClick={() => toast.success(\"¡Operación Exitosa!\", \"La acción se completó correctamente con el estilo VAPEOLO.\")}\n                data-testid=\"button-toast-success\"\n              >\n                Success Toast\n              </Button>\n              <Button\n                variant=\"destructive\"\n                onClick={() => toast.error(\"Error Detectado\", \"Algo salió mal. Por favor intenta nuevamente.\")}\n                data-testid=\"button-toast-error\"\n              >\n                Error Toast\n              </Button>\n              <Button\n                className=\"bg-yellow-600 hover:bg-yellow-700\"\n                onClick={() => toast.warning(\"Advertencia Importante\", \"Revisa esta información antes de continuar.\")}\n                data-testid=\"button-toast-warning\"\n              >\n                Warning Toast\n              </Button>\n              <Button\n                className=\"bg-blue-600 hover:bg-blue-700\"\n                onClick={() => toast.info(\"Información Útil\", \"Datos importantes sobre tu cuenta VAPEOLO.\")}\n                data-testid=\"button-toast-info\"\n              >\n                Info Toast\n              </Button>\n              <Button\n                variant=\"outline\"\n                className=\"border-purple-400 text-purple-400 hover:bg-purple-600 hover:text-white\"\n                onClick={() => toast({ title: \"VAPEOLO Notification\", description: \"Toast por defecto con el branding completo.\", variant: \"default\" })}\n                data-testid=\"button-toast-default\"\n              >\n                Default Toast\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-7 gap-6\">\n          <Card className=\"bg-gray-900 border-purple-500/20 hover-elevate\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center\">\n                <Users className=\"w-5 h-5 mr-2 text-purple-400\" />\n                Gestionar Afiliados\n              </CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Aprobar solicitudes y gestionar afiliados\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button \n                className=\"w-full bg-purple-600 hover:bg-purple-700\"\n                onClick={() => setLocation(\"/admin/affiliates\")}\n                data-testid=\"button-manage-affiliates\"\n              >\n                Ver Afiliados\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900 border-purple-500/20 hover-elevate\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center\">\n                <Package className=\"w-5 h-5 mr-2 text-green-400\" />\n                Gestionar Productos\n              </CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Agregar y editar productos del catálogo\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button \n                className=\"w-full bg-green-600 hover:bg-green-700\"\n                onClick={() => setLocation(\"/admin/products\")}\n                data-testid=\"button-manage-products\"\n              >\n                Ver Productos\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900 border-purple-500/20 hover-elevate\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center\">\n                <ShoppingCart className=\"w-5 h-5 mr-2 text-blue-400\" />\n                Gestionar Ventas\n              </CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Revisar y gestionar ventas realizadas\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button \n                className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                onClick={() => setLocation(\"/admin/sales\")}\n                data-testid=\"button-manage-sales\"\n              >\n                Ver Ventas\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900 border-purple-500/20 hover-elevate\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center\">\n                <MessageSquare className=\"w-5 h-5 mr-2 text-yellow-400\" />\n                Mensajes\n              </CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                {stats?.unreadMessages ? `${stats.unreadMessages} mensajes sin leer` : \"Sin mensajes nuevos\"}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button \n                className=\"w-full bg-yellow-600 hover:bg-yellow-700\"\n                onClick={() => setLocation(\"/admin/messages\")}\n                data-testid=\"button-manage-messages\"\n              >\n                Ver Mensajes\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900 border-purple-500/20 hover-elevate\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center\">\n                <Layout className=\"w-5 h-5 mr-2 text-pink-400\" />\n                Contenido Homepage\n              </CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Editar títulos, subtítulos y contenido del sitio web\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button \n                className=\"w-full bg-pink-600 hover:bg-pink-700\"\n                onClick={() => setLocation(\"/admin/homepage\")}\n                data-testid=\"button-manage-homepage\"\n              >\n                Editar Contenido\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11791},"client/src/pages/AdminLogin.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Loader2, Shield } from \"lucide-react\";\n\nexport default function AdminLogin() {\n  const [, setLocation] = useLocation();\n  const { login, user } = useAuth();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Redirect if already logged in\n  if (user) {\n    setLocation(\"/admin\");\n    return null;\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const success = await login(username, password);\n      if (success) {\n        setLocation(\"/admin\");\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md bg-gray-900 border-purple-500/20\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto mb-4 w-12 h-12 bg-purple-500/10 rounded-full flex items-center justify-center\">\n            <Shield className=\"w-6 h-6 text-purple-400\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-white\">VAPEOLO Admin</CardTitle>\n          <CardDescription className=\"text-gray-400\">\n            Panel de Administración\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\" className=\"text-white\">\n                Usuario\n              </Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                required\n                className=\"bg-gray-800 border-gray-700 text-white\"\n                data-testid=\"input-username\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"text-white\">\n                Contraseña\n              </Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                className=\"bg-gray-800 border-gray-700 text-white\"\n                data-testid=\"input-password\"\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-purple-600 hover:bg-purple-700\"\n              disabled={isLoading}\n              data-testid=\"button-login\"\n            >\n              {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              Iniciar Sesión\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3190},"client/src/pages/AdminProducts.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { \n  ArrowLeft, \n  Plus,\n  Package,\n  Edit2,\n  Eye,\n  EyeOff,\n  AlertTriangle,\n  TrendingDown,\n  CheckCircle,\n  Info,\n  Settings,\n  Trash2,\n  Save,\n  X,\n  Upload,\n  ImageIcon,\n  Loader2,\n  MoreHorizontal,\n  Square,\n  CheckSquare,\n  Minus,\n  RotateCcw\n} from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  type Product,\n  type ProductFlavor,\n  getAvailableInventory,\n  isOutOfStock,\n  isLowStock,\n  getStockStatus,\n  getFlavorAvailableInventory,\n  getFlavorStockStatus\n} from \"@shared/schema\";\nimport AdminProfileDropdown from \"@/components/AdminProfileDropdown\";\n\n// Product interface is now imported from shared/schema.ts\n\nexport default function AdminProducts() {\n  const { user, token } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n  const [sortBy, setSortBy] = useState<'name' | 'stock' | 'created'>('name');\n  const [formErrors, setFormErrors] = useState<{[key: string]: string}>({});\n  \n  // Image upload state\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [imagePreview, setImagePreview] = useState<string>(\"\");\n  const [isUploading, setIsUploading] = useState(false);\n  \n  // Flavor management state\n  const [flavorDialogOpen, setFlavorDialogOpen] = useState(false);\n  const [currentProductForFlavors, setCurrentProductForFlavors] = useState<Product | null>(null);\n  const [editingFlavor, setEditingFlavor] = useState<ProductFlavor | null>(null);\n  const [deletingFlavor, setDeletingFlavor] = useState<ProductFlavor | null>(null);\n  const [flavorFormData, setFlavorFormData] = useState({\n    name: \"\",\n    inventory: \"0\",\n    reservedInventory: \"0\",\n    lowStockThreshold: \"5\",\n    active: true\n  });\n  const [flavorFormErrors, setFlavorFormErrors] = useState<{[key: string]: string}>({});\n  const [deletingProduct, setDeletingProduct] = useState<Product | null>(null);\n\n  // Bulk inventory update state\n  const [selectedFlavors, setSelectedFlavors] = useState<Set<string>>(new Set());\n  const [bulkInventoryAmount, setBulkInventoryAmount] = useState(\"\");\n  const [isBulkUpdating, setIsBulkUpdating] = useState(false);\n\n  // Query for flavors when managing a specific product\n  const { data: productFlavors, isLoading: flavorsLoading } = useQuery({\n    queryKey: [\"/api/admin/products\", currentProductForFlavors?.id, \"flavors\"],\n    queryFn: async () => {\n      if (!currentProductForFlavors?.id) return [];\n      const response = await fetch(`/api/admin/products/${currentProductForFlavors.id}/flavors`, {\n        headers: {\n          Authorization: token || \"\",\n        },\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch flavors\");\n      }\n      const result = await response.json();\n      return result.data as ProductFlavor[];\n    },\n    enabled: !!currentProductForFlavors?.id,\n  });\n\n  // Query for flavors when editing a product in the form (for automatic inventory calculation)\n  const { data: editingProductFlavors } = useQuery({\n    queryKey: [\"/api/admin/products\", editingProduct?.id, \"flavors\"],\n    queryFn: async () => {\n      if (!editingProduct?.id) return [];\n      const response = await fetch(`/api/admin/products/${editingProduct.id}/flavors`, {\n        headers: {\n          Authorization: token || \"\",\n        },\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch flavors\");\n      }\n      const result = await response.json();\n      return result.data as ProductFlavor[];\n    },\n    enabled: !!editingProduct?.id,\n  });\n\n  // Flavor mutations\n  const createFlavorMutation = useMutation({\n    mutationFn: async ({ productId, flavorData }: { productId: string; flavorData: any }) => {\n      return apiRequest(\"POST\", `/api/admin/products/${productId}/flavors`, flavorData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/products\", currentProductForFlavors?.id, \"flavors\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/products\"] });\n      resetFlavorForm();\n      toast({\n        title: \"Sabor creado\",\n        description: \"El sabor se ha creado correctamente\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"No se pudo crear el sabor\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateFlavorMutation = useMutation({\n    mutationFn: async ({ flavorId, flavorData }: { flavorId: string; flavorData: any }) => {\n      return apiRequest(\"PATCH\", `/api/admin/flavors/${flavorId}`, flavorData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/products\", currentProductForFlavors?.id, \"flavors\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/products\"] });\n      resetFlavorForm();\n      setEditingFlavor(null);\n      toast({\n        title: \"Sabor actualizado\",\n        description: \"El sabor se ha actualizado correctamente\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"No se pudo actualizar el sabor\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteFlavorMutation = useMutation({\n    mutationFn: async (flavorId: string) => {\n      return apiRequest(\"DELETE\", `/api/admin/flavors/${flavorId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/products\", currentProductForFlavors?.id, \"flavors\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/products\"] });\n      setDeletingFlavor(null);\n      toast({\n        title: \"Sabor eliminado\",\n        description: \"El sabor se ha eliminado correctamente\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"No se pudo eliminar el sabor\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Bulk inventory update mutation\n  const bulkUpdateInventoryMutation = useMutation({\n    mutationFn: async ({ flavorIds, inventoryToAdd }: { flavorIds: string[]; inventoryToAdd: number }) => {\n      setIsBulkUpdating(true);\n      \n      // Get current flavors data to calculate new inventory\n      const currentFlavors = productFlavors || [];\n      const updates = flavorIds.map(flavorId => {\n        const flavor = currentFlavors.find(f => f.id === flavorId);\n        if (!flavor) throw new Error(`Sabor no encontrado: ${flavorId}`);\n        \n        const newInventory = flavor.inventory + inventoryToAdd;\n        return {\n          flavorId,\n          data: { inventory: newInventory }\n        };\n      });\n\n      // Execute all updates in parallel\n      const results = await Promise.all(\n        updates.map(({ flavorId, data }) => \n          apiRequest(\"PATCH\", `/api/admin/flavors/${flavorId}`, data)\n        )\n      );\n      \n      return { results, updatedCount: updates.length };\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/products\", currentProductForFlavors?.id, \"flavors\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/products\"] });\n      \n      // Reset bulk operation state\n      setSelectedFlavors(new Set());\n      setBulkInventoryAmount(\"\");\n      \n      toast({\n        title: \"Inventario actualizado\",\n        description: `Se actualizó el inventario de ${data.updatedCount} sabores correctamente`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"No se pudo actualizar el inventario masivamente\",\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      setIsBulkUpdating(false);\n    },\n  });\n\n  // Function to calculate total inventory from active flavors\n  const calculateTotalInventory = (product?: Product | null, flavors?: ProductFlavor[]) => {\n    if (!product) return 0;\n    \n    // If product has flavors, calculate sum of active flavors' inventory\n    if (flavors && flavors.length > 0) {\n      return flavors\n        .filter(f => f.active)\n        .reduce((sum, flavor) => sum + flavor.inventory, 0);\n    }\n    \n    // Fallback to product inventory for backward compatibility (products without flavors)\n    return product.inventory || 0;\n  };\n\n  // Calculate current total inventory for the editing product\n  const currentTotalInventory = calculateTotalInventory(editingProduct, editingProductFlavors);\n\n  // Form state\n  const [formData, setFormData] = useState({\n    name: \"\",\n    puffs: \"\",\n    price: \"\",\n    image: \"\",\n    sabores: \"\",\n    description: \"\",\n    popular: false,\n    active: true,\n    showOnHomepage: true,\n    inventory: \"0\",\n    reservedInventory: \"0\",\n    lowStockThreshold: \"10\",\n  });\n\n  // Redirect if not logged in\n  if (!user) {\n    setLocation(\"/admin/login\");\n    return null;\n  }\n\n  const { data: products, isLoading } = useQuery({\n    queryKey: [\"/api/admin/products\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/products\", {\n        headers: {\n          Authorization: token || \"\",\n        },\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch products\");\n      }\n      const result = await response.json();\n      return result.data as (Product & { flavors?: ProductFlavor[] })[];\n    },\n  });\n\n  const createProductMutation = useMutation({\n    mutationFn: async (productData: any) => {\n      const response = await fetch(\"/api/admin/products\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token || \"\",\n        },\n        body: JSON.stringify(productData),\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to create product\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/products\"] });\n      setIsDialogOpen(false);\n      resetForm();\n      toast({\n        title: \"Producto creado\",\n        description: \"El producto se ha creado correctamente\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo crear el producto\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateProductMutation = useMutation({\n    mutationFn: async ({ id, productData }: { id: string; productData: any }) => {\n      const response = await fetch(`/api/admin/products/${id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token || \"\",\n        },\n        body: JSON.stringify(productData),\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to update product\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/products\"] });\n      setIsDialogOpen(false);\n      resetForm();\n      setEditingProduct(null);\n      toast({\n        title: \"Producto actualizado\",\n        description: \"El producto se ha actualizado correctamente\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo actualizar el producto\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteProductMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      return apiRequest(\"DELETE\", `/api/admin/products/${productId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/products\"] });\n      setDeletingProduct(null);\n      toast({\n        title: \"Producto eliminado\",\n        description: \"El producto se ha eliminado correctamente\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"No se pudo eliminar el producto\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      puffs: \"\",\n      price: \"\",\n      image: \"\",\n      sabores: \"\",\n      description: \"\",\n      popular: false,\n      active: true,\n      showOnHomepage: true,\n      inventory: \"0\",\n      reservedInventory: \"0\",\n      lowStockThreshold: \"10\",\n    });\n    setFormErrors({});\n    setSelectedFile(null);\n    setImagePreview(\"\");\n  };\n\n  // File upload handling functions\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setSelectedFile(file);\n      // Create preview\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setImagePreview(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const uploadImage = async (): Promise<string | null> => {\n    if (!selectedFile) return null;\n    \n    setIsUploading(true);\n    try {\n      const formData = new FormData();\n      formData.append('image', selectedFile);\n      \n      const response = await fetch('/api/admin/products/upload-image', {\n        method: 'POST',\n        headers: {\n          Authorization: token || \"\",\n        },\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to upload image');\n      }\n      \n      const result = await response.json();\n      return result.data.imagePath;\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo subir la imagen\",\n        variant: \"destructive\",\n      });\n      return null;\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handleOpenDialog = (product?: Product) => {\n    if (product) {\n      setEditingProduct(product);\n      setFormData({\n        name: product.name,\n        puffs: product.puffs.toString(),\n        price: product.price,\n        image: product.image || \"\",\n        sabores: product.sabores.join(\", \"),\n        description: product.description || \"\",\n        popular: product.popular,\n        active: product.active,\n        showOnHomepage: product.showOnHomepage ?? true,\n        inventory: product.inventory?.toString() || \"0\",\n        reservedInventory: product.reservedInventory?.toString() || \"0\",\n        lowStockThreshold: product.lowStockThreshold?.toString() || \"10\",\n      });\n      // Set image preview for existing product\n      if (product.image) {\n        setImagePreview(`/uploads/${product.image}`);\n      } else {\n        setImagePreview(\"\");\n      }\n      setSelectedFile(null);\n    } else {\n      setEditingProduct(null);\n      resetForm();\n    }\n    setFormErrors({});\n    setIsDialogOpen(true);\n  };\n\n  const validateForm = () => {\n    const errors: {[key: string]: string} = {};\n    \n    // Determine if this product has flavors to use the correct inventory value\n    const hasFlavors = editingProduct && (editingProductFlavors?.length || 0) > 0;\n    const effectiveInventory = hasFlavors ? currentTotalInventory : (parseInt(formData.inventory) || 0);\n    \n    const reservedInventory = parseInt(formData.reservedInventory) || 0;\n    const lowStockThreshold = parseInt(formData.lowStockThreshold) || 0;\n    \n    // Only validate manual inventory input if product doesn't have flavors\n    if (!hasFlavors && effectiveInventory < 0) {\n      errors.inventory = \"El inventario no puede ser negativo\";\n    }\n    \n    if (reservedInventory < 0) {\n      errors.reservedInventory = \"El inventario reservado no puede ser negativo\";\n    }\n    \n    // Use effective inventory (calculated from flavors or manual input)\n    if (reservedInventory > effectiveInventory) {\n      errors.reservedInventory = \"El inventario reservado no puede ser mayor al inventario total\";\n    }\n    \n    if (lowStockThreshold < 0) {\n      errors.lowStockThreshold = \"El umbral de stock bajo no puede ser negativo\";\n    }\n    \n    setFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n    \n    // Upload image if a new file is selected\n    let imagePath = formData.image;\n    if (selectedFile) {\n      const uploadedPath = await uploadImage();\n      if (uploadedPath) {\n        imagePath = uploadedPath;\n      } else {\n        // Upload failed, don't continue\n        return;\n      }\n    }\n    \n    // Validate and process sabores array\n    const saboresArray = formData.sabores\n      .split(\",\")\n      .map(s => s.trim())\n      .filter(s => s.length > 0);\n    \n    // Only use calculated inventory when product has flavors, otherwise use manual input\n    const hasActiveFlavors = editingProduct && (editingProductFlavors?.length || 0) > 0;\n    \n    const productData = {\n      name: formData.name,\n      puffs: parseInt(formData.puffs),\n      price: parseFloat(formData.price).toFixed(2), // Ensure proper decimal format\n      image: imagePath || undefined,\n      sabores: saboresArray,\n      description: formData.description || undefined,\n      popular: formData.popular,\n      active: formData.active,\n      inventory: hasActiveFlavors ? currentTotalInventory : (parseInt(formData.inventory) || 0),\n      reservedInventory: parseInt(formData.reservedInventory) || 0,\n      lowStockThreshold: parseInt(formData.lowStockThreshold) || 10,\n    };\n\n    if (editingProduct) {\n      updateProductMutation.mutate({ id: editingProduct.id, productData });\n    } else {\n      createProductMutation.mutate(productData);\n    }\n  };\n\n  const handleToggleActive = (product: Product) => {\n    updateProductMutation.mutate({\n      id: product.id,\n      productData: { active: !product.active }\n    });\n  };\n\n  // Flavor management functions\n  const handleOpenFlavorDialog = (product: Product) => {\n    setCurrentProductForFlavors(product);\n    setFlavorDialogOpen(true);\n    resetFlavorForm();\n    resetBulkOperations(); // Reset bulk operations when opening dialog\n  };\n\n  const resetFlavorForm = () => {\n    setFlavorFormData({\n      name: \"\",\n      inventory: \"0\",\n      reservedInventory: \"0\",\n      lowStockThreshold: \"5\",\n      active: true\n    });\n    setFlavorFormErrors({});\n    setEditingFlavor(null);\n  };\n\n  const handleEditFlavor = (flavor: ProductFlavor) => {\n    setEditingFlavor(flavor);\n    setFlavorFormData({\n      name: flavor.name,\n      inventory: flavor.inventory.toString(),\n      reservedInventory: flavor.reservedInventory.toString(),\n      lowStockThreshold: flavor.lowStockThreshold.toString(),\n      active: flavor.active\n    });\n    setFlavorFormErrors({});\n  };\n\n  const validateFlavorForm = () => {\n    const errors: {[key: string]: string} = {};\n    \n    if (!flavorFormData.name.trim()) {\n      errors.name = \"El nombre del sabor es requerido\";\n    }\n    \n    const inventory = parseInt(flavorFormData.inventory) || 0;\n    const reservedInventory = parseInt(flavorFormData.reservedInventory) || 0;\n    const lowStockThreshold = parseInt(flavorFormData.lowStockThreshold) || 0;\n    \n    if (inventory < 0) {\n      errors.inventory = \"El inventario no puede ser negativo\";\n    }\n    \n    if (reservedInventory < 0) {\n      errors.reservedInventory = \"El inventario reservado no puede ser negativo\";\n    }\n    \n    if (reservedInventory > inventory) {\n      errors.reservedInventory = \"El inventario reservado no puede ser mayor al inventario total\";\n    }\n    \n    if (lowStockThreshold < 0) {\n      errors.lowStockThreshold = \"El umbral de stock bajo no puede ser negativo\";\n    }\n    \n    setFlavorFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleFlavorSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateFlavorForm() || !currentProductForFlavors) {\n      return;\n    }\n    \n    const flavorData = {\n      name: flavorFormData.name.trim(),\n      inventory: parseInt(flavorFormData.inventory) || 0,\n      reservedInventory: parseInt(flavorFormData.reservedInventory) || 0,\n      lowStockThreshold: parseInt(flavorFormData.lowStockThreshold) || 5,\n      active: flavorFormData.active\n    };\n\n    if (editingFlavor) {\n      updateFlavorMutation.mutate({ flavorId: editingFlavor.id, flavorData });\n    } else {\n      createFlavorMutation.mutate({ productId: currentProductForFlavors.id, flavorData });\n    }\n  };\n\n  const handleDeleteFlavor = () => {\n    if (deletingFlavor) {\n      deleteFlavorMutation.mutate(deletingFlavor.id);\n    }\n  };\n\n  const handleDeleteProduct = () => {\n    if (deletingProduct) {\n      deleteProductMutation.mutate(deletingProduct.id);\n    }\n  };\n\n  // Bulk operation helper functions\n  const toggleFlavorSelection = (flavorId: string) => {\n    setSelectedFlavors(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(flavorId)) {\n        newSet.delete(flavorId);\n      } else {\n        newSet.add(flavorId);\n      }\n      return newSet;\n    });\n  };\n\n  const selectAllFlavors = () => {\n    const activeFlavors = (productFlavors || []).filter(f => f.active);\n    setSelectedFlavors(new Set(activeFlavors.map(f => f.id)));\n  };\n\n  const clearFlavorSelection = () => {\n    setSelectedFlavors(new Set());\n  };\n\n  const resetBulkOperations = () => {\n    setSelectedFlavors(new Set());\n    setBulkInventoryAmount(\"\");\n  };\n\n  const validateBulkInventoryAmount = (): boolean => {\n    const amount = parseInt(bulkInventoryAmount);\n    return !isNaN(amount) && amount > 0;\n  };\n\n  const handleBulkInventoryUpdate = () => {\n    if (!validateBulkInventoryAmount()) {\n      toast({\n        title: \"Error\",\n        description: \"Ingrese una cantidad válida mayor a 0\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (selectedFlavors.size === 0) {\n      toast({\n        title: \"Error\", \n        description: \"Seleccione al menos un sabor para actualizar\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const inventoryToAdd = parseInt(bulkInventoryAmount);\n    const flavorIds = Array.from(selectedFlavors);\n\n    bulkUpdateInventoryMutation.mutate({ flavorIds, inventoryToAdd });\n  };\n\n  // Helper function to get stock status badge for backward compatibility\n  const getStockStatusBadge = (product: Product) => {\n    const status = getStockStatus(product);\n    \n    switch (status) {\n      case 'out_of_stock':\n        return (\n          <Badge variant=\"outline\" className=\"border-red-500/50 text-red-400\">\n            <AlertTriangle className=\"w-3 h-3 mr-1\" />\n            Sin Stock\n          </Badge>\n        );\n      case 'low_stock':\n        return (\n          <Badge variant=\"outline\" className=\"border-yellow-500/50 text-yellow-400\">\n            <TrendingDown className=\"w-3 h-3 mr-1\" />\n            Stock Bajo\n          </Badge>\n        );\n      default:\n        return (\n          <Badge variant=\"outline\" className=\"border-green-500/50 text-green-400\">\n            <CheckCircle className=\"w-3 h-3 mr-1\" />\n            En Stock\n          </Badge>\n        );\n    }\n  };\n\n  // Helper function to get flavor stock status badge\n  const getFlavorStockStatusBadge = (flavor: ProductFlavor) => {\n    const status = getFlavorStockStatus(flavor);\n    const available = getFlavorAvailableInventory(flavor);\n    \n    switch (status) {\n      case 'out_of_stock':\n        return (\n          <Badge variant=\"outline\" className=\"border-red-500/50 text-red-400\">\n            <AlertTriangle className=\"w-3 h-3 mr-1\" />\n            Sin Stock\n          </Badge>\n        );\n      case 'low_stock':\n        return (\n          <Badge variant=\"outline\" className=\"border-yellow-500/50 text-yellow-400\">\n            <TrendingDown className=\"w-3 h-3 mr-1\" />\n            Stock Bajo\n          </Badge>\n        );\n      default:\n        return (\n          <Badge variant=\"outline\" className=\"border-green-500/50 text-green-400\">\n            <CheckCircle className=\"w-3 h-3 mr-1\" />\n            En Stock\n          </Badge>\n        );\n    }\n  };\n\n  // Helper function to get product stock status badge (based on flavors if available)\n  const getProductStockStatusBadge = (product: Product & { flavors?: ProductFlavor[] }) => {\n    if (product.flavors && product.flavors.length > 0) {\n      // Calculate total available inventory from all active flavors\n      const totalAvailable = product.flavors\n        .filter(f => f.active)\n        .reduce((sum, flavor) => sum + getFlavorAvailableInventory(flavor), 0);\n      \n      if (totalAvailable === 0) {\n        return (\n          <Badge variant=\"outline\" className=\"border-red-500/50 text-red-400\">\n            <AlertTriangle className=\"w-3 h-3 mr-1\" />\n            Sin Stock\n          </Badge>\n        );\n      }\n      \n      // Check if any active flavor is low stock\n      const hasLowStock = product.flavors\n        .filter(f => f.active)\n        .some(f => getFlavorStockStatus(f) === 'low_stock');\n      \n      if (hasLowStock) {\n        return (\n          <Badge variant=\"outline\" className=\"border-yellow-500/50 text-yellow-400\">\n            <TrendingDown className=\"w-3 h-3 mr-1\" />\n            Stock Bajo\n          </Badge>\n        );\n      }\n      \n      return (\n        <Badge variant=\"outline\" className=\"border-green-500/50 text-green-400\">\n          <CheckCircle className=\"w-3 h-3 mr-1\" />\n          En Stock\n        </Badge>\n      );\n    }\n    \n    // Fallback to product-level inventory for backward compatibility\n    const status = getStockStatus(product);\n    switch (status) {\n      case 'out_of_stock':\n        return (\n          <Badge variant=\"outline\" className=\"border-red-500/50 text-red-400\">\n            <AlertTriangle className=\"w-3 h-3 mr-1\" />\n            Sin Stock\n          </Badge>\n        );\n      case 'low_stock':\n        return (\n          <Badge variant=\"outline\" className=\"border-yellow-500/50 text-yellow-400\">\n            <TrendingDown className=\"w-3 h-3 mr-1\" />\n            Stock Bajo\n          </Badge>\n        );\n      default:\n        return (\n          <Badge variant=\"outline\" className=\"border-green-500/50 text-green-400\">\n            <CheckCircle className=\"w-3 h-3 mr-1\" />\n            En Stock\n          </Badge>\n        );\n    }\n  };\n\n  // Helper function to get total available inventory for product\n  const getProductTotalAvailable = (product: Product & { flavors?: ProductFlavor[] }) => {\n    if (product.flavors && product.flavors.length > 0) {\n      return product.flavors\n        .filter(f => f.active)\n        .reduce((sum, flavor) => sum + getFlavorAvailableInventory(flavor), 0);\n    }\n    return getAvailableInventory(product);\n  };\n\n  // Helper function to sort products\n  const sortedProducts = [...(products || [])].sort((a, b) => {\n    switch (sortBy) {\n      case 'stock':\n        return getProductTotalAvailable(a) - getProductTotalAvailable(b);\n      case 'created':\n        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n      default:\n        return a.name.localeCompare(b.name);\n    }\n  });\n\n  // Flavor Display Section Component\n  const FlavorDisplaySection = ({ product }: { product: Product }) => {\n    const { data: flavors, isLoading: flavorsLoading } = useQuery({\n      queryKey: [\"/api/admin/products\", product.id, \"flavors\"],\n      queryFn: async () => {\n        const response = await fetch(`/api/admin/products/${product.id}/flavors`, {\n          headers: {\n            Authorization: token || \"\",\n          },\n        });\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch flavors\");\n        }\n        const result = await response.json();\n        return result.data as ProductFlavor[];\n      },\n      enabled: !!product.id,\n    });\n\n    if (flavorsLoading) {\n      return (\n        <div className=\"mb-3\">\n          <p className=\"text-sm text-gray-400 mb-2\">Sabores:</p>\n          <Skeleton className=\"h-6 w-32 bg-gray-800\" />\n        </div>\n      );\n    }\n\n    // Ensure flavors is an array and has proper typing\n    const flavorsList = Array.isArray(flavors) ? flavors as ProductFlavor[] : [];\n\n    if (!flavorsList || flavorsList.length === 0) {\n      return (\n        <div className=\"mb-3\">\n          <p className=\"text-sm text-gray-400 mb-2\">Sabores:</p>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"outline\" className=\"text-xs border-gray-500 text-gray-400\">\n              Sin sabores registrados\n            </Badge>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => handleOpenFlavorDialog(product)}\n              className=\"text-xs text-blue-400 p-1 h-auto\"\n            >\n              Agregar sabores\n            </Button>\n          </div>\n        </div>\n      );\n    }\n\n    const activeFlavors = flavorsList.filter((f: ProductFlavor) => f.active && getFlavorAvailableInventory(f) > 0);\n    const visibleFlavors = activeFlavors.slice(0, 3);\n    const totalFlavors = activeFlavors.length;\n\n    return (\n      <div className=\"mb-3\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <p className=\"text-sm text-gray-400\">Sabores ({totalFlavors}):</p>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => handleOpenFlavorDialog(product)}\n            className=\"text-xs text-blue-400 p-1 h-auto\"\n          >\n            Gestionar\n          </Button>\n        </div>\n        <div className=\"flex flex-wrap gap-1\">\n          {visibleFlavors.map((flavor: ProductFlavor) => (\n            <div key={flavor.id} className=\"flex items-center gap-1\">\n              <Badge \n                variant=\"outline\" \n                className=\"text-xs border-gray-500 text-gray-300 bg-gray-800/50\"\n                data-testid={`badge-flavor-${flavor.name.replace(/\\s+/g, '-').toLowerCase()}`}\n              >\n                {flavor.name}\n              </Badge>\n              {getFlavorStockStatusBadge(flavor)}\n              <span className=\"text-xs text-gray-400 ml-1\">\n                ({getFlavorAvailableInventory(flavor)})\n              </span>\n            </div>\n          ))}\n          {totalFlavors > 3 && (\n            <Badge variant=\"outline\" className=\"text-xs border-gray-500 text-gray-400\">\n              +{totalFlavors - 3} más\n            </Badge>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black\">\n      {/* Header */}\n      <header className=\"bg-gray-900 border-b border-purple-500/20 p-4\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setLocation(\"/admin\")}\n              className=\"border-purple-500/50 text-purple-400 hover:bg-purple-500/10\"\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Volver al Dashboard\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-white\">Gestión de Productos</h1>\n              <p className=\"text-gray-400\">Administrar catálogo de productos</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-4\">\n            <Select value={sortBy} onValueChange={(value) => setSortBy(value as 'name' | 'stock' | 'created')}>\n              <SelectTrigger className=\"w-48 bg-gray-800 border-gray-700\">\n                <SelectValue placeholder=\"Ordenar por\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-gray-800 border-gray-700\">\n                <SelectItem value=\"name\">Nombre</SelectItem>\n                <SelectItem value=\"stock\">Stock Disponible</SelectItem>\n                <SelectItem value=\"created\">Fecha de Creación</SelectItem>\n              </SelectContent>\n            </Select>\n            \n            {(user?.role === 'admin' || user?.addProduct) && (\n              <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button\n                    onClick={() => handleOpenDialog()}\n                    className=\"bg-purple-600 hover:bg-purple-700\"\n                    data-testid=\"button-add-product\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Agregar Producto\n                  </Button>\n                </DialogTrigger>\n            <DialogContent className=\"bg-gray-900 border-purple-500/20 text-white max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingProduct ? \"Editar Producto\" : \"Agregar Nuevo Producto\"}\n                </DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"name\">Nombre del Producto</Label>\n                    <Input\n                      id=\"name\"\n                      value={formData.name}\n                      onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                      required\n                      className=\"bg-gray-800 border-gray-700\"\n                      data-testid=\"input-product-name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"puffs\">Número de Puffs</Label>\n                    <Input\n                      id=\"puffs\"\n                      type=\"number\"\n                      value={formData.puffs}\n                      onChange={(e) => setFormData(prev => ({ ...prev, puffs: e.target.value }))}\n                      required\n                      className=\"bg-gray-800 border-gray-700\"\n                      data-testid=\"input-product-puffs\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"price\">Precio (Q)</Label>\n                    <Input\n                      id=\"price\"\n                      value={formData.price}\n                      onChange={(e) => setFormData(prev => ({ ...prev, price: e.target.value }))}\n                      required\n                      placeholder=\"25.00\"\n                      className=\"bg-gray-800 border-gray-700\"\n                      data-testid=\"input-product-price\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"image\">Imagen del Producto (opcional)</Label>\n                    <div className=\"space-y-3\">\n                      {/* File upload input */}\n                      <div className=\"flex items-center gap-3\">\n                        <Input\n                          id=\"image\"\n                          type=\"file\"\n                          accept=\"image/jpeg,image/jpg,image/png,image/webp\"\n                          onChange={handleFileSelect}\n                          className=\"bg-gray-800 border-gray-700 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-purple-600 file:text-white hover:file:bg-purple-700\"\n                          data-testid=\"input-product-image\"\n                        />\n                        {isUploading && (\n                          <div className=\"flex items-center gap-2 text-sm text-gray-400\">\n                            <Loader2 className=\"w-4 h-4 animate-spin\" />\n                            Subiendo...\n                          </div>\n                        )}\n                      </div>\n                      \n                      {/* Image preview */}\n                      {imagePreview && (\n                        <div className=\"relative\">\n                          <Label className=\"text-sm text-gray-400\">Vista previa:</Label>\n                          <div className=\"mt-2 relative w-32 h-32 border-2 border-gray-600 rounded-lg overflow-hidden bg-gray-800\">\n                            <img\n                              src={imagePreview}\n                              alt=\"Vista previa\"\n                              className=\"w-full h-full object-cover\"\n                            />\n                            <Button\n                              type=\"button\"\n                              size=\"icon\"\n                              variant=\"destructive\"\n                              className=\"absolute top-1 right-1 w-6 h-6\"\n                              onClick={() => {\n                                setSelectedFile(null);\n                                setImagePreview(\"\");\n                                // Clear the file input\n                                const fileInput = document.getElementById('image') as HTMLInputElement;\n                                if (fileInput) fileInput.value = '';\n                              }}\n                            >\n                              <X className=\"w-3 h-3\" />\n                            </Button>\n                          </div>\n                        </div>\n                      )}\n                      \n                      {/* Current image indicator for editing */}\n                      {editingProduct && formData.image && !selectedFile && !imagePreview && (\n                        <div className=\"text-sm text-gray-400 flex items-center gap-2\">\n                          <ImageIcon className=\"w-4 h-4\" />\n                          Imagen actual: {formData.image}\n                        </div>\n                      )}\n                      \n                      <div className=\"text-xs text-gray-500\">\n                        Formatos soportados: JPG, PNG, WebP. Tamaño máximo: 5MB\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"sabores\">Sabores (separados por comas)</Label>\n                  <Input\n                    id=\"sabores\"\n                    value={formData.sabores}\n                    onChange={(e) => setFormData(prev => ({ ...prev, sabores: e.target.value }))}\n                    placeholder=\"Fresa, Menta, Uva\"\n                    className=\"bg-gray-800 border-gray-700\"\n                    data-testid=\"input-product-flavors\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"description\">Descripción (opcional)</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={formData.description}\n                    onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                    className=\"bg-gray-800 border-gray-700\"\n                    data-testid=\"input-product-description\"\n                  />\n                </div>\n\n                {/* Inventory Management Section */}\n                <div className=\"space-y-4 pt-4 border-t border-gray-700\">\n                  <div className=\"flex items-center gap-2\">\n                    <Package className=\"w-4 h-4 text-purple-400\" />\n                    <h3 className=\"text-lg font-medium text-white\">Gestión de Inventario</h3>\n                    <Tooltip>\n                      <TooltipTrigger>\n                        <Info className=\"w-4 h-4 text-gray-400\" />\n                      </TooltipTrigger>\n                      <TooltipContent>\n                        <p>Configure el inventario para realizar seguimiento del stock</p>\n                      </TooltipContent>\n                    </Tooltip>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div>\n                      <Label htmlFor=\"inventory\">\n                        Inventario Total\n                        <Tooltip>\n                          <TooltipTrigger className=\"ml-1\">\n                            <Info className=\"w-3 h-3 text-gray-400 inline\" />\n                          </TooltipTrigger>\n                          <TooltipContent>\n                            <p className=\"text-xs\">\n                              {(editingProduct && (editingProductFlavors?.length || 0) > 0)\n                                ? \"Calculado automáticamente como la suma del inventario de todos los sabores activos\"\n                                : \"Cantidad total de unidades disponibles para la venta\"\n                              }\n                            </p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </Label>\n                      <Input\n                        id=\"inventory\"\n                        type=\"number\"\n                        value={editingProduct && (editingProductFlavors?.length || 0) > 0 ? currentTotalInventory.toString() : formData.inventory}\n                        readOnly={!!editingProduct && (editingProductFlavors?.length || 0) > 0}\n                        onChange={(!editingProduct || (editingProductFlavors?.length || 0) === 0) ? (e) => setFormData(prev => ({ ...prev, inventory: e.target.value })) : undefined}\n                        className={`bg-gray-800 border-gray-700 ${(editingProduct && (editingProductFlavors?.length || 0) > 0) ? 'cursor-not-allowed opacity-70' : ''} ${formErrors.inventory ? 'border-red-500' : ''}`}\n                        data-testid=\"input-product-inventory\"\n                        placeholder={(editingProduct && (editingProductFlavors?.length || 0) > 0) ? \"Calculado automáticamente\" : \"0\"}\n                      />\n                      {(editingProduct && (editingProductFlavors?.length || 0) > 0) && (\n                        <p className=\"text-xs text-gray-400 mt-1\">\n                          Suma automática de inventarios de sabores activos\n                        </p>\n                      )}\n                      {(!editingProduct || (editingProductFlavors?.length || 0) === 0) && (\n                        <p className=\"text-xs text-gray-400 mt-1\">\n                          {!editingProduct \n                            ? \"Para productos nuevos. Será calculado automáticamente al agregar sabores.\"\n                            : \"Producto sin sabores - inventario editable manualmente.\"\n                          }\n                        </p>\n                      )}\n                      {formErrors.inventory && (\n                        <p className=\"text-red-400 text-sm mt-1\">{formErrors.inventory}</p>\n                      )}\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"reservedInventory\">Inventario Reservado</Label>\n                      <Input\n                        id=\"reservedInventory\"\n                        type=\"number\"\n                        min=\"0\"\n                        value={formData.reservedInventory}\n                        onChange={(e) => setFormData(prev => ({ ...prev, reservedInventory: e.target.value }))}\n                        className={`bg-gray-800 border-gray-700 ${formErrors.reservedInventory ? 'border-red-500' : ''}`}\n                        data-testid=\"input-product-reserved-inventory\"\n                      />\n                      {formErrors.reservedInventory && (\n                        <p className=\"text-red-400 text-sm mt-1\">{formErrors.reservedInventory}</p>\n                      )}\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"lowStockThreshold\">Umbral Stock Bajo</Label>\n                      <Input\n                        id=\"lowStockThreshold\"\n                        type=\"number\"\n                        min=\"0\"\n                        value={formData.lowStockThreshold}\n                        onChange={(e) => setFormData(prev => ({ ...prev, lowStockThreshold: e.target.value }))}\n                        className={`bg-gray-800 border-gray-700 ${formErrors.lowStockThreshold ? 'border-red-500' : ''}`}\n                        data-testid=\"input-product-low-stock-threshold\"\n                      />\n                      {formErrors.lowStockThreshold && (\n                        <p className=\"text-red-400 text-sm mt-1\">{formErrors.lowStockThreshold}</p>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-sm text-gray-400 bg-gray-800/50 p-3 rounded\">\n                    <p><strong>Disponible:</strong> {Math.max(0, \n                      ((editingProduct && (editingProductFlavors?.length || 0) > 0) ? currentTotalInventory : parseInt(formData.inventory) || 0) - \n                      parseInt(formData.reservedInventory)\n                    )} unidades</p>\n                    <p className=\"text-xs mt-1\">\n                      {editingProduct \n                        ? \"Stock disponible = Suma de inventarios de sabores activos - Inventario reservado\"\n                        : \"Stock disponible = Inventario total - Inventario reservado\"\n                      }\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex gap-6\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"popular\"\n                      checked={formData.popular}\n                      onCheckedChange={(checked) => setFormData(prev => ({ ...prev, popular: checked }))}\n                      data-testid=\"switch-product-popular\"\n                    />\n                    <Label htmlFor=\"popular\">Producto Popular</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"active\"\n                      checked={formData.active}\n                      onCheckedChange={(checked) => setFormData(prev => ({ ...prev, active: checked }))}\n                      data-testid=\"switch-product-active\"\n                    />\n                    <Label htmlFor=\"active\">Producto Activo</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"showOnHomepage\"\n                      checked={formData.showOnHomepage}\n                      onCheckedChange={(checked) => setFormData(prev => ({ ...prev, showOnHomepage: checked }))}\n                      data-testid=\"switch-product-show-on-homepage\"\n                    />\n                    <Label htmlFor=\"showOnHomepage\">Mostrar en Página de Inicio</Label>\n                  </div>\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <Button\n                    type=\"submit\"\n                    disabled={createProductMutation.isPending || updateProductMutation.isPending || isUploading}\n                    className=\"bg-purple-600 hover:bg-purple-700\"\n                    data-testid=\"button-save-product\"\n                  >\n                    {isUploading ? \n                      \"Subiendo imagen...\" :\n                      (createProductMutation.isPending || updateProductMutation.isPending ? \n                        \"Guardando...\" : \n                        `${editingProduct ? \"Actualizar\" : \"Crear\"} Producto`\n                      )\n                    }\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsDialogOpen(false)}\n                    className=\"border-gray-700\"\n                    data-testid=\"button-cancel-product\"\n                  >\n                    Cancelar\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n            )}\n            \n            <AdminProfileDropdown />\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto p-6\">\n        {/* Product List and Stats */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {Array.from({ length: 6 }).map((_, i) => (\n              <Card key={i} className=\"bg-gray-900 border-purple-500/20\">\n                <CardHeader>\n                  <Skeleton className=\"h-6 w-3/4 bg-gray-800\" />\n                  <Skeleton className=\"h-4 w-1/2 bg-gray-800\" />\n                </CardHeader>\n                <CardContent>\n                  <Skeleton className=\"h-40 w-full bg-gray-800 mb-4\" />\n                  <Skeleton className=\"h-4 w-full bg-gray-800 mb-2\" />\n                  <Skeleton className=\"h-4 w-3/4 bg-gray-800\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : products && products.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {sortedProducts.map((product) => (\n              <Card key={product.id} className=\"bg-gray-900 border-purple-500/20 hover-elevate\" data-testid={`product-card-${product.id}`}>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-white truncate\">\n                    {product.name}\n                  </CardTitle>\n                  <div className=\"flex items-center gap-2\">\n                    {/* Product status and stock badges */}\n                    {getStockStatusBadge(product)}\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" className=\"h-8 w-8 p-0 text-gray-400 hover:text-white\">\n                          <MoreHorizontal className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\" className=\"bg-gray-800 border-gray-700\">\n                        <DropdownMenuItem\n                          onClick={() => handleOpenDialog(product)}\n                          className=\"text-white hover:bg-gray-700 cursor-pointer\"\n                        >\n                          <Edit2 className=\"mr-2 h-4 w-4\" />\n                          Editar\n                        </DropdownMenuItem>\n                        <DropdownMenuItem\n                          onClick={() => handleOpenFlavorDialog(product)}\n                          className=\"text-blue-400 hover:bg-blue-500/10 cursor-pointer\"\n                          data-testid={`menu-manage-flavors-${product.id}`}\n                        >\n                          <Settings className=\"mr-2 h-4 w-4\" />\n                          Gestionar Sabores\n                        </DropdownMenuItem>\n                        <DropdownMenuItem\n                          onClick={() => handleToggleActive(product)}\n                          className=\"text-yellow-400 hover:bg-yellow-500/10 cursor-pointer\"\n                          data-testid={`menu-toggle-active-${product.id}`}\n                        >\n                          {product.active ? <EyeOff className=\"mr-2 h-4 w-4\" /> : <Eye className=\"mr-2 h-4 w-4\" />}\n                          {product.active ? \"Desactivar\" : \"Activar\"}\n                        </DropdownMenuItem>\n                        <DropdownMenuItem\n                          onClick={() => setDeletingProduct(product)}\n                          className=\"text-red-400 hover:bg-red-500/10 cursor-pointer\"\n                        >\n                          <Trash2 className=\"mr-2 h-4 w-4\" />\n                          Eliminar\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {/* Product image */}\n                  <div className=\"aspect-square relative mb-4 bg-gray-800 rounded-md overflow-hidden\">\n                    {product.image ? (\n                      <img\n                        src={`/uploads/${product.image}`}\n                        alt={product.name}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    ) : (\n                      <div className=\"w-full h-full flex items-center justify-center text-gray-600\">\n                        <ImageIcon className=\"w-8 h-8\" />\n                      </div>\n                    )}\n                    {!product.active && (\n                      <div className=\"absolute inset-0 bg-black/50 flex items-center justify-center\">\n                        <EyeOff className=\"w-6 h-6 text-gray-300\" />\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Product details */}\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-400\">Puffs:</span>\n                      <span className=\"text-white font-medium\">{product.puffs.toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-400\">Precio:</span>\n                      <span className=\"text-white font-medium\">Q{parseFloat(product.price).toFixed(2)}</span>\n                    </div>\n                    \n                    {/* Enhanced Flavors summary with management options */}\n                    <FlavorDisplaySection product={product} />\n                    \n                    {/* Quick flavor management actions */}\n                    <div className=\"flex justify-between items-center mt-3 pt-3 border-t border-gray-700\">\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleOpenFlavorDialog(product)}\n                          className=\"text-xs border-blue-500/50 text-blue-400 hover:bg-blue-500/10\"\n                          data-testid={`button-manage-flavors-${product.id}`}\n                        >\n                          <Settings className=\"w-3 h-3 mr-1\" />\n                          Sabores\n                        </Button>\n                        <Tooltip>\n                          <TooltipTrigger asChild>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleToggleActive(product)}\n                              className={`text-xs ${\n                                product.active \n                                  ? \"border-green-500/50 text-green-400 hover:bg-green-500/10\" \n                                  : \"border-gray-500/50 text-gray-400 hover:bg-gray-500/10\"\n                              }`}\n                              data-testid={`button-toggle-active-${product.id}`}\n                            >\n                              {product.active ? <Eye className=\"w-3 h-3 mr-1\" /> : <EyeOff className=\"w-3 h-3 mr-1\" />}\n                              {product.active ? \"Activo\" : \"Inactivo\"}\n                            </Button>\n                          </TooltipTrigger>\n                          <TooltipContent>\n                            <p>{product.active ? \"Desactivar producto\" : \"Activar producto\"}</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </div>\n                      <div className=\"text-xs text-gray-400\">\n                        Total disponible: <span className=\"text-white font-medium\">{getProductTotalAvailable(product)}</span>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card className=\"bg-gray-900 border-purple-500/20\">\n            <CardContent className=\"text-center py-12\">\n              <Package className=\"w-12 h-12 text-gray-600 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-white mb-2\">No hay productos</h3>\n              <p className=\"text-gray-400 mb-4\">Comienza agregando tu primer producto al catálogo</p>\n              <Button\n                onClick={() => handleOpenDialog()}\n                className=\"bg-purple-600 hover:bg-purple-700\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Agregar Producto\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Product Creation/Edit Dialog */}\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent className=\"bg-gray-900 border-purple-500/20 text-white max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingProduct ? \"Editar Producto\" : \"Agregar Nuevo Producto\"}\n            </DialogTitle>\n          </DialogHeader>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"name\">Nombre del Producto</Label>\n                <Input\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                  required\n                  className=\"bg-gray-800 border-gray-700\"\n                  data-testid=\"input-product-name\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"puffs\">Número de Puffs</Label>\n                <Input\n                  id=\"puffs\"\n                  type=\"number\"\n                  value={formData.puffs}\n                  onChange={(e) => setFormData(prev => ({ ...prev, puffs: e.target.value }))}\n                  required\n                  className=\"bg-gray-800 border-gray-700\"\n                  data-testid=\"input-product-puffs\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"price\">Precio (Q)</Label>\n                <Input\n                  id=\"price\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={formData.price}\n                  onChange={(e) => setFormData(prev => ({ ...prev, price: e.target.value }))}\n                  required\n                  className=\"bg-gray-800 border-gray-700\"\n                  data-testid=\"input-product-price\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"sabores\">Sabores (separados por coma)</Label>\n                <Input\n                  id=\"sabores\"\n                  value={formData.sabores}\n                  onChange={(e) => setFormData(prev => ({ ...prev, sabores: e.target.value }))}\n                  placeholder=\"Ej: Fresa, Menta, Uva\"\n                  className=\"bg-gray-800 border-gray-700\"\n                  data-testid=\"input-product-sabores\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"description\">Descripción</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                className=\"bg-gray-800 border-gray-700\"\n                rows={3}\n                data-testid=\"textarea-product-description\"\n              />\n            </div>\n\n            {/* Image Upload Section */}\n            <div>\n              <Label htmlFor=\"image\">Imagen del Producto</Label>\n              <div className=\"mt-1\">\n                <Input\n                  id=\"image\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handleFileSelect}\n                  className=\"bg-gray-800 border-gray-700\"\n                  data-testid=\"input-product-image\"\n                />\n                {imagePreview && (\n                  <div className=\"mt-4\">\n                    <p className=\"text-sm text-gray-400 mb-2\">Vista previa:</p>\n                    <div className=\"relative w-32 h-32 bg-gray-800 rounded-md overflow-hidden\">\n                      <img\n                        src={imagePreview}\n                        alt=\"Vista previa\"\n                        className=\"w-full h-full object-cover\"\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"active\"\n                checked={formData.active}\n                onCheckedChange={(checked) => setFormData(prev => ({ ...prev, active: checked }))}\n                data-testid=\"switch-product-active\"\n              />\n              <Label htmlFor=\"active\">Producto Activo</Label>\n            </div>\n\n            <div className=\"flex gap-3 pt-4\">\n              <Button\n                type=\"submit\"\n                disabled={createProductMutation.isPending || updateProductMutation.isPending || isUploading}\n                className=\"bg-purple-600 hover:bg-purple-700\"\n                data-testid=\"button-save-product\"\n              >\n                {isUploading ? \n                  \"Subiendo imagen...\" :\n                  (createProductMutation.isPending || updateProductMutation.isPending ? \n                    \"Guardando...\" : \n                    `${editingProduct ? \"Actualizar\" : \"Crear\"} Producto`\n                  )\n                }\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsDialogOpen(false)}\n                className=\"border-gray-700\"\n                data-testid=\"button-cancel-product\"\n              >\n                Cancelar\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Flavor Management Dialog */}\n          <Dialog open={flavorDialogOpen} onOpenChange={setFlavorDialogOpen}>\n            <DialogContent className=\"bg-gray-900 border-purple-500/20 text-white max-w-4xl max-h-[90vh]\">\n              <DialogHeader>\n                <DialogTitle className=\"flex items-center gap-2\">\n                  <Settings className=\"w-5 h-5\" />\n                  Gestionar Sabores - {currentProductForFlavors?.name}\n                </DialogTitle>\n              </DialogHeader>\n              \n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 max-h-[70vh] overflow-y-auto\">\n                {/* Left side - Add/Edit flavor form */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium text-white\">\n                    {editingFlavor ? \"Editar Sabor\" : \"Agregar Nuevo Sabor\"}\n                  </h3>\n                  \n                  <form onSubmit={handleFlavorSubmit} className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"flavor-name\">Nombre del Sabor</Label>\n                      <Input\n                        id=\"flavor-name\"\n                        value={flavorFormData.name}\n                        onChange={(e) => setFlavorFormData(prev => ({ ...prev, name: e.target.value }))}\n                        required\n                        placeholder=\"Ej: Fresa, Menta, etc.\"\n                        className={`bg-gray-800 border-gray-700 ${flavorFormErrors.name ? 'border-red-500' : ''}`}\n                        data-testid=\"input-flavor-name\"\n                      />\n                      {flavorFormErrors.name && (\n                        <p className=\"text-red-400 text-sm mt-1\">{flavorFormErrors.name}</p>\n                      )}\n                    </div>\n\n                    <div className=\"grid grid-cols-3 gap-3\">\n                      <div>\n                        <Label htmlFor=\"flavor-inventory\">Inventario</Label>\n                        <Input\n                          id=\"flavor-inventory\"\n                          type=\"number\"\n                          min=\"0\"\n                          value={flavorFormData.inventory}\n                          onChange={(e) => setFlavorFormData(prev => ({ ...prev, inventory: e.target.value }))}\n                          className={`bg-gray-800 border-gray-700 ${flavorFormErrors.inventory ? 'border-red-500' : ''}`}\n                          data-testid=\"input-flavor-inventory\"\n                        />\n                        {flavorFormErrors.inventory && (\n                          <p className=\"text-red-400 text-sm mt-1\">{flavorFormErrors.inventory}</p>\n                        )}\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"flavor-reserved\">Reservado</Label>\n                        <Input\n                          id=\"flavor-reserved\"\n                          type=\"number\"\n                          min=\"0\"\n                          value={flavorFormData.reservedInventory}\n                          onChange={(e) => setFlavorFormData(prev => ({ ...prev, reservedInventory: e.target.value }))}\n                          className={`bg-gray-800 border-gray-700 ${flavorFormErrors.reservedInventory ? 'border-red-500' : ''}`}\n                          data-testid=\"input-flavor-reserved\"\n                        />\n                        {flavorFormErrors.reservedInventory && (\n                          <p className=\"text-red-400 text-sm mt-1\">{flavorFormErrors.reservedInventory}</p>\n                        )}\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"flavor-threshold\">Umbral</Label>\n                        <Input\n                          id=\"flavor-threshold\"\n                          type=\"number\"\n                          min=\"0\"\n                          value={flavorFormData.lowStockThreshold}\n                          onChange={(e) => setFlavorFormData(prev => ({ ...prev, lowStockThreshold: e.target.value }))}\n                          className={`bg-gray-800 border-gray-700 ${flavorFormErrors.lowStockThreshold ? 'border-red-500' : ''}`}\n                          data-testid=\"input-flavor-threshold\"\n                        />\n                        {flavorFormErrors.lowStockThreshold && (\n                          <p className=\"text-red-400 text-sm mt-1\">{flavorFormErrors.lowStockThreshold}</p>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        id=\"flavor-active\"\n                        checked={flavorFormData.active}\n                        onCheckedChange={(checked) => setFlavorFormData(prev => ({ ...prev, active: checked }))}\n                        data-testid=\"switch-flavor-active\"\n                      />\n                      <Label htmlFor=\"flavor-active\">Sabor Activo</Label>\n                    </div>\n\n                    <div className=\"text-sm text-gray-400 bg-gray-800/50 p-3 rounded space-y-1\">\n                      <p><strong>Disponible:</strong> <span className=\"text-green-400\">{Math.max(0, parseInt(flavorFormData.inventory || \"0\") - parseInt(flavorFormData.reservedInventory || \"0\"))} unidades</span></p>\n                      <p><strong>Estado:</strong> \n                        <span className={`ml-1 ${\n                          Math.max(0, parseInt(flavorFormData.inventory || \"0\") - parseInt(flavorFormData.reservedInventory || \"0\")) === 0 \n                            ? \"text-red-400\" \n                            : Math.max(0, parseInt(flavorFormData.inventory || \"0\") - parseInt(flavorFormData.reservedInventory || \"0\")) <= parseInt(flavorFormData.lowStockThreshold || \"5\")\n                            ? \"text-yellow-400\"\n                            : \"text-green-400\"\n                        }`}>\n                          {Math.max(0, parseInt(flavorFormData.inventory || \"0\") - parseInt(flavorFormData.reservedInventory || \"0\")) === 0 \n                            ? \"Sin Stock\" \n                            : Math.max(0, parseInt(flavorFormData.inventory || \"0\") - parseInt(flavorFormData.reservedInventory || \"0\")) <= parseInt(flavorFormData.lowStockThreshold || \"5\")\n                            ? \"Stock Bajo\"\n                            : \"En Stock\"\n                          }\n                        </span>\n                      </p>\n                    </div>\n\n                    <div className=\"flex gap-3\">\n                      <Button\n                        type=\"submit\"\n                        disabled={createFlavorMutation.isPending || updateFlavorMutation.isPending}\n                        className=\"bg-blue-600 hover:bg-blue-700\"\n                        data-testid=\"button-save-flavor\"\n                      >\n                        <Save className=\"w-4 h-4 mr-2\" />\n                        {editingFlavor ? \"Actualizar\" : \"Crear\"} Sabor\n                      </Button>\n                      \n                      {editingFlavor && (\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={resetFlavorForm}\n                          className=\"border-gray-700\"\n                          data-testid=\"button-cancel-edit-flavor\"\n                        >\n                          <X className=\"w-4 h-4 mr-2\" />\n                          Cancelar Edición\n                        </Button>\n                      )}\n                    </div>\n                  </form>\n                </div>\n\n                {/* Right side - Flavor list with bulk operations */}\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-lg font-medium text-white\">Sabores Existentes</h3>\n                    {productFlavors && (\n                      <Badge variant=\"outline\" className=\"text-gray-300\">\n                        {productFlavors.length} sabores\n                      </Badge>\n                    )}\n                  </div>\n\n                  {/* Bulk Operations Controls */}\n                  {productFlavors && productFlavors.length > 0 && (\n                    <Card className=\"bg-gray-800 border-blue-500/20\">\n                      <CardContent className=\"p-4 space-y-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <h4 className=\"text-sm font-medium text-blue-400\">Actualización Masiva de Inventario</h4>\n                          {selectedFlavors.size > 0 && (\n                            <Badge variant=\"outline\" className=\"text-blue-400 border-blue-500/50\">\n                              {selectedFlavors.size} seleccionados\n                            </Badge>\n                          )}\n                        </div>\n\n                        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n                          <div>\n                            <Label htmlFor=\"bulk-inventory\" className=\"text-sm\">Cantidad a agregar</Label>\n                            <Input\n                              id=\"bulk-inventory\"\n                              type=\"number\"\n                              min=\"1\"\n                              value={bulkInventoryAmount}\n                              onChange={(e) => setBulkInventoryAmount(e.target.value)}\n                              placeholder=\"Ej: 50\"\n                              className=\"bg-gray-700 border-gray-600 text-white\"\n                              data-testid=\"input-bulk-inventory-amount\"\n                            />\n                          </div>\n                          <div className=\"flex items-end gap-2\">\n                            <Button\n                              onClick={handleBulkInventoryUpdate}\n                              disabled={isBulkUpdating || selectedFlavors.size === 0 || !validateBulkInventoryAmount()}\n                              className=\"bg-green-600 hover:bg-green-700 text-white flex-1\"\n                              data-testid=\"button-apply-bulk-inventory\"\n                            >\n                              {isBulkUpdating ? (\n                                <>\n                                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                                  Aplicando...\n                                </>\n                              ) : (\n                                <>\n                                  <Plus className=\"w-4 h-4 mr-2\" />\n                                  Aplicar\n                                </>\n                              )}\n                            </Button>\n                          </div>\n                        </div>\n\n                        <div className=\"flex gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={selectAllFlavors}\n                            disabled={isBulkUpdating}\n                            className=\"border-gray-600 text-gray-300 hover:bg-gray-700 flex-1\"\n                            data-testid=\"button-select-all-flavors\"\n                          >\n                            <CheckSquare className=\"w-3 h-3 mr-1\" />\n                            Seleccionar Todo\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={clearFlavorSelection}\n                            disabled={isBulkUpdating || selectedFlavors.size === 0}\n                            className=\"border-gray-600 text-gray-300 hover:bg-gray-700 flex-1\"\n                            data-testid=\"button-clear-selection\"\n                          >\n                            <Square className=\"w-3 h-3 mr-1\" />\n                            Limpiar\n                          </Button>\n                        </div>\n\n                        {selectedFlavors.size > 0 && bulkInventoryAmount && validateBulkInventoryAmount() && (\n                          <div className=\"text-xs text-gray-400 bg-gray-700/50 p-3 rounded\">\n                            <p className=\"text-green-400\">\n                              <strong>Vista previa:</strong> Se agregarán {bulkInventoryAmount} unidades a {selectedFlavors.size} sabores seleccionados.\n                            </p>\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n                  )}\n\n                  <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                    {flavorsLoading ? (\n                      [...Array(3)].map((_, i) => (\n                        <Card key={i} className=\"bg-gray-800 border-gray-700\">\n                          <CardContent className=\"p-3\">\n                            <Skeleton className=\"h-4 w-24 bg-gray-700 mb-2\" />\n                            <Skeleton className=\"h-3 w-16 bg-gray-700\" />\n                          </CardContent>\n                        </Card>\n                      ))\n                    ) : productFlavors && productFlavors.length > 0 ? (\n                      productFlavors.map((flavor) => (\n                        <Card key={flavor.id} className={`bg-gray-800 border-gray-700 transition-colors ${\n                          selectedFlavors.has(flavor.id) ? 'ring-2 ring-blue-500/50 border-blue-500/30' : ''\n                        }`}>\n                          <CardContent className=\"p-3\">\n                            <div className=\"flex items-start gap-3\">\n                              {/* Checkbox for bulk selection */}\n                              <div className=\"pt-1\">\n                                <Checkbox\n                                  checked={selectedFlavors.has(flavor.id)}\n                                  onCheckedChange={() => toggleFlavorSelection(flavor.id)}\n                                  disabled={!flavor.active || isBulkUpdating}\n                                  className=\"border-gray-500 data-[state=checked]:bg-blue-600 data-[state=checked]:border-blue-600\"\n                                  data-testid={`checkbox-flavor-${flavor.id}`}\n                                />\n                              </div>\n\n                              <div className=\"flex items-center justify-between flex-1\">\n                                <div className=\"flex-1\">\n                                  <div className=\"flex items-center gap-2 mb-1\">\n                                    <h4 className={`font-medium ${flavor.active ? 'text-white' : 'text-gray-400'}`}>\n                                      {flavor.name}\n                                    </h4>\n                                    {getFlavorStockStatusBadge(flavor)}\n                                    {!flavor.active && (\n                                      <Badge variant=\"outline\" className=\"text-gray-400 border-gray-500\">\n                                        Inactivo\n                                      </Badge>\n                                    )}\n                                    {selectedFlavors.has(flavor.id) && (\n                                      <Badge variant=\"outline\" className=\"text-blue-400 border-blue-500/50\">\n                                        <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                        Seleccionado\n                                      </Badge>\n                                    )}\n                                  </div>\n                                  <div className=\"text-xs text-gray-400 space-y-1\">\n                                    <p>Total: <span className=\"text-white\">{flavor.inventory}</span> | Reservado: <span className=\"text-yellow-400\">{flavor.reservedInventory}</span> | Disponible: <span className=\"text-green-400\">{getFlavorAvailableInventory(flavor)}</span></p>\n                                    <p>Umbral: <span className=\"text-orange-400\">{flavor.lowStockThreshold}</span></p>\n                                  </div>\n                                </div>\n                                <div className=\"flex items-center gap-1\">\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => handleEditFlavor(flavor)}\n                                    disabled={isBulkUpdating}\n                                    className=\"hover:bg-gray-700\"\n                                    data-testid={`button-edit-flavor-${flavor.id}`}\n                                  >\n                                    <Edit2 className=\"w-3 h-3\" />\n                                  </Button>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => setDeletingFlavor(flavor)}\n                                    disabled={isBulkUpdating}\n                                    className=\"text-red-400 hover:text-red-300 hover:bg-red-500/10\"\n                                    data-testid={`button-delete-flavor-${flavor.id}`}\n                                  >\n                                    <Trash2 className=\"w-3 h-3\" />\n                                  </Button>\n                                </div>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))\n                    ) : (\n                      <Card className=\"bg-gray-800 border-gray-700\">\n                        <CardContent className=\"text-center py-8\">\n                          <Package className=\"w-8 h-8 text-gray-600 mx-auto mb-2\" />\n                          <p className=\"text-gray-400\">No hay sabores registrados</p>\n                          <p className=\"text-xs text-gray-500 mt-1\">Agrega sabores para este producto</p>\n                        </CardContent>\n                      </Card>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end gap-3 pt-4 border-t border-gray-700\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setFlavorDialogOpen(false);\n                    resetFlavorForm();\n                    setCurrentProductForFlavors(null);\n                  }}\n                  className=\"border-gray-700\"\n                  data-testid=\"button-close-flavor-dialog\"\n                >\n                  Cerrar\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n\n          {/* Delete Flavor Confirmation Dialog */}\n          <AlertDialog open={!!deletingFlavor} onOpenChange={() => setDeletingFlavor(null)}>\n            <AlertDialogContent className=\"bg-gray-900 border-red-500/20 text-white\">\n              <AlertDialogHeader>\n                <AlertDialogTitle className=\"text-red-400\">¿Eliminar Sabor?</AlertDialogTitle>\n                <AlertDialogDescription className=\"text-gray-300\">\n                  ¿Estás seguro de que deseas eliminar el sabor \"{deletingFlavor?.name}\"? \n                  Esta acción no se puede deshacer y se perderán todos los datos de inventario asociados.\n                </AlertDialogDescription>\n              </AlertDialogHeader>\n              <AlertDialogFooter>\n                <AlertDialogCancel \n                  onClick={() => setDeletingFlavor(null)}\n                  className=\"border-gray-700 text-gray-300 hover:bg-gray-800\"\n                  data-testid=\"button-cancel-delete-flavor\"\n                >\n                  Cancelar\n                </AlertDialogCancel>\n                <AlertDialogAction\n                  onClick={handleDeleteFlavor}\n                  disabled={deleteFlavorMutation.isPending}\n                  className=\"bg-red-600 hover:bg-red-700 text-white\"\n                  data-testid=\"button-confirm-delete-flavor\"\n                >\n                  {deleteFlavorMutation.isPending ? \"Eliminando...\" : \"Eliminar\"}\n                </AlertDialogAction>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialog>\n\n\n      {/* Delete Product Confirmation Dialog */}\n      <AlertDialog open={!!deletingProduct} onOpenChange={() => setDeletingProduct(null)}>\n        <AlertDialogContent className=\"bg-gray-900 border-red-500/20 text-white\">\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"text-red-400\">¿Eliminar Producto?</AlertDialogTitle>\n            <AlertDialogDescription className=\"text-gray-300\">\n              ¿Estás seguro de que deseas eliminar el producto \"{deletingProduct?.name}\"? \n              Esta acción no se puede deshacer y se perderán todos los datos asociados.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel \n              onClick={() => setDeletingProduct(null)}\n              className=\"border-gray-700 text-gray-300 hover:bg-gray-800\"\n              data-testid=\"button-cancel-delete-product\"\n            >\n              Cancelar\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleDeleteProduct}\n              disabled={deleteProductMutation.isPending}\n              className=\"bg-red-600 hover:bg-red-700 text-white\"\n              data-testid=\"button-confirm-delete-product\"\n            >\n              {deleteProductMutation.isPending ? \"Eliminando...\" : \"Eliminar\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":85015},"client/src/pages/Home.tsx":{"content":"import Header from '@/components/Header'\nimport HeroSection from '@/components/HeroSection'\nimport AboutSection from '@/components/AboutSection'\nimport ProductStore from '@/components/ProductStore'\nimport TestimonialsSection from '@/components/TestimonialsSection'\nimport ContactSection from '@/components/ContactSection'\nimport Footer from '@/components/Footer'\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-black\">\n      <Header />\n      <HeroSection />\n      <AboutSection />\n      <ProductStore />\n      <TestimonialsSection />\n      <ContactSection />\n      <Footer />\n    </div>\n  )\n}","size_bytes":625},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/AboutSection.tsx":{"content":"import AboutSection from '../AboutSection'\n\nexport default function AboutSectionExample() {\n  return <AboutSection />\n}","size_bytes":119},"client/src/components/examples/AffiliateProgram.tsx":{"content":"import AffiliateProgram from '../AffiliateProgram'\n\nexport default function AffiliateProgramExample() {\n  return <AffiliateProgram />\n}","size_bytes":135},"client/src/components/examples/ContactSection.tsx":{"content":"import ContactSection from '../ContactSection'\n\nexport default function ContactSectionExample() {\n  return <ContactSection />\n}","size_bytes":127},"client/src/components/examples/Footer.tsx":{"content":"import Footer from '../Footer'\n\nexport default function FooterExample() {\n  return <Footer />\n}","size_bytes":95},"client/src/components/examples/Header.tsx":{"content":"import Header from '../Header'\n\nexport default function HeaderExample() {\n  return <Header />\n}","size_bytes":95},"client/src/components/examples/HeroSection.tsx":{"content":"import HeroSection from '../HeroSection'\n\nexport default function HeroSectionExample() {\n  return <HeroSection />\n}","size_bytes":115},"client/src/components/examples/ProductStore.tsx":{"content":"import ProductStore from '../ProductStore'\n\nexport default function ProductStoreExample() {\n  return <ProductStore />\n}","size_bytes":119},"client/src/components/examples/TestimonialsSection.tsx":{"content":"import TestimonialsSection from '../TestimonialsSection'\n\nexport default function TestimonialsSectionExample() {\n  return <TestimonialsSection />\n}","size_bytes":147},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X, CheckCircle, XCircle, AlertTriangle, Info, Zap } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center space-x-4 p-6 pr-8 transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out\",\n  {\n    variants: {\n      variant: {\n        default: \"toast-vapeolo-base toast-vapeolo-default\",\n        success: \"toast-vapeolo-base toast-vapeolo-success\",\n        error: \"toast-vapeolo-base toast-vapeolo-error\",\n        warning: \"toast-vapeolo-base toast-vapeolo-warning\",\n        info: \"toast-vapeolo-base toast-vapeolo-info\",\n        destructive: \"toast-vapeolo-base toast-vapeolo-error\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\n// Helper function to get icon based on variant\nconst getToastIcon = (variant: string) => {\n  switch (variant) {\n    case \"success\":\n      return <CheckCircle className=\"h-5 w-5 toast-vapeolo-icon\" aria-hidden=\"true\" data-testid=\"icon-toast-success\" />\n    case \"error\":\n    case \"destructive\":\n      return <XCircle className=\"h-5 w-5 toast-vapeolo-icon\" aria-hidden=\"true\" data-testid=\"icon-toast-error\" />\n    case \"warning\":\n      return <AlertTriangle className=\"h-5 w-5 toast-vapeolo-icon\" aria-hidden=\"true\" data-testid=\"icon-toast-warning\" />\n    case \"info\":\n      return <Info className=\"h-5 w-5 toast-vapeolo-icon\" aria-hidden=\"true\" data-testid=\"icon-toast-info\" />\n    case \"default\":\n    default:\n      return <Zap className=\"h-5 w-5 toast-vapeolo-icon\" aria-hidden=\"true\" data-testid=\"icon-toast-default\" />\n  }\n}\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants> & {\n      showIcon?: boolean\n    }\n>(({ className, variant, showIcon = true, children, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    >\n      {showIcon && (\n        <div className=\"flex-shrink-0\">\n          {getToastIcon(variant || \"default\")}\n        </div>\n      )}\n      <div className=\"flex-1\">\n        {children}\n      </div>\n    </ToastPrimitives.Root>\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 toast-vapeolo-close p-1\",\n      className\n    )}\n    toast-close=\"\"\n    aria-label=\"Close\"\n    data-testid=\"button-toast-close\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":5735},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"DEPLOYMENT_GUIDE_HOSTINGER.md":{"content":"# 🚀 Guía Completa de Deployment VAPEOLO - Hostinger\n\n## ✅ Estado Actual del Proyecto\n**¡Tu aplicación VAPEOLO está COMPLETAMENTE FUNCIONAL!** \n\n- ✅ Sitio web completo con diseño futurista\n- ✅ Formularios de contacto y afiliación conectados y funcionando\n- ✅ Dashboard administrativo completamente operativo\n- ✅ APIs backend con validación y seguridad JWT\n- ✅ Sistema de afiliados con 3 niveles implementado\n- ✅ Base de datos PostgreSQL configurada\n\n---\n\n## 📋 Requisitos en Hostinger\n\n### Plan Necesario:\n- **Business Plan o Premium Plan** (con soporte Node.js)\n- **Base de datos PostgreSQL disponible**\n- **Dominio configurado**\n\n---\n\n## 🚀 Proceso de Deployment Completo\n\n### Paso 1: Build Local de la Aplicación\n\n```bash\n# Ejecutar en Replit terminal:\nnpm run build\n```\n\nEsto genera:\n- `dist/` - Frontend optimizado (cliente)\n- `dist/index.js` - Servidor backend compilado\n\n### Paso 2: Configurar Base de Datos PostgreSQL\n\n1. **En hPanel de Hostinger:**\n   - Ve a **\"Bases de Datos\" → \"PostgreSQL\"**\n   - Crea nueva base de datos:\n     - Nombre: `vapeolo_db`\n     - Usuario: `vapeolo_user`  \n     - Contraseña: [genera una segura]\n\n2. **Anota esta información:**\n```\nHost: [tu-servidor].postgres.database.hostinger.com\nPuerto: 5432\nBase de datos: vapeolo_db\nUsuario: vapeolo_user\nContraseña: [tu-contraseña-segura]\n```\n\n### Paso 3: Subir Código Completo a Hostinger\n\n1. **En hPanel → \"Administrador de Archivos\":**\n   - Ve a `public_html/`\n   - **ELIMINA todo el contenido existente**\n   - **SUBE TODOS los archivos de tu proyecto** incluyendo:\n   ```\n   public_html/\n   ├── client/\n   ├── server/\n   ├── shared/\n   ├── dist/          ← CRÍTICO: Debe incluir build fresco\n   ├── package.json\n   ├── node_modules/  ← Se creará en siguiente paso\n   └── [todos los demás archivos]\n   ```\n\n### Paso 4: Configurar Node.js Application\n\n1. **En hPanel → \"Node.js\":**\n   - Selecciona tu dominio\n   - **Versión Node.js:** 20.x (recomendado)\n   - **Directorio de aplicación:** `/public_html`\n   - **Archivo de entrada:** `dist/index.js` ← IMPORTANTE\n   - **Script de inicio:** `start`\n\n2. **Instalar dependencias:**\n```bash\n# Hostinger ejecutará automáticamente:\nnpm ci --production\n```\n\n### Paso 5: Variables de Entorno (CRÍTICO)\n\n**En hPanel → \"Node.js\" → \"Variables de Entorno\":**\n\n```env\nNODE_ENV=production\nPORT=3000\nDATABASE_URL=postgresql://vapeolo_user:TU_CONTRASEÑA@tu-servidor.postgres.database.hostinger.com:5432/vapeolo_db\nJWT_SECRET=tu_jwt_secret_super_seguro_minimo_32_caracteres_aqui\n```\n\n**⚠️ IMPORTANTE:** \n- Genera un `JWT_SECRET` único de al menos 32 caracteres\n- Reemplaza `TU_CONTRASEÑA` con tu contraseña real de PostgreSQL\n- Reemplaza `tu-servidor` con tu host real de Hostinger\n\n### Paso 6: Inicializar Base de Datos\n\n**Conecta a tu PostgreSQL via phpPgAdmin y ejecuta:**\n\n```sql\n-- 1. Habilitar UUID (OBLIGATORIO)\nCREATE EXTENSION IF NOT EXISTS pgcrypto;\n\n-- 2. Crear tabla de usuarios administrativos\nCREATE TABLE IF NOT EXISTS \"users\" (\n  \"id\" varchar PRIMARY KEY DEFAULT gen_random_uuid(),\n  \"username\" text NOT NULL UNIQUE,\n  \"password\" text NOT NULL,\n  \"role\" text NOT NULL DEFAULT 'admin',\n  \"created_at\" timestamp NOT NULL DEFAULT now()\n);\n\n-- 3. Crear tabla de afiliados\nCREATE TABLE IF NOT EXISTS \"affiliates\" (\n  \"id\" varchar PRIMARY KEY DEFAULT gen_random_uuid(),\n  \"name\" text NOT NULL,\n  \"email\" text NOT NULL UNIQUE,\n  \"phone\" text NOT NULL,\n  \"level\" text NOT NULL,\n  \"discount\" decimal(5,2) NOT NULL,\n  \"minimum_purchase\" decimal(10,2) NOT NULL,\n  \"status\" text NOT NULL DEFAULT 'pending',\n  \"message\" text,\n  \"created_at\" timestamp NOT NULL DEFAULT now(),\n  \"approved_at\" timestamp,\n  \"approved_by\" varchar REFERENCES \"users\"(\"id\")\n);\n\n-- 4. Crear tabla de productos\nCREATE TABLE IF NOT EXISTS \"products\" (\n  \"id\" varchar PRIMARY KEY DEFAULT gen_random_uuid(),\n  \"name\" text NOT NULL,\n  \"puffs\" integer NOT NULL,\n  \"price\" decimal(10,2) NOT NULL,\n  \"image\" text,\n  \"sabores\" text[] NOT NULL DEFAULT ARRAY[]::text[],\n  \"description\" text,\n  \"popular\" boolean NOT NULL DEFAULT false,\n  \"active\" boolean NOT NULL DEFAULT true,\n  \"created_at\" timestamp NOT NULL DEFAULT now()\n);\n\n-- 5. Crear tabla de ventas\nCREATE TABLE IF NOT EXISTS \"sales\" (\n  \"id\" varchar PRIMARY KEY DEFAULT gen_random_uuid(),\n  \"affiliate_id\" varchar REFERENCES \"affiliates\"(\"id\"),\n  \"product_id\" varchar NOT NULL REFERENCES \"products\"(\"id\"),\n  \"quantity\" integer NOT NULL,\n  \"unit_price\" decimal(10,2) NOT NULL,\n  \"discount\" decimal(5,2),\n  \"total_amount\" decimal(10,2) NOT NULL,\n  \"customer_name\" text,\n  \"customer_email\" text,\n  \"customer_phone\" text,\n  \"status\" text NOT NULL DEFAULT 'pending',\n  \"created_at\" timestamp NOT NULL DEFAULT now()\n);\n\n-- 6. Crear tabla de mensajes de contacto\nCREATE TABLE IF NOT EXISTS \"contact_messages\" (\n  \"id\" varchar PRIMARY KEY DEFAULT gen_random_uuid(),\n  \"name\" text NOT NULL,\n  \"email\" text NOT NULL,\n  \"message\" text NOT NULL,\n  \"status\" text NOT NULL DEFAULT 'unread',\n  \"created_at\" timestamp NOT NULL DEFAULT now()\n);\n\n-- 7. Crear usuario administrador (OBLIGATORIO)\nINSERT INTO \"users\" (username, password, role) \nVALUES ('admin', '$2b$10$8K1p/a0dBxQyQeq0HFO1HO8bOCHp0NDc2g2C2HtQ0KqzKlE6E3.9a', 'admin')\nON CONFLICT (username) DO NOTHING;\n\n-- 8. Insertar productos de ejemplo\nINSERT INTO \"products\" (name, puffs, price, sabores, description, popular, active) VALUES\n('CYBER VAPE 2500', 2500, 65.00, ARRAY['Menta Fresca', 'Frutas del Bosque', 'Mango Tropical'], 'Vape futurista de alta tecnología', true, true),\n('CUBE MINI 1000', 1000, 35.00, ARRAY['Sandía', 'Uva', 'Limón'], 'Diseño compacto y potente', false, true),\n('ENERGY BOOST 3000', 3000, 85.00, ARRAY['Energy Drink', 'Café', 'Cola'], 'Para momentos de máxima energía', true, true),\n('TORCH FIRE 4000', 4000, 95.00, ARRAY['Canela', 'Vainilla', 'Chocolate'], 'Experiencia intensa y duradera', false, true),\n('BAR CLASSIC 800', 800, 25.00, ARRAY['Tabaco', 'Menta', 'Cereza'], 'El clásico que nunca falla', false, true)\nON CONFLICT DO NOTHING;\n```\n\n### Paso 7: Iniciar la Aplicación\n\n1. **En hPanel → \"Node.js\":**\n   - **Restart** la aplicación\n   - Verificar estado: **\"Running\"**\n   - Verificar logs para errores\n\n### Paso 8: Configurar SSL/HTTPS\n\n1. **En hPanel → \"SSL/TLS\":**\n   - Activa **\"Let's Encrypt SSL\"** \n   - Habilita **\"Forzar HTTPS\"**\n\n---\n\n## 🔐 Credenciales de Administrador\n\n### Acceso al Panel Administrativo:\n```\nURL: https://tu-dominio.com/admin/login\nUsuario: admin\nContraseña: admin123\n```\n\n**⚠️ CAMBIAR CONTRASEÑA INMEDIATAMENTE** después del primer login\n\n---\n\n## ✅ Lista de Verificación Post-Deployment\n\n### 1. Verificar Sitio Principal ✅\n```\n✅ URL: https://tu-dominio.com\n✅ Página principal carga correctamente\n✅ Productos se muestran (5 categorías)\n✅ Formulario contacto funciona\n✅ Formulario afiliación funciona  \n✅ Diseño responsive correcto\n```\n\n### 2. Verificar APIs Backend ✅\n```bash\n# Probar estas URLs en el navegador o Postman:\n\n✅ GET https://tu-dominio.com/api/products\n   → Debe devolver lista de productos\n\n✅ POST https://tu-dominio.com/api/contact\n   → Debe aceptar: {name, email, message}\n\n✅ POST https://tu-dominio.com/api/affiliates  \n   → Debe aceptar: {name, email, phone, level, message}\n```\n\n### 3. Verificar Dashboard Administrativo ✅\n```\n✅ URL: https://tu-dominio.com/admin/login\n✅ Login con admin/admin123 funciona\n✅ Dashboard muestra estadísticas reales\n✅ Gestión de afiliados accesible\n✅ Administración de productos funcional\n✅ Mensajes de contacto visibles\n```\n\n### 4. Verificar Base de Datos ✅\n```\n✅ Tablas creadas correctamente\n✅ Productos aparecen en el sitio\n✅ Formularios guardan datos en BD\n✅ Admin puede ver datos en dashboard\n```\n\n---\n\n## 🛠️ Solución de Problemas\n\n### ❌ **\"Cannot find module\" o \"App crashed\"**\n```bash\n# Verificar en hPanel → Node.js → Logs:\n1. Confirmar que dist/index.js existe\n2. Verificar que npm ci se ejecutó\n3. Comprobar NODE_ENV=production\n4. Verificar script de inicio: \"start\"\n```\n\n### ❌ **\"JWT must be provided\"**\n```bash\n# En Variables de Entorno:\n1. Verificar JWT_SECRET está configurado\n2. Longitud mínima 32 caracteres\n3. Reiniciar aplicación después de cambios\n```\n\n### ❌ **\"Database connection failed\"**\n```bash\n1. Verificar DATABASE_URL completa y correcta\n2. Comprobar credenciales PostgreSQL\n3. Confirmar que pgcrypto está habilitado\n4. Probar conexión desde phpPgAdmin\n```\n\n### ❌ **\"Admin login failed\"**\n```bash\n1. Verificar usuario 'admin' existe en tabla users\n2. Confirmar tabla users tiene columna 'username' \n3. Verificar contraseña hash correcta\n4. Comprobar JWT_SECRET configurado\n```\n\n### ❌ **\"Static files not loading\"**\n```bash\n1. Confirmar dist/ contiene archivos del build\n2. Verificar Express sirve estáticos desde dist/\n3. Comprobar que npm run build se ejecutó correctamente\n```\n\n---\n\n## 🎯 Funcionalidades Operativas\n\n### ✅ **Frontend Público:**\n- Hero banner futurista con efectos\n- Catálogo por categorías (CYBER, CUBE, ENERGY, TORCH, BAR)  \n- Programa de afiliación (Agente 10-12%, Distribuidor 25-30%, Socio 45-50%)\n- Formularios funcionales con validación Zod\n- Diseño responsive y moderno\n\n### ✅ **Backend APIs Seguras:**\n- `POST /api/contact` - Mensajes de contacto\n- `POST /api/affiliates` - Solicitudes de afiliación\n- `GET /api/products` - Catálogo público  \n- `POST /api/admin/login` - Autenticación admin\n- `GET /api/admin/dashboard` - Estadísticas\n- `GET /api/admin/affiliates` - Gestión afiliados\n- Rate limiting y validación en todas las rutas\n\n### ✅ **Dashboard Administrativo:**\n- Autenticación JWT segura\n- Estadísticas en tiempo real\n- Gestión completa de afiliados (aprobar/rechazar)\n- Administración de productos (crear/editar)\n- Control de mensajes de contacto\n- Sistema de ventas\n\n---\n\n## 🎉 ¡Tu E-commerce VAPEOLO está LISTO!\n\n**Tu aplicación VAPEOLO incluye:**\n- ✅ **Sitio web profesional** listo para ventas\n- ✅ **Sistema de afiliación automatizado** con 3 niveles\n- ✅ **Dashboard administrativo completo**\n- ✅ **APIs backend seguras y escalables**\n- ✅ **Base de datos PostgreSQL robusta**\n\n## 🔒 Recomendaciones de Seguridad\n\n1. **Cambiar contraseña admin** inmediatamente\n2. **Configurar backup automático** de base de datos\n3. **Monitorear logs** regularmente  \n4. **Mantener Node.js actualizado**\n5. **Usar HTTPS siempre**\n\n## 📞 Soporte Técnico\n\nPara problemas específicos de Hostinger:\n- **Soporte 24/7:** Chat en vivo en hPanel\n- **Documentación Node.js:** Tutorial en hPanel\n- **phpPgAdmin:** Gestión de base de datos\n\n---\n\n**¡Comienza a vender y administrar tu negocio VAPEOLO ahora!** 🚀💨","size_bytes":10728},"client/src/components/CartModal.tsx":{"content":"import { useCart } from '@/contexts/CartContext'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'\nimport { Minus, Plus, Trash2, ShoppingBag, X } from 'lucide-react'\nimport { Badge } from '@/components/ui/badge'\nimport CheckoutForm, { CustomerData } from '@/components/CheckoutForm'\nimport { useState } from 'react'\n\nexport default function CartModal() {\n  const { \n    cart, \n    removeFromCart, \n    updateQuantity, \n    clearCart, \n    getCartTotal, \n    getCartCount,\n    isCartOpen, \n    closeCart \n  } = useCart()\n\n  const [showCheckoutForm, setShowCheckoutForm] = useState(false)\n\n  const total = getCartTotal()\n  const itemCount = getCartCount()\n\n  const handleCheckout = () => {\n    setShowCheckoutForm(true)\n  }\n\n  const handleFormSubmit = async (customerData: CustomerData) => {\n    console.log('Submitted checkout form.', customerData);\n    \n    try {\n      // Place order and deduct inventory\n      const orderResponse = await fetch('/api/orders', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          cartItems: cart.map(item => ({\n            id: item.id,\n            flavor: item.flavor,\n            quantity: item.quantity\n          })),\n          customerData\n        })\n      });\n\n      if (!orderResponse.ok) {\n        const errorData = await orderResponse.json();\n        alert(`Error al procesar el pedido: ${errorData.error}`);\n        return;\n      }\n\n      const orderData = await orderResponse.json();\n      console.log('Order placed successfully:', orderData.data);\n\n      // Create detailed message with customer information and products\n      const customerInfo = `*INFORMACIÓN DEL CLIENTE:*\nNombre: ${customerData.firstName} ${customerData.lastName}\nTeléfono: ${customerData.phone}\nDirección: ${customerData.address}\nDepartamento: ${customerData.department}\nPedido ID: ${orderData.data.orderId}\n\n*PRODUCTOS:*`\n      \n      const productsInfo = cart.map(item => \n        `• ${item.name} (${item.puffs})\n  Sabor: ${item.flavor}\n  Cantidad: ${item.quantity}\n  Subtotal: Q${(parseFloat(item.price.replace('Q', '')) * item.quantity).toFixed(2)}`\n      ).join('\\n\\n')\n\n      const orderSummary = `\n*RESUMEN DEL PEDIDO:*\nTotal: Q${total.toFixed(2)}\nEnvío: GRATIS\n\n¡Pedido confirmado! Inventario reservado. Procederemos con la entrega.`\n\n      const fullMessage = `¡Hola! He realizado un pedido:\\n\\n${customerInfo}\\n\\n${productsInfo}${orderSummary}`\n      \n      const whatsappUrl = `https://wa.me/50242015748?text=${encodeURIComponent(fullMessage)}`\n      \n      console.log('Opening WhatsApp URL:', whatsappUrl);\n      \n      try {\n        const newWindow = window.open(whatsappUrl, '_blank');\n        console.log('Window.open result:', newWindow);\n        \n        if (!newWindow || newWindow.closed || typeof newWindow.closed == 'undefined') {\n          // Popup was blocked, fallback to direct navigation\n          console.warn('Popup blocked, redirecting to WhatsApp directly');\n          window.location.href = whatsappUrl;\n        }\n      } catch (error) {\n        console.error('Error opening WhatsApp:', error);\n        // Fallback to direct navigation\n        window.location.href = whatsappUrl;\n      }\n      \n      // Clear cart and close modal\n      setTimeout(() => {\n        clearCart()\n        closeCart()\n        setShowCheckoutForm(false)\n      }, 1000);\n\n    } catch (error) {\n      console.error('Error placing order:', error);\n      alert('Error al procesar el pedido. Por favor intenta nuevamente.');\n    }\n  }\n\n  const handleBackToCart = () => {\n    setShowCheckoutForm(false)\n  }\n\n  return (\n    <Dialog open={isCartOpen} onOpenChange={closeCart}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto bg-black/95 border-purple-500/30\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold text-white flex items-center\">\n            <ShoppingBag className=\"mr-2 h-6 w-6 text-purple-400\" />\n            Tu Carrito ({itemCount} {itemCount === 1 ? 'artículo' : 'artículos'})\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {showCheckoutForm && cart.length > 0 ? (\n            <CheckoutForm \n              total={total}\n              onSubmit={handleFormSubmit}\n              onBack={handleBackToCart}\n            />\n          ) : cart.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <ShoppingBag className=\"mx-auto h-16 w-16 text-gray-400 mb-4\" />\n              <p className=\"text-gray-400 text-lg\">Tu carrito está vacío</p>\n              <p className=\"text-gray-500 text-sm\">Agrega algunos productos para comenzar</p>\n              <Button \n                onClick={closeCart}\n                className=\"mt-4 bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700\"\n              >\n                Continuar comprando\n              </Button>\n            </div>\n          ) : (\n            <>\n              {/* Cart Items */}\n              <div className=\"space-y-3\">\n                {cart.map((item) => (\n                  <Card key={item.cartItemId} className=\"bg-gray-900/50 border-purple-500/20\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-4\">\n                        {/* Product Image */}\n                        <div className=\"w-16 h-16 bg-gradient-to-br from-purple-900/20 to-blue-900/20 rounded-lg flex items-center justify-center flex-shrink-0\">\n                          {item.image.startsWith('/placeholder') ? (\n                            <div className=\"w-12 h-12 bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg flex items-center justify-center\">\n                              <span className=\"text-white font-bold text-xs\">{item.name}</span>\n                            </div>\n                          ) : (\n                            <img \n                              src={item.image} \n                              alt={item.name}\n                              className=\"w-12 h-12 object-contain\"\n                            />\n                          )}\n                        </div>\n\n                        {/* Product Info */}\n                        <div className=\"flex-1\">\n                          <h4 className=\"text-white font-bold\">{item.name}</h4>\n                          <p className=\"text-purple-300 text-sm\">{item.puffs}</p>\n                          <p className=\"text-blue-300 text-sm\">Sabor: {item.flavor}</p>\n                          <p className=\"text-green-400 font-bold\">{item.price}</p>\n                        </div>\n\n                        {/* Quantity Controls */}\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            size=\"icon\"\n                            variant=\"outline\"\n                            className=\"h-8 w-8 border-purple-500/30 text-white hover:text-white\"\n                            onClick={() => updateQuantity(item.cartItemId, item.quantity - 1)}\n                            data-testid={`button-decrease-${item.cartItemId}`}\n                          >\n                            <Minus className=\"h-3 w-3\" />\n                          </Button>\n                          \n                          <span className=\"text-white font-bold min-w-[2rem] text-center\" data-testid={`quantity-${item.cartItemId}`}>\n                            {item.quantity}\n                          </span>\n                          \n                          <Button\n                            size=\"icon\"\n                            variant=\"outline\"\n                            className=\"h-8 w-8 border-purple-500/30 text-white hover:text-white\"\n                            onClick={() => updateQuantity(item.cartItemId, item.quantity + 1)}\n                            data-testid={`button-increase-${item.cartItemId}`}\n                          >\n                            <Plus className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n\n                        {/* Item Total */}\n                        <div className=\"text-right min-w-[4rem]\">\n                          <p className=\"text-green-400 font-bold\">\n                            Q{(parseFloat(item.price.replace('Q', '')) * item.quantity).toFixed(2)}\n                          </p>\n                        </div>\n\n                        {/* Remove Button */}\n                        <Button\n                          size=\"icon\"\n                          variant=\"outline\"\n                          className=\"h-8 w-8 border-red-500/30 text-red-400 hover:text-red-300 hover:border-red-400/50\"\n                          onClick={() => removeFromCart(item.cartItemId)}\n                          data-testid={`button-remove-${item.cartItemId}`}\n                        >\n                          <Trash2 className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n\n              {/* Cart Summary */}\n              <Card className=\"bg-purple-900/20 border-purple-500/30\">\n                <CardHeader>\n                  <CardTitle className=\"text-white text-lg\">Resumen del pedido</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex justify-between text-white\">\n                    <span>Subtotal ({itemCount} {itemCount === 1 ? 'artículo' : 'artículos'})</span>\n                    <span>Q{total.toFixed(2)}</span>\n                  </div>\n                  \n                  <div className=\"flex justify-between text-white\">\n                    <span>Envío</span>\n                    <span className=\"text-green-400\">Gratis</span>\n                  </div>\n                  \n                  <div className=\"border-t border-purple-500/30 pt-4\">\n                    <div className=\"flex justify-between text-xl font-bold text-white\">\n                      <span>Total</span>\n                      <span className=\"text-green-400\">Q{total.toFixed(2)}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Button \n                      className=\"w-full bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white font-bold\"\n                      onClick={handleCheckout}\n                      data-testid=\"button-checkout\"\n                    >\n                      <ShoppingBag className=\"mr-2 h-4 w-4\" />\n                      Finalizar Compra - Q{total.toFixed(2)}\n                    </Button>\n                    \n                    <div className=\"flex space-x-2\">\n                      <Button \n                        variant=\"outline\"\n                        className=\"flex-1 border-purple-500/30 text-white hover:text-white\"\n                        onClick={closeCart}\n                        data-testid=\"button-continue-shopping\"\n                      >\n                        Continuar comprando\n                      </Button>\n                      \n                      <Button \n                        variant=\"outline\"\n                        className=\"flex-1 border-red-500/30 text-red-400 hover:text-red-300\"\n                        onClick={clearCart}\n                        data-testid=\"button-clear-cart\"\n                      >\n                        Vaciar carrito\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"text-center text-sm text-gray-400\">\n                    <Badge variant=\"outline\" className=\"border-blue-500/30 text-blue-300\">\n                      Envío gratis en toda Guatemala\n                    </Badge>\n                  </div>\n                </CardContent>\n              </Card>\n            </>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}","size_bytes":12190},"client/src/components/FlavorSelector.tsx":{"content":"import { useState } from 'react'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Button } from '@/components/ui/button'\nimport { ShoppingCart } from 'lucide-react'\nimport { useCart } from '@/contexts/CartContext'\nimport { useDistributor } from '@/contexts/DistributorContext'\nimport { useToast } from '@/hooks/use-toast'\nimport type { ProductFlavor } from '@shared/schema'\nimport { isFlavorOutOfStock, getFlavorAvailableInventory } from '@shared/schema'\n\ninterface FlavorSelectorProps {\n  product: {\n    id: string\n    name: string\n    price: string\n    puffs: string\n    image: string\n    sabores: string[]\n    flavors?: ProductFlavor[]\n    availableFlavors?: ProductFlavor[]\n    hasFlavorInventory?: boolean\n  }\n}\n\nexport default function FlavorSelector({ product }: FlavorSelectorProps) {\n  const [selectedFlavor, setSelectedFlavor] = useState<string>('')\n  const { addToCart } = useCart()\n  const { distributor } = useDistributor()\n  const { toast } = useToast()\n\n  // Calculate the actual price (distributor price if logged in)\n  const actualPrice = distributor \n    ? `Q${(parseFloat(product.price.replace('Q', '')) * (1 - parseFloat(distributor.discount) / 100)).toFixed(0)}`\n    : product.price\n\n  // Use availableFlavors if present (new system), otherwise fall back to sabores (legacy)\n  const flavorsToShow = product.availableFlavors && product.availableFlavors.length > 0\n    ? product.availableFlavors\n    : product.sabores?.map(saborName => ({ \n        id: `legacy-${saborName}`,\n        name: saborName, \n        active: true, \n        inventory: 999, \n        reservedInventory: 0,\n        lowStockThreshold: 5,\n        createdAt: new Date(),\n        productId: product.id\n      } as ProductFlavor)) || [];\n\n  const handleAddToCart = () => {\n    if (!selectedFlavor) {\n      toast.warning('Por favor selecciona un sabor antes de agregar al carrito')\n      return\n    }\n\n    // For flavor-based inventory, check if selected flavor is still available\n    if (product.hasFlavorInventory) {\n      const selectedFlavorObj = flavorsToShow.find(f => f.name === selectedFlavor)\n      if (selectedFlavorObj && isFlavorOutOfStock(selectedFlavorObj)) {\n        toast.error('El sabor seleccionado ya no está disponible. Por favor selecciona otro sabor.')\n        setSelectedFlavor('') // Clear invalid selection\n        return\n      }\n    }\n\n    addToCart({\n      id: product.id,\n      name: product.name,\n      price: actualPrice,\n      puffs: product.puffs,\n      image: product.image,\n      flavor: selectedFlavor\n    })\n\n    // Reset selection after adding to cart\n    setSelectedFlavor('')\n  }\n\n  return (\n    <div className=\"space-y-3\">\n      <div>\n        <label className=\"text-sm font-medium text-gray-300 block mb-2\">\n          Selecciona tu sabor:\n        </label>\n        <Select value={selectedFlavor} onValueChange={setSelectedFlavor}>\n          <SelectTrigger \n            className=\"w-full bg-gray-800/50 border-purple-500/30 text-white\"\n            data-testid={`select-flavor-${product.id}`}\n          >\n            <SelectValue placeholder=\"Elige un sabor...\" />\n          </SelectTrigger>\n          <SelectContent className=\"bg-gray-800 border-purple-500/30\">\n            {flavorsToShow.map((flavor) => {\n              const isOutOfStock = product.hasFlavorInventory ? isFlavorOutOfStock(flavor) : false;\n              const availableStock = product.hasFlavorInventory ? getFlavorAvailableInventory(flavor) : null;\n              \n              return (\n                <SelectItem \n                  key={flavor.name} \n                  value={flavor.name}\n                  disabled={isOutOfStock}\n                  className={`text-white hover:bg-purple-600/20 hover:text-white hover:font-bold focus:bg-purple-600/20 focus:text-white focus:font-bold ${\n                    isOutOfStock ? 'opacity-50 cursor-not-allowed' : ''\n                  }`}\n                  data-testid={`option-flavor-${product.id}-${flavor.name}`}\n                >\n                  <div className=\"flex justify-between items-center w-full\">\n                    <span>{flavor.name}</span>\n                    {product.hasFlavorInventory && (\n                      <span className={`text-xs ml-2 ${\n                        isOutOfStock ? 'text-red-400' : 'text-green-400'\n                      }`}>\n                        {isOutOfStock ? 'Agotado' : 'Disponible'}\n                      </span>\n                    )}\n                  </div>\n                </SelectItem>\n              );\n            })}\n            {flavorsToShow.length === 0 && (\n              <SelectItem value=\"\" disabled className=\"text-gray-400\">\n                No hay sabores disponibles\n              </SelectItem>\n            )}\n          </SelectContent>\n        </Select>\n      </div>\n\n      <Button \n        className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700\"\n        onClick={handleAddToCart}\n        data-testid={`button-add-cart-${product.id}`}\n      >\n        <ShoppingCart className=\"mr-2 h-4 w-4\" />\n        Agregar al carrito\n      </Button>\n    </div>\n  )\n}","size_bytes":5165},"client/src/contexts/CartContext.tsx":{"content":"import { createContext, useContext, useState, ReactNode } from 'react'\n\ninterface CartItem {\n  id: string\n  name: string\n  price: string\n  puffs: string\n  image: string\n  quantity: number\n  flavor: string\n  cartItemId: string // Para diferenciar mismo producto con diferentes sabores\n}\n\ninterface CartContextType {\n  cart: CartItem[]\n  addToCart: (product: Omit<CartItem, 'quantity' | 'cartItemId'>) => void\n  removeFromCart: (cartItemId: string) => void\n  updateQuantity: (cartItemId: string, quantity: number) => void\n  clearCart: () => void\n  getCartTotal: () => number\n  getCartCount: () => number\n  isCartOpen: boolean\n  openCart: () => void\n  closeCart: () => void\n}\n\nconst CartContext = createContext<CartContextType | undefined>(undefined)\n\nexport function CartProvider({ children }: { children: ReactNode }) {\n  const [cart, setCart] = useState<CartItem[]>([])\n  const [isCartOpen, setIsCartOpen] = useState(false)\n\n  const addToCart = (product: Omit<CartItem, 'quantity' | 'cartItemId'>) => {\n    const cartItemId = `${product.id}-${product.flavor}`\n    setCart(prevCart => {\n      const existingItem = prevCart.find(item => item.cartItemId === cartItemId)\n      if (existingItem) {\n        return prevCart.map(item =>\n          item.cartItemId === cartItemId\n            ? { ...item, quantity: item.quantity + 1 }\n            : item\n        )\n      }\n      return [...prevCart, { ...product, quantity: 1, cartItemId }]\n    })\n  }\n\n  const removeFromCart = (cartItemId: string) => {\n    setCart(prevCart => prevCart.filter(item => item.cartItemId !== cartItemId))\n  }\n\n  const updateQuantity = (cartItemId: string, quantity: number) => {\n    if (quantity <= 0) {\n      removeFromCart(cartItemId)\n      return\n    }\n    setCart(prevCart =>\n      prevCart.map(item =>\n        item.cartItemId === cartItemId ? { ...item, quantity } : item\n      )\n    )\n  }\n\n  const clearCart = () => {\n    setCart([])\n  }\n\n  const getCartTotal = () => {\n    return cart.reduce((total, item) => {\n      const price = parseFloat(item.price.replace('Q', ''))\n      return total + (price * item.quantity)\n    }, 0)\n  }\n\n  const getCartCount = () => {\n    return cart.reduce((count, item) => count + item.quantity, 0)\n  }\n\n  const openCart = () => setIsCartOpen(true)\n  const closeCart = () => setIsCartOpen(false)\n\n  const value: CartContextType = {\n    cart,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart,\n    getCartTotal,\n    getCartCount,\n    isCartOpen,\n    openCart,\n    closeCart\n  }\n\n  return (\n    <CartContext.Provider value={value}>\n      {children}\n    </CartContext.Provider>\n  )\n}\n\nexport function useCart() {\n  const context = useContext(CartContext)\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider')\n  }\n  return context\n}","size_bytes":2795},"client/src/contexts/DistributorContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react'\n\ninterface Distributor {\n  id: string\n  name: string\n  email: string\n  phone: string\n  level: 'agente' | 'distribuidor' | 'socio'\n  discount: string\n  minimumPurchase: string\n  status: 'pending' | 'approved' | 'rejected'\n}\n\ninterface DistributorContextType {\n  distributor: Distributor | null\n  login: (email: string, password: string) => Promise<boolean>\n  logout: () => void\n  isLoading: boolean\n  error: string | null\n}\n\nconst DistributorContext = createContext<DistributorContextType | undefined>(undefined)\n\nexport function DistributorProvider({ children }: { children: ReactNode }) {\n  const [distributor, setDistributor] = useState<Distributor | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    // Check if distributor is already logged in\n    const savedDistributor = localStorage.getItem('distributor')\n    if (savedDistributor) {\n      setDistributor(JSON.parse(savedDistributor))\n    }\n  }, [])\n\n  const login = async (email: string, password: string): Promise<boolean> => {\n    setIsLoading(true)\n    setError(null)\n    \n    try {\n      const response = await fetch('/api/auth/distributor/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      })\n\n      if (response.ok) {\n        const distributorData = await response.json()\n        setDistributor(distributorData)\n        localStorage.setItem('distributor', JSON.stringify(distributorData))\n        return true\n      } else {\n        const errorData = await response.json()\n        setError(errorData.error || 'Error de autenticación')\n        return false\n      }\n    } catch (error) {\n      setError('Error de conexión')\n      return false\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const logout = () => {\n    setDistributor(null)\n    localStorage.removeItem('distributor')\n  }\n\n  const value: DistributorContextType = {\n    distributor,\n    login,\n    logout,\n    isLoading,\n    error\n  }\n\n  return (\n    <DistributorContext.Provider value={value}>\n      {children}\n    </DistributorContext.Provider>\n  )\n}\n\nexport function useDistributor() {\n  const context = useContext(DistributorContext)\n  if (context === undefined) {\n    throw new Error('useDistributor must be used within a DistributorProvider')\n  }\n  return context\n}","size_bytes":2499},"client/src/pages/DistributorLogin.tsx":{"content":"import { useState } from 'react'\nimport { useLocation } from 'wouter'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Loader2, LogIn, Store } from 'lucide-react'\nimport { useDistributor } from '@/contexts/DistributorContext'\n\nexport default function DistributorLogin() {\n  const [, setLocation] = useLocation()\n  const { login, isLoading, error } = useDistributor()\n  const [formData, setFormData] = useState({\n    email: '',\n    password: ''\n  })\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    const success = await login(formData.email, formData.password)\n    if (success) {\n      setLocation('/distributor/dashboard')\n    }\n  }\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target\n    setFormData(prev => ({ ...prev, [name]: value }))\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-900 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Brand Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-purple-600 to-blue-600 rounded-lg mb-4\">\n            <Store className=\"h-8 w-8 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-black text-white mb-2\">\n            <span className=\"bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent\">\n              VAPEOLO\n            </span>\n          </h1>\n          <p className=\"text-gray-400\">Panel de Distribuidores</p>\n        </div>\n\n        {/* Login Form */}\n        <Card className=\"bg-black/60 border-purple-500/20\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-white flex items-center justify-center gap-2\">\n              <LogIn className=\"h-5 w-5\" />\n              Iniciar Sesión\n            </CardTitle>\n            <CardDescription className=\"text-gray-400\">\n              Accede como distribuidor, agente o socio\n            </CardDescription>\n          </CardHeader>\n\n          <CardContent>\n            {error && (\n              <Alert className=\"mb-4 border-red-500/20 bg-red-500/10\">\n                <AlertDescription className=\"text-red-300\">\n                  {error}\n                </AlertDescription>\n              </Alert>\n            )}\n\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"text-gray-300\">\n                  Email\n                </Label>\n                <Input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={handleInputChange}\n                  placeholder=\"tu.email@ejemplo.com\"\n                  className=\"bg-gray-800/50 border-purple-500/30 text-white\"\n                  required\n                  disabled={isLoading}\n                  data-testid=\"input-email\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-gray-300\">\n                  Contraseña\n                </Label>\n                <Input\n                  id=\"password\"\n                  name=\"password\"\n                  type=\"password\"\n                  value={formData.password}\n                  onChange={handleInputChange}\n                  placeholder=\"Tu contraseña\"\n                  className=\"bg-gray-800/50 border-purple-500/30 text-white\"\n                  required\n                  disabled={isLoading}\n                  data-testid=\"input-password\"\n                />\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700\"\n                disabled={isLoading}\n                data-testid=\"button-login\"\n              >\n                {isLoading ? (\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                ) : (\n                  <LogIn className=\"mr-2 h-4 w-4\" />\n                )}\n                {isLoading ? 'Iniciando sesión...' : 'Iniciar Sesión'}\n              </Button>\n            </form>\n\n            {/* Info Footer */}\n            <div className=\"mt-6 p-4 bg-gradient-to-r from-purple-600/10 to-blue-600/10 rounded-lg\">\n              <p className=\"text-sm text-gray-300 text-center\">\n                Si no tienes cuenta, solicita tu membresía como distribuidor en la \n                <span className=\"text-purple-400 font-medium\"> sección de afiliados</span> de nuestra página principal.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}","size_bytes":5053},"client/src/pages/DistributorDashboard.tsx":{"content":"import { useDistributor } from '@/contexts/DistributorContext'\nimport { useLocation } from 'wouter'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { LogOut, User, Percent, DollarSign, Store } from 'lucide-react'\n\nexport default function DistributorDashboard() {\n  const { distributor, logout } = useDistributor()\n  const [, setLocation] = useLocation()\n\n  if (!distributor) {\n    setLocation('/distributor/login')\n    return null\n  }\n\n  const handleLogout = () => {\n    logout()\n    setLocation('/')\n  }\n\n  const getLevelColor = (level: string) => {\n    switch (level) {\n      case 'socio':\n        return 'from-yellow-500 to-orange-500'\n      case 'distribuidor':\n        return 'from-blue-500 to-purple-500'\n      case 'agente':\n        return 'from-green-500 to-teal-500'\n      default:\n        return 'from-gray-500 to-gray-600'\n    }\n  }\n\n  const getLevelName = (level: string) => {\n    switch (level) {\n      case 'socio':\n        return 'Socio'\n      case 'distribuidor':\n        return 'Distribuidor'\n      case 'agente':\n        return 'Agente'\n      default:\n        return level\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-900\">\n      {/* Header */}\n      <div className=\"bg-black/60 border-b border-purple-500/20\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Store className=\"h-8 w-8 text-purple-400\" />\n                <h1 className=\"text-2xl font-black text-white\">\n                  <span className=\"bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent\">\n                    VAPEOLO\n                  </span>\n                </h1>\n              </div>\n              <div className=\"text-gray-400\">|</div>\n              <div>\n                <p className=\"text-sm text-gray-400\">Panel de</p>\n                <p className=\"text-white font-bold\">{getLevelName(distributor.level)}</p>\n              </div>\n            </div>\n            \n            <Button \n              onClick={handleLogout}\n              variant=\"outline\"\n              className=\"border-red-500/30 text-red-400 hover:text-red-300\"\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              Cerrar Sesión\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Welcome Section */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-3xl font-bold text-white mb-2\">\n            ¡Bienvenido, {distributor.name}!\n          </h2>\n          <p className=\"text-gray-400\">\n            Accede a precios preferenciales y gestiona tus pedidos\n          </p>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          {/* Level Card */}\n          <Card className=\"bg-black/60 border-purple-500/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-300\">\n                Nivel de Afiliación\n              </CardTitle>\n              <User className=\"h-4 w-4 text-purple-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center space-x-2\">\n                <Badge className={`bg-gradient-to-r ${getLevelColor(distributor.level)} text-white`}>\n                  {getLevelName(distributor.level)}\n                </Badge>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Discount Card */}\n          <Card className=\"bg-black/60 border-purple-500/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-300\">\n                Tu Descuento\n              </CardTitle>\n              <Percent className=\"h-4 w-4 text-green-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-400\">\n                {distributor.discount}%\n              </div>\n              <p className=\"text-xs text-gray-400\">\n                Sobre precio público\n              </p>\n            </CardContent>\n          </Card>\n\n          {/* Minimum Purchase Card */}\n          <Card className=\"bg-black/60 border-purple-500/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-300\">\n                Compra Mínima\n              </CardTitle>\n              <DollarSign className=\"h-4 w-4 text-blue-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-400\">\n                Q{distributor.minimumPurchase}\n              </div>\n              <p className=\"text-xs text-gray-400\">\n                Pedido mínimo requerido\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {/* Shop Products */}\n          <Card className=\"bg-black/60 border-purple-500/20 hover-elevate\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Store className=\"h-5 w-5\" />\n                Ver Productos\n              </CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Explora nuestro catálogo con precios preferenciales\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button \n                className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700\"\n                onClick={() => setLocation('/?distributor=true')}\n                data-testid=\"button-view-products\"\n              >\n                Ir a la Tienda\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Account Info */}\n          <Card className=\"bg-black/60 border-purple-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <User className=\"h-5 w-5\" />\n                Información de Cuenta\n              </CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Detalles de tu membresía\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              <div>\n                <span className=\"text-gray-400 text-sm\">Email:</span>\n                <p className=\"text-white\">{distributor.email}</p>\n              </div>\n              <div>\n                <span className=\"text-gray-400 text-sm\">Teléfono:</span>\n                <p className=\"text-white\">{distributor.phone}</p>\n              </div>\n              <div>\n                <span className=\"text-gray-400 text-sm\">Estado:</span>\n                <Badge variant=\"outline\" className=\"border-green-500/30 text-green-400\">\n                  {distributor.status === 'approved' ? 'Aprobado' : distributor.status}\n                </Badge>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":7579},"client/src/components/CheckoutForm.tsx":{"content":"import { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { ShoppingBag, ArrowLeft } from 'lucide-react'\n\ninterface CheckoutFormProps {\n  total: number\n  onSubmit: (customerData: CustomerData) => void\n  onBack: () => void\n}\n\nexport interface CustomerData {\n  firstName: string\n  lastName: string\n  phone: string\n  address: string\n  department: string\n}\n\nconst guatemalanDepartments = [\n  'Alta Verapaz',\n  'Baja Verapaz',\n  'Chimaltenango',\n  'Chiquimula',\n  'El Progreso',\n  'Escuintla',\n  'Guatemala',\n  'Huehuetenango',\n  'Izabal',\n  'Jalapa',\n  'Jutiapa',\n  'Petén',\n  'Quetzaltenango',\n  'Quiché',\n  'Retalhuleu',\n  'Sacatepéquez',\n  'San Marcos',\n  'Santa Rosa',\n  'Sololá',\n  'Suchitepéquez',\n  'Totonicapán',\n  'Zacapa'\n]\n\nexport default function CheckoutForm({ total, onSubmit, onBack }: CheckoutFormProps) {\n  const [formData, setFormData] = useState<CustomerData>({\n    firstName: '',\n    lastName: '',\n    phone: '',\n    address: '',\n    department: ''\n  })\n\n  const [errors, setErrors] = useState<Partial<CustomerData>>({})\n\n  const validateForm = () => {\n    const newErrors: Partial<CustomerData> = {}\n    \n    if (!formData.firstName.trim()) newErrors.firstName = 'Nombre es requerido'\n    if (!formData.lastName.trim()) newErrors.lastName = 'Apellido es requerido'\n    if (!formData.phone.trim()) newErrors.phone = 'Número de celular es requerido'\n    if (!formData.address.trim()) newErrors.address = 'Dirección es requerida'\n    if (!formData.department) newErrors.department = 'Departamento es requerido'\n\n    // Validate phone format (Guatemala format)\n    const phoneRegex = /^[0-9]{8}$/\n    if (formData.phone && !phoneRegex.test(formData.phone.replace(/\\s/g, ''))) {\n      newErrors.phone = 'Formato de teléfono inválido (8 dígitos)'\n    }\n\n    setErrors(newErrors)\n    return Object.keys(newErrors).length === 0\n  }\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    if (validateForm()) {\n      onSubmit(formData)\n    }\n  }\n\n  const handleInputChange = (field: keyof CustomerData, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }))\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: undefined }))\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <Button\n          variant=\"outline\"\n          onClick={onBack}\n          className=\"border-purple-500/30 text-white hover:text-white\"\n          data-testid=\"button-back-to-cart\"\n        >\n          <ArrowLeft className=\"mr-2 h-4 w-4\" />\n          Volver al carrito\n        </Button>\n        <div className=\"text-right\">\n          <div className=\"text-2xl font-bold text-green-400\">\n            Total: Q{total.toFixed(2)}\n          </div>\n        </div>\n      </div>\n\n      <Card className=\"bg-purple-900/20 border-purple-500/30\">\n        <CardHeader>\n          <CardTitle className=\"text-white text-xl\">Información de Entrega</CardTitle>\n          <p className=\"text-gray-400\">Complete sus datos para finalizar el pedido</p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {/* Nombre */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"firstName\" className=\"text-white\">Nombre *</Label>\n                <Input\n                  id=\"firstName\"\n                  value={formData.firstName}\n                  onChange={(e) => handleInputChange('firstName', e.target.value)}\n                  className=\"bg-black/60 border-purple-500/30 text-white\"\n                  placeholder=\"Ingresa tu nombre\"\n                  data-testid=\"input-first-name\"\n                />\n                {errors.firstName && (\n                  <p className=\"text-red-400 text-sm\">{errors.firstName}</p>\n                )}\n              </div>\n\n              {/* Apellido */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"lastName\" className=\"text-white\">Apellido *</Label>\n                <Input\n                  id=\"lastName\"\n                  value={formData.lastName}\n                  onChange={(e) => handleInputChange('lastName', e.target.value)}\n                  className=\"bg-black/60 border-purple-500/30 text-white\"\n                  placeholder=\"Ingresa tu apellido\"\n                  data-testid=\"input-last-name\"\n                />\n                {errors.lastName && (\n                  <p className=\"text-red-400 text-sm\">{errors.lastName}</p>\n                )}\n              </div>\n            </div>\n\n            {/* Teléfono */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"phone\" className=\"text-white\">Número de Celular *</Label>\n              <Input\n                id=\"phone\"\n                value={formData.phone}\n                onChange={(e) => handleInputChange('phone', e.target.value)}\n                className=\"bg-black/60 border-purple-500/30 text-white\"\n                placeholder=\"Ej: 12345678\"\n                data-testid=\"input-phone\"\n              />\n              {errors.phone && (\n                <p className=\"text-red-400 text-sm\">{errors.phone}</p>\n              )}\n            </div>\n\n            {/* Dirección */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"address\" className=\"text-white\">Dirección de Entrega *</Label>\n              <Input\n                id=\"address\"\n                value={formData.address}\n                onChange={(e) => handleInputChange('address', e.target.value)}\n                className=\"bg-black/60 border-purple-500/30 text-white\"\n                placeholder=\"Calle, zona, colonia, referencias\"\n                data-testid=\"input-address\"\n              />\n              {errors.address && (\n                <p className=\"text-red-400 text-sm\">{errors.address}</p>\n              )}\n            </div>\n\n            {/* Departamento */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"department\" className=\"text-white\">Departamento *</Label>\n              <Select \n                value={formData.department} \n                onValueChange={(value) => handleInputChange('department', value)}\n              >\n                <SelectTrigger \n                  className=\"bg-black/60 border-purple-500/30 text-white\"\n                  data-testid=\"select-department\"\n                >\n                  <SelectValue placeholder=\"Selecciona tu departamento\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-black border-purple-500/30 text-white\">\n                  {guatemalanDepartments.map((dept) => (\n                    <SelectItem \n                      key={dept} \n                      value={dept}\n                      className=\"text-white focus:bg-purple-500/20\"\n                    >\n                      {dept}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {errors.department && (\n                <p className=\"text-red-400 text-sm\">{errors.department}</p>\n              )}\n            </div>\n\n            <div className=\"pt-4\">\n              <Button \n                type=\"submit\"\n                className=\"w-full bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white font-bold\"\n                data-testid=\"button-complete-order\"\n              >\n                <ShoppingBag className=\"mr-2 h-4 w-4\" />\n                Completar Pedido - Q{total.toFixed(2)}\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":7994},"client/src/pages/Affiliates.tsx":{"content":"import Header from '@/components/Header'\nimport AffiliateProgram from '@/components/AffiliateProgram'\nimport Footer from '@/components/Footer'\n\nexport default function Affiliates() {\n  return (\n    <div className=\"min-h-screen bg-black\">\n      <Header />\n      <div className=\"pt-16\"> {/* Space for fixed header */}\n        <AffiliateProgram />\n      </div>\n      <Footer />\n    </div>\n  )\n}","size_bytes":391},"deployment-guide.md":{"content":"# 🚀 Guía de Deployment VAPEOLO a Hostinger\n\n## ✅ Archivos generados para producción\n- `ecosystem.config.js` - Configuración PM2\n- `package-production.json` - Dependencies para producción\n- Esta guía de deployment\n\n## 📋 Pasos para publicar en Hostinger\n\n### **1. Configurar Base de Datos PostgreSQL**\nEn tu panel de Hostinger:\n1. Ve a **Databases** → **PostgreSQL**\n2. Crea una nueva base de datos llamada `vapeolo_db`\n3. Anota las credenciales: host, puerto, usuario, contraseña\n\n### **2. Configurar Variables de Entorno**\nEn Hostinger, ve a tu aplicación Node.js y configura estas variables:\n```\nNODE_ENV=production\nPORT=3000\nDATABASE_URL=postgresql://usuario:password@host:puerto/vapeolo_db\nPGHOST=tu_host_postgres\nPGPORT=5432\nPGDATABASE=vapeolo_db\nPGUSER=tu_usuario\nPGPASSWORD=tu_password\nSESSION_SECRET=una_clave_secreta_muy_segura\nADMIN_EMAIL=admin@tudominio.com\nADMIN_PASSWORD=password_administrador_seguro\n```\n\n### **3. Preparar archivos para subir**\n1. Descarga este proyecto como ZIP desde Replit\n2. Extrae los archivos en tu computadora\n3. Reemplaza `package.json` con `package-production.json`\n4. Sube todos los archivos a Hostinger via File Manager o FTP\n\n### **4. Instalar dependencias y compilar**\nEn el terminal SSH de Hostinger:\n```bash\nnpm install\nnpm run build\n```\n\n### **5. Configurar PM2 (si está disponible)**\n```bash\nnpm install -g pm2\npm2 start ecosystem.config.js\npm2 startup\npm2 save\n```\n\n### **6. Ejecutar migraciones de base de datos**\n```bash\nnpm run migrate\n```\n\n### **7. Configurar dominio**\nEn Hostinger:\n1. Ve a **Domains** → tu dominio\n2. Apunta los DNS hacia tu aplicación Node.js\n3. Configura SSL/HTTPS\n\n### **8. Iniciar la aplicación**\n```bash\nnpm start\n```\n\n## 🎯 ¡Listo!\nTu sitio VAPEOLO estará disponible en tu dominio con:\n- ✅ E-commerce completo con carrito\n- ✅ Sistema de afiliados\n- ✅ Panel administrativo\n- ✅ Base de datos PostgreSQL\n- ✅ WhatsApp integration\n- ✅ SSL/HTTPS seguro\n\n## 🔧 Comandos útiles\n- Reiniciar: `pm2 restart vapeolo-app`\n- Ver logs: `pm2 logs vapeolo-app`\n- Monitorear: `pm2 monit`","size_bytes":2087},"ecosystem.config.js":{"content":"module.exports = {\n  apps: [{\n    name: 'vapeolo-app',\n    script: 'server/index.js',\n    env: {\n      NODE_ENV: 'production',\n      PORT: 3000\n    },\n    error_file: './logs/err.log',\n    out_file: './logs/out.log',\n    log_file: './logs/combined.log',\n    time: true\n  }]\n}","size_bytes":275},"client/src/pages/AdminHomepage.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  ArrowLeft, \n  Save,\n  Eye,\n  Edit3,\n  Layout,\n  Users,\n  MessageSquare,\n  Phone,\n  Loader2,\n  Navigation,\n  ShoppingBag,\n  UserPlus,\n  Footprints,\n  Menu,\n  Globe,\n  Star,\n  Mail,\n  MapPin,\n  Truck,\n  CreditCard,\n  Clock,\n  Instagram,\n  Facebook\n} from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  type HomepageContent,\n  updateHomepageContentSchema,\n  type UpdateHomepageContent,\n  type NavigationContent,\n  type HeroFeatures,\n  type AboutContent,\n  type AboutHighlight,\n  type AboutStats,\n  type TestimonialsContent,\n  type ContactContent,\n  type ContactInfo,\n  type ShippingInfo,\n  type AffiliatesContent,\n  type AffiliateLevel,\n  type FooterContent,\n  type FooterLinkGroup\n} from \"@shared/schema\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport AdminProfileDropdown from \"@/components/AdminProfileDropdown\";\n\nexport default function AdminHomepage() {\n  const { user, token } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  // Redirect if not logged in\n  if (!user) {\n    setLocation(\"/admin/login\");\n    return null;\n  }\n\n  const { data: homepageContent, isLoading } = useQuery({\n    queryKey: [\"/api/admin/homepage-content\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/homepage-content\", {\n        headers: {\n          Authorization: token || \"\",\n        },\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch homepage content\");\n      }\n      const result = await response.json();\n      return result.data as HomepageContent[];\n    },\n  });\n\n  const updateContentMutation = useMutation({\n    mutationFn: async ({ section, data }: { section: string; data: UpdateHomepageContent }) => {\n      const response = await fetch(`/api/admin/homepage-content/${section}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token || \"\",\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to update content\");\n      }\n      return response.json();\n    },\n    onSuccess: (_, { section }) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/homepage-content\"] });\n      toast({\n        title: \"Contenido actualizado\",\n        description: `La sección ${section} se ha actualizado correctamente`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo actualizar el contenido. Por favor, inténtalo de nuevo.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getContentBySection = (section: string): HomepageContent | undefined => {\n    return homepageContent?.find((content) => content.section === section);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black\">\n      {/* Header */}\n      <header className=\"bg-gray-900 border-b border-purple-500/20 p-4\">\n        <div className=\"max-w-7xl mx-auto flex justify-between items-center\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              onClick={() => setLocation(\"/admin\")}\n              className=\"text-purple-400 hover:text-purple-300 hover:bg-purple-500/10\"\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Volver al Dashboard\n            </Button>\n            <Separator orientation=\"vertical\" className=\"h-6 bg-purple-500/20\" />\n            <div>\n              <h1 className=\"text-2xl font-bold text-white\">Gestión de Contenido Completa</h1>\n              <p className=\"text-gray-400\">Edita TODO el texto del homepage desde aquí</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <AdminProfileDropdown />\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto p-6\">\n        {isLoading ? (\n          <div className=\"space-y-6\">\n            {[1, 2, 3, 4].map((i) => (\n              <Card key={i} className=\"bg-gray-900 border-purple-500/20\">\n                <CardHeader>\n                  <Skeleton className=\"h-6 w-48 bg-gray-800\" />\n                  <Skeleton className=\"h-4 w-96 bg-gray-800\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <Skeleton className=\"h-10 w-full bg-gray-800\" />\n                    <Skeleton className=\"h-10 w-full bg-gray-800\" />\n                    <Skeleton className=\"h-24 w-full bg-gray-800\" />\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-4 lg:grid-cols-8 bg-gray-900 border-purple-500/20\">\n              <TabsTrigger value=\"overview\" className=\"text-xs\">Vista General</TabsTrigger>\n              <TabsTrigger value=\"navigation\" className=\"text-xs\">Navegación</TabsTrigger>\n              <TabsTrigger value=\"hero\" className=\"text-xs\">Hero</TabsTrigger>\n              <TabsTrigger value=\"about\" className=\"text-xs\">Nosotros</TabsTrigger>\n              <TabsTrigger value=\"testimonials\" className=\"text-xs\">Testimonios</TabsTrigger>\n              <TabsTrigger value=\"contact\" className=\"text-xs\">Contacto</TabsTrigger>\n              <TabsTrigger value=\"affiliates\" className=\"text-xs\">Afiliados</TabsTrigger>\n              <TabsTrigger value=\"footer\" className=\"text-xs\">Footer</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"overview\" className=\"mt-6\">\n              <OverviewSection \n                homepageContent={homepageContent} \n                updateMutation={updateContentMutation}\n                token={token}\n              />\n            </TabsContent>\n            \n            <TabsContent value=\"navigation\" className=\"mt-6\">\n              <NavigationSection \n                content={getContentBySection(\"navigation\")} \n                updateMutation={updateContentMutation}\n                token={token}\n              />\n            </TabsContent>\n            \n            <TabsContent value=\"hero\" className=\"mt-6\">\n              <HeroSection \n                content={getContentBySection(\"hero\")} \n                updateMutation={updateContentMutation}\n                token={token}\n              />\n            </TabsContent>\n            \n            <TabsContent value=\"about\" className=\"mt-6\">\n              <AboutSection \n                content={getContentBySection(\"about\")} \n                updateMutation={updateContentMutation}\n                token={token}\n              />\n            </TabsContent>\n            \n            <TabsContent value=\"testimonials\" className=\"mt-6\">\n              <TestimonialsSection \n                content={getContentBySection(\"testimonials\")} \n                updateMutation={updateContentMutation}\n                token={token}\n              />\n            </TabsContent>\n            \n            <TabsContent value=\"contact\" className=\"mt-6\">\n              <ContactSection \n                content={getContentBySection(\"contact\")} \n                updateMutation={updateContentMutation}\n                token={token}\n              />\n            </TabsContent>\n            \n            <TabsContent value=\"affiliates\" className=\"mt-6\">\n              <AffiliatesSection \n                content={getContentBySection(\"affiliates\")} \n                updateMutation={updateContentMutation}\n                token={token}\n              />\n            </TabsContent>\n            \n            <TabsContent value=\"footer\" className=\"mt-6\">\n              <FooterSection \n                content={getContentBySection(\"footer\")} \n                updateMutation={updateContentMutation}\n                token={token}\n              />\n            </TabsContent>\n          </Tabs>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Helper interfaces for section props\ninterface SectionProps {\n  content: HomepageContent | undefined;\n  updateMutation: any;\n  token: string | null;\n}\n\ninterface OverviewSectionProps {\n  homepageContent: any;\n  updateMutation: any;\n  token: string | null;\n}\n\n// Overview Section Component\nfunction OverviewSection({ homepageContent, updateMutation, token }: OverviewSectionProps) {\n  const sections = [\n    { key: \"navigation\", title: \"Navegación\", icon: Navigation, description: \"Menú y botones del header\" },\n    { key: \"hero\", title: \"Hero\", icon: Layout, description: \"Sección principal con título y botones\" },\n    { key: \"about\", title: \"Nosotros\", icon: Users, description: \"Información de la empresa\" },\n    { key: \"testimonials\", title: \"Testimonios\", icon: Star, description: \"Reseñas y redes sociales\" },\n    { key: \"contact\", title: \"Contacto\", icon: Phone, description: \"Información de contacto completa\" },\n    { key: \"affiliates\", title: \"Afiliados\", icon: UserPlus, description: \"Programa de afiliación\" },\n    { key: \"footer\", title: \"Footer\", icon: Footprints, description: \"Pie de página y enlaces\" },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"bg-gray-900 border-purple-500/20\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center gap-2\">\n            <Layout className=\"h-5 w-5\" />\n            Vista General del Contenido\n          </CardTitle>\n          <CardDescription className=\"text-gray-400\">\n            Gestiona todo el contenido de texto del homepage desde esta interfaz completa\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"mb-6 p-4 bg-purple-500/10 border border-purple-500/20 rounded-lg\">\n            <h3 className=\"text-white font-medium mb-2\">🎯 Sistema de Gestión Completo</h3>\n            <p className=\"text-gray-300 text-sm mb-3\">\n              Ahora puedes editar absolutamente TODO el texto que aparece en el homepage:\n            </p>\n            <ul className=\"text-gray-400 text-sm space-y-1\">\n              <li>• Menú de navegación y botones del header</li>\n              <li>• Títulos, subtítulos y características del hero</li>\n              <li>• Información completa de contacto (WhatsApp, email, dirección)</li>\n              <li>• Todos los textos de formularios y etiquetas</li>\n              <li>• Enlaces del footer y contenido legal</li>\n              <li>• Contenido de redes sociales y testimonios</li>\n            </ul>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {sections.map((section) => {\n              const Icon = section.icon;\n              const content = homepageContent?.find((c: any) => c.section === section.key);\n              \n              return (\n                <Card key={section.key} className=\"bg-gray-800/50 border-purple-500/10 hover:border-purple-500/30 transition-colors\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center space-x-3 mb-3\">\n                      <div className=\"w-8 h-8 bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg flex items-center justify-center\">\n                        <Icon className=\"h-4 w-4 text-white\" />\n                      </div>\n                      <div>\n                        <h3 className=\"text-white font-medium\">{section.title}</h3>\n                        <p className=\"text-xs text-gray-400\">{section.description}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                        content?.active \n                          ? \"bg-green-500/20 text-green-400\" \n                          : \"bg-red-500/20 text-red-400\"\n                      }`}>\n                        {content?.active ? \"Activo\" : \"Inactivo\"}\n                      </span>\n                      <p className=\"text-xs text-gray-500\">\n                        {content?.title ? `\"${content.title.substring(0, 20)}...\"` : \"Sin contenido\"}\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n// Navigation Section Component\nfunction NavigationSection({ content, updateMutation, token }: SectionProps) {\n  const [isEditing, setIsEditing] = useState(false);\n  \n  // Parse current navigation content\n  let navigationData: NavigationContent = {\n    logoAlt: 'VAPEOLO',\n    menuItems: {\n      inicio: 'Inicio',\n      productos: 'Productos',\n      afiliados: 'Afiliados',\n      contacto: 'Contacto'\n    },\n    buttons: {\n      cart: 'Carrito',\n      login: 'Iniciar Sesión',\n      mobileMenu: 'Menú'\n    }\n  };\n  \n  try {\n    if (content?.content) {\n      navigationData = JSON.parse(content.content);\n    }\n  } catch {\n    // Use default if parsing fails\n  }\n  \n  const form = useForm({\n    defaultValues: {\n      active: content?.active ?? true,\n      logoAlt: navigationData.logoAlt,\n      menuInicio: navigationData.menuItems.inicio,\n      menuProductos: navigationData.menuItems.productos,\n      menuAfiliados: navigationData.menuItems.afiliados,\n      menuContacto: navigationData.menuItems.contacto,\n      buttonCart: navigationData.buttons.cart,\n      buttonLogin: navigationData.buttons.login,\n      buttonMobileMenu: navigationData.buttons.mobileMenu\n    }\n  });\n  \n  const onSubmit = (data: any) => {\n    const navigationContent: NavigationContent = {\n      logoAlt: data.logoAlt,\n      menuItems: {\n        inicio: data.menuInicio,\n        productos: data.menuProductos,\n        afiliados: data.menuAfiliados,\n        contacto: data.menuContacto\n      },\n      buttons: {\n        cart: data.buttonCart,\n        login: data.buttonLogin,\n        mobileMenu: data.buttonMobileMenu\n      }\n    };\n    \n    updateMutation.mutate({\n      section: 'navigation',\n      data: {\n        title: 'Navegación',\n        content: JSON.stringify(navigationContent),\n        active: data.active\n      }\n    });\n    \n    setIsEditing(false);\n  };\n  \n  return (\n    <Card className=\"bg-gray-900 border-purple-500/20\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg flex items-center justify-center\">\n              <Navigation className=\"h-5 w-5 text-white\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-white\">Navegación del Header</CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Configura textos del menú principal, botones y logo\n              </CardDescription>\n            </div>\n          </div>\n          <Button\n            variant=\"outline\"\n            onClick={() => setIsEditing(!isEditing)}\n            className=\"border-purple-500/50 text-purple-400 hover:bg-purple-500/10\"\n          >\n            <Edit3 className=\"w-4 h-4 mr-2\" />\n            {isEditing ? 'Cancelar' : 'Editar'}\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {!isEditing ? (\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label className=\"text-sm font-medium text-gray-300\">Logo Alt Text</Label>\n                <p className=\"text-white mt-1\">{navigationData.logoAlt}</p>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium text-gray-300\">Estado</Label>\n                <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium mt-1 ${\n                  content?.active ? \"bg-green-500/20 text-green-400\" : \"bg-red-500/20 text-red-400\"\n                }`}>\n                  {content?.active ? \"Activo\" : \"Inactivo\"}\n                </span>\n              </div>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">Elementos del Menú</Label>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-2\">\n                <div className=\"p-3 bg-gray-800/50 rounded-lg\">\n                  <p className=\"text-xs text-gray-400\">Inicio</p>\n                  <p className=\"text-white\">{navigationData.menuItems.inicio}</p>\n                </div>\n                <div className=\"p-3 bg-gray-800/50 rounded-lg\">\n                  <p className=\"text-xs text-gray-400\">Productos</p>\n                  <p className=\"text-white\">{navigationData.menuItems.productos}</p>\n                </div>\n                <div className=\"p-3 bg-gray-800/50 rounded-lg\">\n                  <p className=\"text-xs text-gray-400\">Afiliados</p>\n                  <p className=\"text-white\">{navigationData.menuItems.afiliados}</p>\n                </div>\n                <div className=\"p-3 bg-gray-800/50 rounded-lg\">\n                  <p className=\"text-xs text-gray-400\">Contacto</p>\n                  <p className=\"text-white\">{navigationData.menuItems.contacto}</p>\n                </div>\n              </div>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">Botones</Label>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-2\">\n                <div className=\"p-3 bg-gray-800/50 rounded-lg\">\n                  <p className=\"text-xs text-gray-400\">Carrito</p>\n                  <p className=\"text-white\">{navigationData.buttons.cart}</p>\n                </div>\n                <div className=\"p-3 bg-gray-800/50 rounded-lg\">\n                  <p className=\"text-xs text-gray-400\">Login</p>\n                  <p className=\"text-white\">{navigationData.buttons.login}</p>\n                </div>\n                <div className=\"p-3 bg-gray-800/50 rounded-lg\">\n                  <p className=\"text-xs text-gray-400\">Menú Móvil</p>\n                  <p className=\"text-white\">{navigationData.buttons.mobileMenu}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"logoAlt\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-white\">Logo Alt Text</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          className=\"bg-gray-800/50 border-purple-500/30 text-white\"\n                          placeholder=\"Texto alternativo del logo\"\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"active\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border border-purple-500/20 p-4\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel className=\"text-base text-white\">Activo</FormLabel>\n                      </div>\n                      <FormControl>\n                        <Switch checked={field.value} onCheckedChange={field.onChange} />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <div>\n                <Label className=\"text-white font-medium\">Elementos del Menú</Label>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-2\">\n                  <FormField\n                    control={form.control}\n                    name=\"menuInicio\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Inicio</FormLabel>\n                        <FormControl>\n                          <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"menuProductos\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Productos</FormLabel>\n                        <FormControl>\n                          <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"menuAfiliados\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Afiliados</FormLabel>\n                        <FormControl>\n                          <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"menuContacto\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Contacto</FormLabel>\n                        <FormControl>\n                          <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n              \n              <div>\n                <Label className=\"text-white font-medium\">Botones</Label>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-2\">\n                  <FormField\n                    control={form.control}\n                    name=\"buttonCart\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Carrito</FormLabel>\n                        <FormControl>\n                          <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"buttonLogin\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Login</FormLabel>\n                        <FormControl>\n                          <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"buttonMobileMenu\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Menú Móvil</FormLabel>\n                        <FormControl>\n                          <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n              \n              <Button\n                type=\"submit\"\n                className=\"bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700\"\n                disabled={updateMutation.isPending}\n              >\n                {updateMutation.isPending && <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />}\n                <Save className=\"w-4 h-4 mr-2\" />\n                Guardar Cambios\n              </Button>\n            </form>\n          </Form>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n// Hero Section Component\nfunction HeroSection({ content, updateMutation, token }: SectionProps) {\n  const [isEditing, setIsEditing] = useState(false);\n  \n  // Parse current hero content\n  let heroFeatures: HeroFeatures = {\n    flavors: 'Más de 25 sabores',\n    puffs: 'Hasta 20,000 puffs',\n    shipping: 'Envíos a todo el país'\n  };\n  \n  try {\n    if (content?.content) {\n      heroFeatures = JSON.parse(content.content);\n    }\n  } catch {\n    // Use default if parsing fails\n  }\n  \n  const form = useForm({\n    defaultValues: {\n      active: content?.active ?? true,\n      title: content?.title || 'VAPEOLO:',\n      subtitle: content?.subtitle || 'Donde la experiencia y el sabor se fusionan',\n      description: content?.description || '15 años diseñando los mejores cigarrillos electrónicos del mercado',\n      buttonText: content?.buttonText || 'Ver Productos',\n      buttonSecondaryText: content?.buttonSecondaryText || 'Unirme como Afiliado',\n      featureFlavors: heroFeatures.flavors,\n      featurePuffs: heroFeatures.puffs,\n      featureShipping: heroFeatures.shipping\n    }\n  });\n  \n  const onSubmit = (data: any) => {\n    const features: HeroFeatures = {\n      flavors: data.featureFlavors,\n      puffs: data.featurePuffs,\n      shipping: data.featureShipping\n    };\n    \n    updateMutation.mutate({\n      section: 'hero',\n      data: {\n        title: data.title,\n        subtitle: data.subtitle,\n        description: data.description,\n        buttonText: data.buttonText,\n        buttonSecondaryText: data.buttonSecondaryText,\n        content: JSON.stringify(features),\n        active: data.active\n      }\n    });\n    \n    setIsEditing(false);\n  };\n  \n  return (\n    <Card className=\"bg-gray-900 border-purple-500/20\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg flex items-center justify-center\">\n              <Layout className=\"h-5 w-5 text-white\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-white\">Sección Hero Principal</CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Título principal, subtítulo, características destacadas y botones de acción\n              </CardDescription>\n            </div>\n          </div>\n          <Button\n            variant=\"outline\"\n            onClick={() => setIsEditing(!isEditing)}\n            className=\"border-purple-500/50 text-purple-400 hover:bg-purple-500/10\"\n          >\n            <Edit3 className=\"w-4 h-4 mr-2\" />\n            {isEditing ? 'Cancelar' : 'Editar'}\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {!isEditing ? (\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label className=\"text-sm font-medium text-gray-300\">Título Principal</Label>\n                <p className=\"text-white mt-1 text-lg font-bold\">{content?.title}</p>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium text-gray-300\">Estado</Label>\n                <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium mt-1 ${\n                  content?.active ? \"bg-green-500/20 text-green-400\" : \"bg-red-500/20 text-red-400\"\n                }`}>\n                  {content?.active ? \"Activo\" : \"Inactivo\"}\n                </span>\n              </div>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">Subtítulo</Label>\n              <p className=\"text-gray-300 mt-1\">{content?.subtitle}</p>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">Descripción</Label>\n              <p className=\"text-gray-300 mt-1\">{content?.description}</p>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">Botones</Label>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-2\">\n                <div className=\"p-3 bg-gray-800/50 rounded-lg\">\n                  <p className=\"text-xs text-gray-400\">Botón Principal</p>\n                  <p className=\"text-purple-300\">{content?.buttonText}</p>\n                </div>\n                <div className=\"p-3 bg-gray-800/50 rounded-lg\">\n                  <p className=\"text-xs text-gray-400\">Botón Secundario</p>\n                  <p className=\"text-blue-300\">{content?.buttonSecondaryText}</p>\n                </div>\n              </div>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">Características Destacadas</Label>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-2\">\n                <div className=\"p-3 bg-gray-800/50 rounded-lg\">\n                  <p className=\"text-xs text-gray-400\">Sabores</p>\n                  <p className=\"text-white\">{heroFeatures.flavors}</p>\n                </div>\n                <div className=\"p-3 bg-gray-800/50 rounded-lg\">\n                  <p className=\"text-xs text-gray-400\">Puffs</p>\n                  <p className=\"text-white\">{heroFeatures.puffs}</p>\n                </div>\n                <div className=\"p-3 bg-gray-800/50 rounded-lg\">\n                  <p className=\"text-xs text-gray-400\">Envíos</p>\n                  <p className=\"text-white\">{heroFeatures.shipping}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"active\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border border-purple-500/20 p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base text-white\">Sección Activa</FormLabel>\n                    </div>\n                    <FormControl>\n                      <Switch checked={field.value} onCheckedChange={field.onChange} />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Título Principal *</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        className=\"bg-gray-800/50 border-purple-500/30 text-white\"\n                        placeholder=\"Ej: VAPEOLO:\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"subtitle\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Subtítulo *</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        className=\"bg-gray-800/50 border-purple-500/30 text-white\"\n                        placeholder=\"Ej: Donde la experiencia y el sabor se fusionan\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Descripción</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        {...field}\n                        className=\"bg-gray-800/50 border-purple-500/30 text-white\"\n                        placeholder=\"Descripción adicional del hero\"\n                        rows={3}\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"buttonText\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-white\">Texto Botón Principal</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          className=\"bg-gray-800/50 border-purple-500/30 text-white\"\n                          placeholder=\"Ej: Ver Productos\"\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"buttonSecondaryText\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-white\">Texto Botón Secundario</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          className=\"bg-gray-800/50 border-purple-500/30 text-white\"\n                          placeholder=\"Ej: Unirme como Afiliado\"\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <div>\n                <Label className=\"text-white font-medium\">Características Destacadas</Label>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-2\">\n                  <FormField\n                    control={form.control}\n                    name=\"featureFlavors\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Sabores</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            className=\"bg-gray-800/50 border-purple-500/30 text-white\"\n                            placeholder=\"Ej: Más de 25 sabores\"\n                          />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"featurePuffs\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Puffs</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            className=\"bg-gray-800/50 border-purple-500/30 text-white\"\n                            placeholder=\"Ej: Hasta 20,000 puffs\"\n                          />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"featureShipping\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Envíos</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            className=\"bg-gray-800/50 border-purple-500/30 text-white\"\n                            placeholder=\"Ej: Envíos a todo el país\"\n                          />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n              \n              <Button\n                type=\"submit\"\n                className=\"bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700\"\n                disabled={updateMutation.isPending}\n              >\n                {updateMutation.isPending && <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />}\n                <Save className=\"w-4 h-4 mr-2\" />\n                Guardar Cambios\n              </Button>\n            </form>\n          </Form>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n// About Section Component\nfunction AboutSection({ content, updateMutation, token }: SectionProps) {\n  const [isEditing, setIsEditing] = useState(false);\n  \n  // Parse current about content\n  let aboutData: AboutContent = {\n    highlights: [\n      { title: \"Presencia en más de 10 países\", description: \"Distribuyendo experiencias únicas a nivel internacional\" },\n      { title: \"Baterías de larga duración\", description: \"Tecnología avanzada para máximo rendimiento\" },\n      { title: \"Hasta 20,000 puffs por dispositivo\", description: \"La duración más larga del mercado\" },\n      { title: \"Garantía de calidad\", description: \"15 años de experiencia y excelencia comprobada\" }\n    ],\n    stats: {\n      experience: \"Años de experiencia\",\n      flavors: \"Sabores disponibles\",\n      countries: \"Países con presencia\"\n    }\n  };\n  \n  try {\n    if (content?.content) {\n      aboutData = JSON.parse(content.content);\n    }\n  } catch {\n    // Use default if parsing fails\n  }\n  \n  const form = useForm({\n    defaultValues: {\n      active: content?.active ?? true,\n      title: content?.title || '¿Quiénes somos?',\n      subtitle: content?.subtitle || 'VAPEOLO es distribuidora oficial de LAVIE, una marca con más de 15 años de innovación en diseño y fabricación de vapes.',\n      description: content?.description || 'Nuestra misión: redefinir el vapeo en Latinoamérica',\n      highlight1Title: aboutData.highlights[0]?.title || '',\n      highlight1Desc: aboutData.highlights[0]?.description || '',\n      highlight2Title: aboutData.highlights[1]?.title || '',\n      highlight2Desc: aboutData.highlights[1]?.description || '',\n      highlight3Title: aboutData.highlights[2]?.title || '',\n      highlight3Desc: aboutData.highlights[2]?.description || '',\n      highlight4Title: aboutData.highlights[3]?.title || '',\n      highlight4Desc: aboutData.highlights[3]?.description || '',\n      statExperience: aboutData.stats.experience,\n      statFlavors: aboutData.stats.flavors,\n      statCountries: aboutData.stats.countries\n    }\n  });\n  \n  const onSubmit = (data: any) => {\n    const aboutContent: AboutContent = {\n      highlights: [\n        { title: data.highlight1Title, description: data.highlight1Desc },\n        { title: data.highlight2Title, description: data.highlight2Desc },\n        { title: data.highlight3Title, description: data.highlight3Desc },\n        { title: data.highlight4Title, description: data.highlight4Desc }\n      ],\n      stats: {\n        experience: data.statExperience,\n        flavors: data.statFlavors,\n        countries: data.statCountries\n      }\n    };\n    \n    updateMutation.mutate({\n      section: 'about',\n      data: {\n        title: data.title,\n        subtitle: data.subtitle,\n        description: data.description,\n        content: JSON.stringify(aboutContent),\n        active: data.active\n      }\n    });\n    \n    setIsEditing(false);\n  };\n  \n  return (\n    <Card className=\"bg-gray-900 border-purple-500/20\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg flex items-center justify-center\">\n              <Users className=\"h-5 w-5 text-white\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-white\">Sección Nosotros</CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Información de empresa, destacados y estadísticas\n              </CardDescription>\n            </div>\n          </div>\n          <Button\n            variant=\"outline\"\n            onClick={() => setIsEditing(!isEditing)}\n            className=\"border-purple-500/50 text-purple-400 hover:bg-purple-500/10\"\n          >\n            <Edit3 className=\"w-4 h-4 mr-2\" />\n            {isEditing ? 'Cancelar' : 'Editar'}\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {!isEditing ? (\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label className=\"text-sm font-medium text-gray-300\">Título</Label>\n                <p className=\"text-white mt-1 text-lg font-bold\">{content?.title}</p>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium text-gray-300\">Estado</Label>\n                <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium mt-1 ${\n                  content?.active ? \"bg-green-500/20 text-green-400\" : \"bg-red-500/20 text-red-400\"\n                }`}>\n                  {content?.active ? \"Activo\" : \"Inactivo\"}\n                </span>\n              </div>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">Subtítulo</Label>\n              <p className=\"text-gray-300 mt-1\">{content?.subtitle}</p>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">Descripción</Label>\n              <p className=\"text-gray-300 mt-1\">{content?.description}</p>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">Destacados</Label>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-2\">\n                {aboutData.highlights.map((highlight, idx) => (\n                  <div key={idx} className=\"p-3 bg-gray-800/50 rounded-lg\">\n                    <p className=\"text-white font-medium text-sm\">{highlight.title}</p>\n                    <p className=\"text-gray-400 text-xs mt-1\">{highlight.description}</p>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">Estadísticas</Label>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-2\">\n                <div className=\"p-3 bg-gray-800/50 rounded-lg\">\n                  <p className=\"text-xs text-gray-400\">Experiencia</p>\n                  <p className=\"text-white\">{aboutData.stats.experience}</p>\n                </div>\n                <div className=\"p-3 bg-gray-800/50 rounded-lg\">\n                  <p className=\"text-xs text-gray-400\">Sabores</p>\n                  <p className=\"text-white\">{aboutData.stats.flavors}</p>\n                </div>\n                <div className=\"p-3 bg-gray-800/50 rounded-lg\">\n                  <p className=\"text-xs text-gray-400\">Países</p>\n                  <p className=\"text-white\">{aboutData.stats.countries}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"active\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border border-purple-500/20 p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base text-white\">Sección Activa</FormLabel>\n                    </div>\n                    <FormControl>\n                      <Switch checked={field.value} onCheckedChange={field.onChange} />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Título *</FormLabel>\n                    <FormControl>\n                      <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"subtitle\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Subtítulo</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" rows={2} />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Descripción</FormLabel>\n                    <FormControl>\n                      <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              \n              <div>\n                <Label className=\"text-white font-medium\">Destacados (4 elementos)</Label>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-2\">\n                  {[1, 2, 3, 4].map((num) => (\n                    <div key={num} className=\"space-y-2 p-4 bg-gray-800/30 rounded-lg\">\n                      <FormField\n                        control={form.control}\n                        name={`highlight${num}Title` as any}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-300\">Título {num}</FormLabel>\n                            <FormControl>\n                              <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white text-sm\" />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name={`highlight${num}Desc` as any}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-300\">Descripción {num}</FormLabel>\n                            <FormControl>\n                              <Textarea {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white text-sm\" rows={2} />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  ))}\n                </div>\n              </div>\n              \n              <div>\n                <Label className=\"text-white font-medium\">Estadísticas</Label>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-2\">\n                  <FormField\n                    control={form.control}\n                    name=\"statExperience\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Años Experiencia</FormLabel>\n                        <FormControl>\n                          <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"statFlavors\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Sabores</FormLabel>\n                        <FormControl>\n                          <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"statCountries\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Países</FormLabel>\n                        <FormControl>\n                          <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n              \n              <Button\n                type=\"submit\"\n                className=\"bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700\"\n                disabled={updateMutation.isPending}\n              >\n                {updateMutation.isPending && <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />}\n                <Save className=\"w-4 h-4 mr-2\" />\n                Guardar Cambios\n              </Button>\n            </form>\n          </Form>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n// Testimonials Section Component\nfunction TestimonialsSection({ content, updateMutation, token }: SectionProps) {\n  const [isEditing, setIsEditing] = useState(false);\n  \n  // Parse current testimonials content\n  let testimonialsData: TestimonialsContent = {\n    socialPrompt: 'Síguenos en redes sociales',\n    socialPlatforms: [\n      { platform: \"Instagram\", handle: \"@lavievapes.gt\", followers: \"45.2K\" },\n      { platform: \"TikTok\", handle: \"@lavievapes\", followers: \"32.8K\" },\n      { platform: \"Facebook\", handle: \"LAVIE Vapes Guatemala\", followers: \"28.1K\" }\n    ],\n    ctaPrompt: 'Síguenos para contenido exclusivo',\n    ctaFeatures: '📸 Fotos de clientes • 🎥 Reviews y unboxing • 🎁 Promos y giveaways'\n  };\n  \n  try {\n    if (content?.content) {\n      testimonialsData = JSON.parse(content.content);\n    }\n  } catch {\n    // Use default if parsing fails\n  }\n  \n  const form = useForm({\n    defaultValues: {\n      active: content?.active ?? true,\n      title: content?.title || 'Testimonios',\n      subtitle: content?.subtitle || 'Lo que dicen nuestros clientes y socios',\n      socialPrompt: testimonialsData.socialPrompt,\n      platform1: testimonialsData.socialPlatforms[0]?.platform || '',\n      handle1: testimonialsData.socialPlatforms[0]?.handle || '',\n      followers1: testimonialsData.socialPlatforms[0]?.followers || '',\n      platform2: testimonialsData.socialPlatforms[1]?.platform || '',\n      handle2: testimonialsData.socialPlatforms[1]?.handle || '',\n      followers2: testimonialsData.socialPlatforms[1]?.followers || '',\n      platform3: testimonialsData.socialPlatforms[2]?.platform || '',\n      handle3: testimonialsData.socialPlatforms[2]?.handle || '',\n      followers3: testimonialsData.socialPlatforms[2]?.followers || '',\n      ctaPrompt: testimonialsData.ctaPrompt,\n      ctaFeatures: testimonialsData.ctaFeatures\n    }\n  });\n  \n  const onSubmit = (data: any) => {\n    const testimonialsContent: TestimonialsContent = {\n      socialPrompt: data.socialPrompt,\n      socialPlatforms: [\n        { platform: data.platform1, handle: data.handle1, followers: data.followers1 },\n        { platform: data.platform2, handle: data.handle2, followers: data.followers2 },\n        { platform: data.platform3, handle: data.handle3, followers: data.followers3 }\n      ],\n      ctaPrompt: data.ctaPrompt,\n      ctaFeatures: data.ctaFeatures\n    };\n    \n    updateMutation.mutate({\n      section: 'testimonials',\n      data: {\n        title: data.title,\n        subtitle: data.subtitle,\n        content: JSON.stringify(testimonialsContent),\n        active: data.active\n      }\n    });\n    \n    setIsEditing(false);\n  };\n  \n  return (\n    <Card className=\"bg-gray-900 border-purple-500/20\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg flex items-center justify-center\">\n              <Star className=\"h-5 w-5 text-white\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-white\">Sección Testimonios</CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Reseñas, redes sociales y llamadas a la acción\n              </CardDescription>\n            </div>\n          </div>\n          <Button\n            variant=\"outline\"\n            onClick={() => setIsEditing(!isEditing)}\n            className=\"border-purple-500/50 text-purple-400 hover:bg-purple-500/10\"\n          >\n            <Edit3 className=\"w-4 h-4 mr-2\" />\n            {isEditing ? 'Cancelar' : 'Editar'}\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {!isEditing ? (\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label className=\"text-sm font-medium text-gray-300\">Título</Label>\n                <p className=\"text-white mt-1\">{content?.title}</p>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium text-gray-300\">Estado</Label>\n                <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium mt-1 ${\n                  content?.active ? \"bg-green-500/20 text-green-400\" : \"bg-red-500/20 text-red-400\"\n                }`}>\n                  {content?.active ? \"Activo\" : \"Inactivo\"}\n                </span>\n              </div>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">Subtítulo</Label>\n              <p className=\"text-gray-300 mt-1\">{content?.subtitle}</p>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">Prompt de Redes Sociales</Label>\n              <p className=\"text-gray-300 mt-1\">{testimonialsData.socialPrompt}</p>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">Plataformas Sociales</Label>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-2\">\n                {testimonialsData.socialPlatforms.map((platform, idx) => (\n                  <div key={idx} className=\"p-3 bg-gray-800/50 rounded-lg\">\n                    <p className=\"text-white font-medium text-sm\">{platform.platform}</p>\n                    <p className=\"text-gray-400 text-xs\">{platform.handle}</p>\n                    <p className=\"text-purple-300 text-xs\">{platform.followers} seguidores</p>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">CTA y Características</Label>\n              <div className=\"mt-2 space-y-2\">\n                <p className=\"text-gray-300\">{testimonialsData.ctaPrompt}</p>\n                <p className=\"text-gray-400 text-sm\">{testimonialsData.ctaFeatures}</p>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"active\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border border-purple-500/20 p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base text-white\">Sección Activa</FormLabel>\n                    </div>\n                    <FormControl>\n                      <Switch checked={field.value} onCheckedChange={field.onChange} />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Título *</FormLabel>\n                    <FormControl>\n                      <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"subtitle\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Subtítulo</FormLabel>\n                    <FormControl>\n                      <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"socialPrompt\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Prompt Redes Sociales</FormLabel>\n                    <FormControl>\n                      <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              \n              <div>\n                <Label className=\"text-white font-medium\">Plataformas Sociales (3 plataformas)</Label>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-2\">\n                  {[1, 2, 3].map((num) => (\n                    <div key={num} className=\"space-y-2 p-4 bg-gray-800/30 rounded-lg\">\n                      <FormField\n                        control={form.control}\n                        name={`platform${num}` as any}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-300\">Plataforma {num}</FormLabel>\n                            <FormControl>\n                              <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white text-sm\" />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name={`handle${num}` as any}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-300\">Handle</FormLabel>\n                            <FormControl>\n                              <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white text-sm\" />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name={`followers${num}` as any}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-300\">Seguidores</FormLabel>\n                            <FormControl>\n                              <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white text-sm\" />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  ))}\n                </div>\n              </div>\n              \n              <FormField\n                control={form.control}\n                name=\"ctaPrompt\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Llamada a la Acción</FormLabel>\n                    <FormControl>\n                      <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"ctaFeatures\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Características del CTA</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" rows={2} />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              \n              <Button\n                type=\"submit\"\n                className=\"bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700\"\n                disabled={updateMutation.isPending}\n              >\n                {updateMutation.isPending && <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />}\n                <Save className=\"w-4 h-4 mr-2\" />\n                Guardar Cambios\n              </Button>\n            </form>\n          </Form>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n// Contact Section Component - THE MOST COMPREHENSIVE CONTACT MANAGEMENT\nfunction ContactSection({ content, updateMutation, token }: SectionProps) {\n  const [isEditing, setIsEditing] = useState(false);\n  \n  // Parse current contact content\n  let contactData: ContactContent = {\n    formTitle: 'Envíanos un mensaje',\n    formLabels: {\n      name: 'Nombre',\n      email: 'Email',\n      message: 'Mensaje'\n    },\n    formPlaceholders: {\n      name: 'Tu nombre',\n      email: 'tu@email.com',\n      message: '¿En qué podemos ayudarte?'\n    },\n    formButton: 'Enviar mensaje',\n    contactInfo: [\n      { title: \"WhatsApp\", description: \"¿Dudas? Escríbenos al instante\", value: \"+502 1234-5678\", action: \"Chatear ahora\" },\n      { title: \"Email\", description: \"Contacto comercial\", value: \"info@lavievapes.gt\", action: \"Enviar email\" },\n      { title: \"Ubicación\", description: \"Envíos a toda Guatemala\", value: \"Ciudad de Guatemala\", action: \"Ver cobertura\" }\n    ],\n    shippingInfo: [\n      { title: \"Envíos a toda Guatemala\", description: \"Entregas en 24-72h hábiles\" },\n      { title: \"Múltiples métodos de pago\", description: \"Tarjeta, transferencia, contra entrega\" },\n      { title: \"Envío gratis\", description: \"En compras desde Q200\" }\n    ],\n    paymentMethods: [\"Tarjeta de crédito\", \"Transferencia\", \"Contra entrega\"],\n    shippingNotice: \"* Contra entrega minimo de Q200 o costo de Q35 por envio\"\n  };\n  \n  try {\n    if (content?.content) {\n      contactData = JSON.parse(content.content);\n    }\n  } catch {\n    // Use default if parsing fails\n  }\n  \n  const form = useForm({\n    defaultValues: {\n      active: content?.active ?? true,\n      title: content?.title || 'Contacto',\n      subtitle: content?.subtitle || 'Estamos aquí para ayudarte',\n      formTitle: contactData.formTitle,\n      labelName: contactData.formLabels.name,\n      labelEmail: contactData.formLabels.email,\n      labelMessage: contactData.formLabels.message,\n      placeholderName: contactData.formPlaceholders.name,\n      placeholderEmail: contactData.formPlaceholders.email,\n      placeholderMessage: contactData.formPlaceholders.message,\n      formButton: contactData.formButton,\n      whatsappTitle: contactData.contactInfo[0]?.title || '',\n      whatsappDesc: contactData.contactInfo[0]?.description || '',\n      whatsappValue: contactData.contactInfo[0]?.value || '',\n      whatsappAction: contactData.contactInfo[0]?.action || '',\n      emailTitle: contactData.contactInfo[1]?.title || '',\n      emailDesc: contactData.contactInfo[1]?.description || '',\n      emailValue: contactData.contactInfo[1]?.value || '',\n      emailAction: contactData.contactInfo[1]?.action || '',\n      locationTitle: contactData.contactInfo[2]?.title || '',\n      locationDesc: contactData.contactInfo[2]?.description || '',\n      locationValue: contactData.contactInfo[2]?.value || '',\n      locationAction: contactData.contactInfo[2]?.action || '',\n      shipping1Title: contactData.shippingInfo[0]?.title || '',\n      shipping1Desc: contactData.shippingInfo[0]?.description || '',\n      shipping2Title: contactData.shippingInfo[1]?.title || '',\n      shipping2Desc: contactData.shippingInfo[1]?.description || '',\n      shipping3Title: contactData.shippingInfo[2]?.title || '',\n      shipping3Desc: contactData.shippingInfo[2]?.description || '',\n      paymentMethod1: contactData.paymentMethods[0] || '',\n      paymentMethod2: contactData.paymentMethods[1] || '',\n      paymentMethod3: contactData.paymentMethods[2] || '',\n      shippingNotice: contactData.shippingNotice\n    }\n  });\n  \n  const onSubmit = (data: any) => {\n    const contactContent: ContactContent = {\n      formTitle: data.formTitle,\n      formLabels: {\n        name: data.labelName,\n        email: data.labelEmail,\n        message: data.labelMessage\n      },\n      formPlaceholders: {\n        name: data.placeholderName,\n        email: data.placeholderEmail,\n        message: data.placeholderMessage\n      },\n      formButton: data.formButton,\n      contactInfo: [\n        { title: data.whatsappTitle, description: data.whatsappDesc, value: data.whatsappValue, action: data.whatsappAction },\n        { title: data.emailTitle, description: data.emailDesc, value: data.emailValue, action: data.emailAction },\n        { title: data.locationTitle, description: data.locationDesc, value: data.locationValue, action: data.locationAction }\n      ],\n      shippingInfo: [\n        { title: data.shipping1Title, description: data.shipping1Desc },\n        { title: data.shipping2Title, description: data.shipping2Desc },\n        { title: data.shipping3Title, description: data.shipping3Desc }\n      ],\n      paymentMethods: [data.paymentMethod1, data.paymentMethod2, data.paymentMethod3],\n      shippingNotice: data.shippingNotice\n    };\n    \n    updateMutation.mutate({\n      section: 'contact',\n      data: {\n        title: data.title,\n        subtitle: data.subtitle,\n        content: JSON.stringify(contactContent),\n        active: data.active\n      }\n    });\n    \n    setIsEditing(false);\n  };\n  \n  return (\n    <Card className=\"bg-gray-900 border-purple-500/20\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg flex items-center justify-center\">\n              <Phone className=\"h-5 w-5 text-white\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-white\">📞 Información de Contacto Completa</CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                🎯 GESTIONA TODO: WhatsApp, Email, Dirección, Formularios, Envíos y Pagos\n              </CardDescription>\n            </div>\n          </div>\n          <Button\n            variant=\"outline\"\n            onClick={() => setIsEditing(!isEditing)}\n            className=\"border-purple-500/50 text-purple-400 hover:bg-purple-500/10\"\n          >\n            <Edit3 className=\"w-4 h-4 mr-2\" />\n            {isEditing ? 'Cancelar' : 'Editar'}\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {!isEditing ? (\n          <div className=\"space-y-6\">\n            <div className=\"p-4 bg-green-500/10 border border-green-500/20 rounded-lg\">\n              <h3 className=\"text-green-400 font-medium mb-2\">✅ Información de Contacto Principal</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                {contactData.contactInfo.map((info, idx) => (\n                  <div key={idx} className=\"text-center p-3 bg-gray-800/30 rounded\">\n                    <p className=\"text-white font-medium\">{info.title}</p>\n                    <p className=\"text-green-400 font-bold text-lg\">{info.value}</p>\n                    <p className=\"text-gray-400 text-sm\">{info.description}</p>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label className=\"text-sm font-medium text-gray-300\">Título Principal</Label>\n                <p className=\"text-white mt-1\">{content?.title}</p>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium text-gray-300\">Estado</Label>\n                <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium mt-1 ${\n                  content?.active ? \"bg-green-500/20 text-green-400\" : \"bg-red-500/20 text-red-400\"\n                }`}>\n                  {content?.active ? \"Activo\" : \"Inactivo\"}\n                </span>\n              </div>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">Subtítulo</Label>\n              <p className=\"text-gray-300 mt-1\">{content?.subtitle}</p>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">📝 Formulario de Contacto</Label>\n              <div className=\"mt-2 p-3 bg-gray-800/50 rounded-lg\">\n                <p className=\"text-white font-medium\">{contactData.formTitle}</p>\n                <div className=\"grid grid-cols-3 gap-2 mt-2 text-sm\">\n                  <p className=\"text-gray-400\">{contactData.formLabels.name}</p>\n                  <p className=\"text-gray-400\">{contactData.formLabels.email}</p>\n                  <p className=\"text-gray-400\">{contactData.formLabels.message}</p>\n                </div>\n                <p className=\"text-purple-300 mt-2 text-sm\">{contactData.formButton}</p>\n              </div>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">🚚 Información de Envío</Label>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-2\">\n                {contactData.shippingInfo.map((shipping, idx) => (\n                  <div key={idx} className=\"p-3 bg-gray-800/50 rounded-lg\">\n                    <p className=\"text-white font-medium text-sm\">{shipping.title}</p>\n                    <p className=\"text-gray-400 text-xs\">{shipping.description}</p>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">💳 Métodos de Pago</Label>\n              <div className=\"mt-2 p-3 bg-gray-800/50 rounded-lg\">\n                <div className=\"grid grid-cols-3 gap-2\">\n                  {contactData.paymentMethods.map((method, idx) => (\n                    <p key={idx} className=\"text-gray-300 text-sm\">✓ {method}</p>\n                  ))}\n                </div>\n                <p className=\"text-purple-300 text-xs mt-2\">{contactData.shippingNotice}</p>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"active\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border border-purple-500/20 p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base text-white\">Sección Activa</FormLabel>\n                    </div>\n                    <FormControl>\n                      <Switch checked={field.value} onCheckedChange={field.onChange} />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-white\">Título Principal *</FormLabel>\n                      <FormControl>\n                        <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"subtitle\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-white\">Subtítulo</FormLabel>\n                      <FormControl>\n                        <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <div className=\"space-y-4 p-4 bg-green-500/10 border border-green-500/20 rounded-lg\">\n                <Label className=\"text-green-400 font-medium\">📞 INFORMACIÓN DE CONTACTO PRINCIPAL</Label>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  {[\n                    { prefix: 'whatsapp', label: '📱 WhatsApp', placeholder: '+502 1234-5678' }, \n                    { prefix: 'email', label: '📧 Email', placeholder: 'info@empresa.com' }, \n                    { prefix: 'location', label: '📍 Ubicación', placeholder: 'Ciudad de Guatemala' }\n                  ].map((contact, idx) => (\n                    <div key={idx} className=\"space-y-2 p-3 bg-gray-800/30 rounded\">\n                      <h4 className=\"text-white font-medium text-sm\">{contact.label}</h4>\n                      <FormField\n                        control={form.control}\n                        name={`${contact.prefix}Title` as any}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-300 text-xs\">Título</FormLabel>\n                            <FormControl>\n                              <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white text-sm\" />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name={`${contact.prefix}Value` as any}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-green-400 text-xs font-bold\">VALOR PRINCIPAL *</FormLabel>\n                            <FormControl>\n                              <Input \n                                {...field} \n                                className=\"bg-gray-800/50 border-green-500/30 text-green-400 font-bold text-sm\" \n                                placeholder={contact.placeholder}\n                              />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name={`${contact.prefix}Desc` as any}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-300 text-xs\">Descripción</FormLabel>\n                            <FormControl>\n                              <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white text-sm\" />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name={`${contact.prefix}Action` as any}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-300 text-xs\">Acción</FormLabel>\n                            <FormControl>\n                              <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white text-sm\" />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  ))}\n                </div>\n              </div>\n              \n              <div className=\"space-y-4 p-4 bg-blue-500/10 border border-blue-500/20 rounded-lg\">\n                <Label className=\"text-blue-400 font-medium\">📝 Formulario de Contacto</Label>\n                \n                <FormField\n                  control={form.control}\n                  name=\"formTitle\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-300\">Título del Formulario</FormLabel>\n                      <FormControl>\n                        <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"labelName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Label Nombre</FormLabel>\n                        <FormControl>\n                          <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"labelEmail\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Label Email</FormLabel>\n                        <FormControl>\n                          <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"labelMessage\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Label Mensaje</FormLabel>\n                        <FormControl>\n                          <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"placeholderName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Placeholder Nombre</FormLabel>\n                        <FormControl>\n                          <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"placeholderEmail\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Placeholder Email</FormLabel>\n                        <FormControl>\n                          <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"placeholderMessage\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Placeholder Mensaje</FormLabel>\n                        <FormControl>\n                          <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <FormField\n                  control={form.control}\n                  name=\"formButton\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-300\">Texto del Botón</FormLabel>\n                      <FormControl>\n                        <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <div className=\"space-y-4 p-4 bg-yellow-500/10 border border-yellow-500/20 rounded-lg\">\n                <Label className=\"text-yellow-400 font-medium\">🚚 Información de Envío</Label>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  {[1, 2, 3].map((num) => (\n                    <div key={num} className=\"space-y-2\">\n                      <FormField\n                        control={form.control}\n                        name={`shipping${num}Title` as any}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-300\">Envío {num} - Título</FormLabel>\n                            <FormControl>\n                              <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white text-sm\" />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name={`shipping${num}Desc` as any}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-300\">Descripción</FormLabel>\n                            <FormControl>\n                              <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white text-sm\" />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  ))}\n                </div>\n              </div>\n              \n              <div className=\"space-y-4 p-4 bg-purple-500/10 border border-purple-500/20 rounded-lg\">\n                <Label className=\"text-purple-400 font-medium\">💳 Métodos de Pago</Label>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  {[1, 2, 3].map((num) => (\n                    <FormField\n                      key={num}\n                      control={form.control}\n                      name={`paymentMethod${num}` as any}\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-gray-300\">Método {num}</FormLabel>\n                          <FormControl>\n                            <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                  ))}\n                </div>\n                \n                <FormField\n                  control={form.control}\n                  name=\"shippingNotice\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-300\">Aviso de Envío</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" rows={2} />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <Button\n                type=\"submit\"\n                className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700\"\n                disabled={updateMutation.isPending}\n              >\n                {updateMutation.isPending && <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />}\n                <Save className=\"w-4 h-4 mr-2\" />\n                💾 Guardar Toda la Información de Contacto\n              </Button>\n            </form>\n          </Form>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n// Affiliates Section Component - COMPLETE AFFILIATE PROGRAM MANAGEMENT\nfunction AffiliatesSection({ content, updateMutation, token }: SectionProps) {\n  const [isEditing, setIsEditing] = useState(false);\n  \n  // Parse current affiliates content\n  let affiliatesData: AffiliatesContent = {\n    sectionSubtitle: 'Únete a nuestro programa de distribuidores',\n    levels: [\n      { id: 'bronze', name: 'Distribuidor Bronce', discount: '15%', minimum: 'Q1,000', features: ['Descuento en mayoreo', 'Soporte básico', 'Material promocional'] },\n      { id: 'silver', name: 'Distribuidor Plata', discount: '25%', minimum: 'Q2,500', features: ['Mayor descuento', 'Soporte prioritario', 'Productos exclusivos', 'Envío gratis'] },\n      { id: 'gold', name: 'Distribuidor Oro', discount: '35%', minimum: 'Q5,000', features: ['Máximo descuento', 'Soporte dedicado', 'Lanzamientos exclusivos', 'Sin mínimo de envío', 'Capacitaciones'] }\n    ],\n    formTitle: 'Solicitar membresía de distribuidor',\n    formLabels: {\n      name: 'Nombre completo',\n      email: 'Email',\n      phone: 'Teléfono',\n      level: 'Nivel deseado',\n      message: 'Mensaje'\n    },\n    formPlaceholders: {\n      name: 'Tu nombre completo',\n      email: 'tu@email.com',\n      phone: '+502 1234-5678',\n      message: 'Cuéntanos sobre tu negocio...'\n    },\n    formButton: 'Enviar solicitud',\n    levelOptions: [\n      { label: 'Distribuidor Bronce', value: 'bronze' },\n      { label: 'Distribuidor Plata', value: 'silver' },\n      { label: 'Distribuidor Oro', value: 'gold' }\n    ],\n    messages: {\n      success: {\n        title: 'Solicitud enviada',\n        description: 'Te contactaremos pronto para procesar tu solicitud'\n      },\n      error: {\n        title: 'Error al enviar',\n        description: 'Por favor intenta de nuevo o contáctanos directamente'\n      }\n    }\n  };\n  \n  try {\n    if (content?.content) {\n      affiliatesData = JSON.parse(content.content);\n    }\n  } catch {\n    // Use default if parsing fails\n  }\n  \n  const form = useForm({\n    defaultValues: {\n      active: content?.active ?? true,\n      title: content?.title || 'Programa de Afiliados',\n      subtitle: content?.subtitle || 'Conviértete en distribuidor oficial de VAPEOLO',\n      sectionSubtitle: affiliatesData.sectionSubtitle,\n      formTitle: affiliatesData.formTitle,\n      labelName: affiliatesData.formLabels.name,\n      labelEmail: affiliatesData.formLabels.email,\n      labelPhone: affiliatesData.formLabels.phone,\n      labelLevel: affiliatesData.formLabels.level,\n      labelMessage: affiliatesData.formLabels.message,\n      placeholderName: affiliatesData.formPlaceholders.name,\n      placeholderEmail: affiliatesData.formPlaceholders.email,\n      placeholderPhone: affiliatesData.formPlaceholders.phone,\n      placeholderMessage: affiliatesData.formPlaceholders.message,\n      formButton: affiliatesData.formButton,\n      bronzeName: affiliatesData.levels[0]?.name || '',\n      bronzeDiscount: affiliatesData.levels[0]?.discount || '',\n      bronzeMinimum: affiliatesData.levels[0]?.minimum || '',\n      bronzeFeature1: affiliatesData.levels[0]?.features[0] || '',\n      bronzeFeature2: affiliatesData.levels[0]?.features[1] || '',\n      bronzeFeature3: affiliatesData.levels[0]?.features[2] || '',\n      silverName: affiliatesData.levels[1]?.name || '',\n      silverDiscount: affiliatesData.levels[1]?.discount || '',\n      silverMinimum: affiliatesData.levels[1]?.minimum || '',\n      silverFeature1: affiliatesData.levels[1]?.features[0] || '',\n      silverFeature2: affiliatesData.levels[1]?.features[1] || '',\n      silverFeature3: affiliatesData.levels[1]?.features[2] || '',\n      silverFeature4: affiliatesData.levels[1]?.features[3] || '',\n      goldName: affiliatesData.levels[2]?.name || '',\n      goldDiscount: affiliatesData.levels[2]?.discount || '',\n      goldMinimum: affiliatesData.levels[2]?.minimum || '',\n      goldFeature1: affiliatesData.levels[2]?.features[0] || '',\n      goldFeature2: affiliatesData.levels[2]?.features[1] || '',\n      goldFeature3: affiliatesData.levels[2]?.features[2] || '',\n      goldFeature4: affiliatesData.levels[2]?.features[3] || '',\n      goldFeature5: affiliatesData.levels[2]?.features[4] || '',\n      successTitle: affiliatesData.messages.success.title,\n      successDescription: affiliatesData.messages.success.description,\n      errorTitle: affiliatesData.messages.error.title,\n      errorDescription: affiliatesData.messages.error.description\n    }\n  });\n  \n  const onSubmit = (data: any) => {\n    const affiliatesContent: AffiliatesContent = {\n      sectionSubtitle: data.sectionSubtitle,\n      levels: [\n        { \n          id: 'bronze', \n          name: data.bronzeName, \n          discount: data.bronzeDiscount, \n          minimum: data.bronzeMinimum, \n          features: [data.bronzeFeature1, data.bronzeFeature2, data.bronzeFeature3].filter(f => f) \n        },\n        { \n          id: 'silver', \n          name: data.silverName, \n          discount: data.silverDiscount, \n          minimum: data.silverMinimum, \n          features: [data.silverFeature1, data.silverFeature2, data.silverFeature3, data.silverFeature4].filter(f => f) \n        },\n        { \n          id: 'gold', \n          name: data.goldName, \n          discount: data.goldDiscount, \n          minimum: data.goldMinimum, \n          features: [data.goldFeature1, data.goldFeature2, data.goldFeature3, data.goldFeature4, data.goldFeature5].filter(f => f) \n        }\n      ],\n      formTitle: data.formTitle,\n      formLabels: {\n        name: data.labelName,\n        email: data.labelEmail,\n        phone: data.labelPhone,\n        level: data.labelLevel,\n        message: data.labelMessage\n      },\n      formPlaceholders: {\n        name: data.placeholderName,\n        email: data.placeholderEmail,\n        phone: data.placeholderPhone,\n        message: data.placeholderMessage\n      },\n      formButton: data.formButton,\n      levelOptions: [\n        { label: data.bronzeName, value: 'bronze' },\n        { label: data.silverName, value: 'silver' },\n        { label: data.goldName, value: 'gold' }\n      ],\n      messages: {\n        success: {\n          title: data.successTitle,\n          description: data.successDescription\n        },\n        error: {\n          title: data.errorTitle,\n          description: data.errorDescription\n        }\n      }\n    };\n    \n    updateMutation.mutate({\n      section: 'affiliates',\n      data: {\n        title: data.title,\n        subtitle: data.subtitle,\n        content: JSON.stringify(affiliatesContent),\n        active: data.active\n      }\n    });\n    \n    setIsEditing(false);\n  };\n  \n  return (\n    <Card className=\"bg-gray-900 border-purple-500/20\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg flex items-center justify-center\">\n              <UserPlus className=\"h-5 w-5 text-white\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-white\">🤝 Programa de Afiliados Completo</CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Gestiona niveles, beneficios, formularios y mensajes del programa\n              </CardDescription>\n            </div>\n          </div>\n          <Button\n            variant=\"outline\"\n            onClick={() => setIsEditing(!isEditing)}\n            className=\"border-purple-500/50 text-purple-400 hover:bg-purple-500/10\"\n          >\n            <Edit3 className=\"w-4 h-4 mr-2\" />\n            {isEditing ? 'Cancelar' : 'Editar'}\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {!isEditing ? (\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label className=\"text-sm font-medium text-gray-300\">Título Principal</Label>\n                <p className=\"text-white mt-1\">{content?.title}</p>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium text-gray-300\">Estado</Label>\n                <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium mt-1 ${\n                  content?.active ? \"bg-green-500/20 text-green-400\" : \"bg-red-500/20 text-red-400\"\n                }`}>\n                  {content?.active ? \"Activo\" : \"Inactivo\"}\n                </span>\n              </div>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">Subtítulo Principal</Label>\n              <p className=\"text-gray-300 mt-1\">{content?.subtitle}</p>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">Subtítulo de Sección</Label>\n              <p className=\"text-gray-300 mt-1\">{affiliatesData.sectionSubtitle}</p>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">🎖️ Niveles de Distribución</Label>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-2\">\n                {affiliatesData.levels.map((level, idx) => (\n                  <div key={idx} className=\"p-4 bg-gray-800/50 rounded-lg border border-purple-500/20\">\n                    <div className=\"text-center mb-3\">\n                      <h3 className=\"text-white font-bold\">{level.name}</h3>\n                      <p className=\"text-2xl font-bold text-purple-400\">{level.discount}</p>\n                      <p className=\"text-gray-400 text-sm\">Mínimo: {level.minimum}</p>\n                    </div>\n                    <div className=\"space-y-1\">\n                      {level.features.map((feature, featureIdx) => (\n                        <p key={featureIdx} className=\"text-gray-300 text-sm\">✓ {feature}</p>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">📝 Formulario de Solicitud</Label>\n              <div className=\"mt-2 p-3 bg-gray-800/50 rounded-lg\">\n                <p className=\"text-white font-medium mb-2\">{affiliatesData.formTitle}</p>\n                <div className=\"grid grid-cols-2 md:grid-cols-5 gap-2 text-sm\">\n                  <p className=\"text-gray-400\">{affiliatesData.formLabels.name}</p>\n                  <p className=\"text-gray-400\">{affiliatesData.formLabels.email}</p>\n                  <p className=\"text-gray-400\">{affiliatesData.formLabels.phone}</p>\n                  <p className=\"text-gray-400\">{affiliatesData.formLabels.level}</p>\n                  <p className=\"text-gray-400\">{affiliatesData.formLabels.message}</p>\n                </div>\n                <p className=\"text-purple-300 mt-2\">{affiliatesData.formButton}</p>\n              </div>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">💬 Mensajes del Sistema</Label>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-2\">\n                <div className=\"p-3 bg-green-500/10 border border-green-500/20 rounded-lg\">\n                  <p className=\"text-green-400 font-medium text-sm\">{affiliatesData.messages.success.title}</p>\n                  <p className=\"text-gray-300 text-xs\">{affiliatesData.messages.success.description}</p>\n                </div>\n                <div className=\"p-3 bg-red-500/10 border border-red-500/20 rounded-lg\">\n                  <p className=\"text-red-400 font-medium text-sm\">{affiliatesData.messages.error.title}</p>\n                  <p className=\"text-gray-300 text-xs\">{affiliatesData.messages.error.description}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"active\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border border-purple-500/20 p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base text-white\">Sección Activa</FormLabel>\n                    </div>\n                    <FormControl>\n                      <Switch checked={field.value} onCheckedChange={field.onChange} />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-white\">Título Principal *</FormLabel>\n                      <FormControl>\n                        <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"subtitle\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-white\">Subtítulo Principal</FormLabel>\n                      <FormControl>\n                        <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <FormField\n                control={form.control}\n                name=\"sectionSubtitle\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Subtítulo de Sección</FormLabel>\n                    <FormControl>\n                      <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"space-y-4 p-4 bg-purple-500/10 border border-purple-500/20 rounded-lg\">\n                <Label className=\"text-purple-400 font-medium\">🎖️ Niveles de Distribución</Label>\n                \n                {[\n                  { key: 'bronze', label: '🥉 Bronce', features: 3 },\n                  { key: 'silver', label: '🥈 Plata', features: 4 },\n                  { key: 'gold', label: '🥇 Oro', features: 5 }\n                ].map((level) => (\n                  <div key={level.key} className=\"p-4 bg-gray-800/30 rounded-lg\">\n                    <h4 className=\"text-white font-medium mb-3\">{level.label}</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-3\">\n                      <FormField\n                        control={form.control}\n                        name={`${level.key}Name` as any}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-300\">Nombre</FormLabel>\n                            <FormControl>\n                              <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white text-sm\" />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name={`${level.key}Discount` as any}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-300\">Descuento</FormLabel>\n                            <FormControl>\n                              <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white text-sm\" />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name={`${level.key}Minimum` as any}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-300\">Mínimo</FormLabel>\n                            <FormControl>\n                              <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white text-sm\" />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                      {Array.from({ length: level.features }, (_, i) => (\n                        <FormField\n                          key={i}\n                          control={form.control}\n                          name={`${level.key}Feature${i + 1}` as any}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-gray-300\">Beneficio {i + 1}</FormLabel>\n                              <FormControl>\n                                <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white text-sm\" />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"space-y-4 p-4 bg-blue-500/10 border border-blue-500/20 rounded-lg\">\n                <Label className=\"text-blue-400 font-medium\">📝 Formulario de Solicitud</Label>\n                \n                <FormField\n                  control={form.control}\n                  name=\"formTitle\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-300\">Título del Formulario</FormLabel>\n                      <FormControl>\n                        <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-gray-300 font-medium\">Labels</Label>\n                    <div className=\"space-y-2 mt-2\">\n                      {['Name', 'Email', 'Phone', 'Level', 'Message'].map((field) => (\n                        <FormField\n                          key={field}\n                          control={form.control}\n                          name={`label${field}` as any}\n                          render={({ field: formField }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-gray-400 text-xs\">{field}</FormLabel>\n                              <FormControl>\n                                <Input {...formField} className=\"bg-gray-800/50 border-purple-500/30 text-white text-sm\" />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n                      ))}\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label className=\"text-gray-300 font-medium\">Placeholders</Label>\n                    <div className=\"space-y-2 mt-2\">\n                      {['Name', 'Email', 'Phone', 'Message'].map((field) => (\n                        <FormField\n                          key={field}\n                          control={form.control}\n                          name={`placeholder${field}` as any}\n                          render={({ field: formField }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-gray-400 text-xs\">{field}</FormLabel>\n                              <FormControl>\n                                <Input {...formField} className=\"bg-gray-800/50 border-purple-500/30 text-white text-sm\" />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n                      ))}\n                    </div>\n                  </div>\n                </div>\n                \n                <FormField\n                  control={form.control}\n                  name=\"formButton\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-300\">Texto del Botón</FormLabel>\n                      <FormControl>\n                        <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <div className=\"space-y-4 p-4 bg-green-500/10 border border-green-500/20 rounded-lg\">\n                <Label className=\"text-green-400 font-medium\">💬 Mensajes del Sistema</Label>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-gray-300 font-medium\">Mensaje de Éxito</Label>\n                    <div className=\"space-y-2 mt-2\">\n                      <FormField\n                        control={form.control}\n                        name=\"successTitle\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-400 text-xs\">Título</FormLabel>\n                            <FormControl>\n                              <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white text-sm\" />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"successDescription\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-400 text-xs\">Descripción</FormLabel>\n                            <FormControl>\n                              <Textarea {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white text-sm\" rows={2} />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label className=\"text-gray-300 font-medium\">Mensaje de Error</Label>\n                    <div className=\"space-y-2 mt-2\">\n                      <FormField\n                        control={form.control}\n                        name=\"errorTitle\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-400 text-xs\">Título</FormLabel>\n                            <FormControl>\n                              <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white text-sm\" />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"errorDescription\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-400 text-xs\">Descripción</FormLabel>\n                            <FormControl>\n                              <Textarea {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white text-sm\" rows={2} />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <Button\n                type=\"submit\"\n                className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700\"\n                disabled={updateMutation.isPending}\n              >\n                {updateMutation.isPending && <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />}\n                <Save className=\"w-4 h-4 mr-2\" />\n                💾 Guardar Programa de Afiliados\n              </Button>\n            </form>\n          </Form>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n// Footer Section Component - COMPLETE FOOTER MANAGEMENT\nfunction FooterSection({ content, updateMutation, token }: SectionProps) {\n  const [isEditing, setIsEditing] = useState(false);\n  \n  // Parse current footer content\n  let footerData: FooterContent = {\n    brandName: 'VAPEOLO',\n    brandDescription: 'Tu distribuidora oficial de LAVIE en Guatemala. Más de 15 años innovando en el mundo del vapeo.',\n    columns: [\n      {\n        title: 'Productos',\n        links: [\n          { label: 'Vapes Desechables', url: '/productos/desechables' },\n          { label: 'Líquidos Premium', url: '/productos/liquidos' },\n          { label: 'Accesorios', url: '/productos/accesorios' },\n          { label: 'Novedades', url: '/productos/novedades' }\n        ]\n      },\n      {\n        title: 'Empresa',\n        links: [\n          { label: 'Sobre Nosotros', url: '/about' },\n          { label: 'Ubicaciones', url: '/ubicaciones' },\n          { label: 'Contáctanos', url: '/contacto' },\n          { label: 'Blog', url: '/blog' }\n        ]\n      },\n      {\n        title: 'Soporte',\n        links: [\n          { label: 'Centro de Ayuda', url: '/ayuda' },\n          { label: 'Envíos y Devoluciones', url: '/envios' },\n          { label: 'Garantía', url: '/garantia' },\n          { label: 'FAQ', url: '/faq' }\n        ]\n      }\n    ],\n    legalLinks: [\n      { label: 'Términos y Condiciones', url: '/terminos' },\n      { label: 'Política de Privacidad', url: '/privacidad' },\n      { label: 'Política de Cookies', url: '/cookies' }\n    ],\n    ageNotice: 'Producto destinado exclusivamente para mayores de edad',\n    copyright: '© 2024 VAPEOLO. Todos los derechos reservados.',\n    socialLinks: {\n      facebook: 'https://facebook.com/vapeolo',\n      instagram: 'https://instagram.com/vapeolo',\n      tiktok: 'https://tiktok.com/@vapeolo'\n    }\n  };\n  \n  try {\n    if (content?.content) {\n      footerData = JSON.parse(content.content);\n    }\n  } catch {\n    // Use default if parsing fails\n  }\n  \n  const form = useForm({\n    defaultValues: {\n      active: content?.active ?? true,\n      title: content?.title || 'Footer',\n      brandName: footerData.brandName,\n      brandDescription: footerData.brandDescription,\n      ageNotice: footerData.ageNotice,\n      copyright: footerData.copyright,\n      facebookUrl: footerData.socialLinks.facebook,\n      instagramUrl: footerData.socialLinks.instagram,\n      tiktokUrl: footerData.socialLinks.tiktok,\n      // Column 1 - Productos\n      col1Title: footerData.columns[0]?.title || '',\n      col1Link1Label: footerData.columns[0]?.links[0]?.label || '',\n      col1Link1Url: footerData.columns[0]?.links[0]?.url || '',\n      col1Link2Label: footerData.columns[0]?.links[1]?.label || '',\n      col1Link2Url: footerData.columns[0]?.links[1]?.url || '',\n      col1Link3Label: footerData.columns[0]?.links[2]?.label || '',\n      col1Link3Url: footerData.columns[0]?.links[2]?.url || '',\n      col1Link4Label: footerData.columns[0]?.links[3]?.label || '',\n      col1Link4Url: footerData.columns[0]?.links[3]?.url || '',\n      // Column 2 - Empresa\n      col2Title: footerData.columns[1]?.title || '',\n      col2Link1Label: footerData.columns[1]?.links[0]?.label || '',\n      col2Link1Url: footerData.columns[1]?.links[0]?.url || '',\n      col2Link2Label: footerData.columns[1]?.links[1]?.label || '',\n      col2Link2Url: footerData.columns[1]?.links[1]?.url || '',\n      col2Link3Label: footerData.columns[1]?.links[2]?.label || '',\n      col2Link3Url: footerData.columns[1]?.links[2]?.url || '',\n      col2Link4Label: footerData.columns[1]?.links[3]?.label || '',\n      col2Link4Url: footerData.columns[1]?.links[3]?.url || '',\n      // Column 3 - Soporte\n      col3Title: footerData.columns[2]?.title || '',\n      col3Link1Label: footerData.columns[2]?.links[0]?.label || '',\n      col3Link1Url: footerData.columns[2]?.links[0]?.url || '',\n      col3Link2Label: footerData.columns[2]?.links[1]?.label || '',\n      col3Link2Url: footerData.columns[2]?.links[1]?.url || '',\n      col3Link3Label: footerData.columns[2]?.links[2]?.label || '',\n      col3Link3Url: footerData.columns[2]?.links[2]?.url || '',\n      col3Link4Label: footerData.columns[2]?.links[3]?.label || '',\n      col3Link4Url: footerData.columns[2]?.links[3]?.url || '',\n      // Legal Links\n      legal1Label: footerData.legalLinks[0]?.label || '',\n      legal1Url: footerData.legalLinks[0]?.url || '',\n      legal2Label: footerData.legalLinks[1]?.label || '',\n      legal2Url: footerData.legalLinks[1]?.url || '',\n      legal3Label: footerData.legalLinks[2]?.label || '',\n      legal3Url: footerData.legalLinks[2]?.url || ''\n    }\n  });\n  \n  const onSubmit = (data: any) => {\n    const footerContent: FooterContent = {\n      brandName: data.brandName,\n      brandDescription: data.brandDescription,\n      columns: [\n        {\n          title: data.col1Title,\n          links: [\n            { label: data.col1Link1Label, url: data.col1Link1Url },\n            { label: data.col1Link2Label, url: data.col1Link2Url },\n            { label: data.col1Link3Label, url: data.col1Link3Url },\n            { label: data.col1Link4Label, url: data.col1Link4Url }\n          ].filter(link => link.label && link.url)\n        },\n        {\n          title: data.col2Title,\n          links: [\n            { label: data.col2Link1Label, url: data.col2Link1Url },\n            { label: data.col2Link2Label, url: data.col2Link2Url },\n            { label: data.col2Link3Label, url: data.col2Link3Url },\n            { label: data.col2Link4Label, url: data.col2Link4Url }\n          ].filter(link => link.label && link.url)\n        },\n        {\n          title: data.col3Title,\n          links: [\n            { label: data.col3Link1Label, url: data.col3Link1Url },\n            { label: data.col3Link2Label, url: data.col3Link2Url },\n            { label: data.col3Link3Label, url: data.col3Link3Url },\n            { label: data.col3Link4Label, url: data.col3Link4Url }\n          ].filter(link => link.label && link.url)\n        }\n      ],\n      legalLinks: [\n        { label: data.legal1Label, url: data.legal1Url },\n        { label: data.legal2Label, url: data.legal2Url },\n        { label: data.legal3Label, url: data.legal3Url }\n      ].filter(link => link.label && link.url),\n      ageNotice: data.ageNotice,\n      copyright: data.copyright,\n      socialLinks: {\n        facebook: data.facebookUrl,\n        instagram: data.instagramUrl,\n        tiktok: data.tiktokUrl\n      }\n    };\n    \n    updateMutation.mutate({\n      section: 'footer',\n      data: {\n        title: data.title,\n        content: JSON.stringify(footerContent),\n        active: data.active\n      }\n    });\n    \n    setIsEditing(false);\n  };\n  \n  return (\n    <Card className=\"bg-gray-900 border-purple-500/20\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg flex items-center justify-center\">\n              <Footprints className=\"h-5 w-5 text-white\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-white\">🦶 Footer Completo</CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Gestiona marca, enlaces, legal, redes sociales y copyright\n              </CardDescription>\n            </div>\n          </div>\n          <Button\n            variant=\"outline\"\n            onClick={() => setIsEditing(!isEditing)}\n            className=\"border-purple-500/50 text-purple-400 hover:bg-purple-500/10\"\n          >\n            <Edit3 className=\"w-4 h-4 mr-2\" />\n            {isEditing ? 'Cancelar' : 'Editar'}\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {!isEditing ? (\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label className=\"text-sm font-medium text-gray-300\">Estado</Label>\n                <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium mt-1 ${\n                  content?.active ? \"bg-green-500/20 text-green-400\" : \"bg-red-500/20 text-red-400\"\n                }`}>\n                  {content?.active ? \"Activo\" : \"Inactivo\"}\n                </span>\n              </div>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">🏢 Información de Marca</Label>\n              <div className=\"mt-2 p-3 bg-gray-800/50 rounded-lg\">\n                <p className=\"text-white font-bold text-lg\">{footerData.brandName}</p>\n                <p className=\"text-gray-300 text-sm mt-1\">{footerData.brandDescription}</p>\n              </div>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">🔗 Columnas de Enlaces</Label>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-2\">\n                {footerData.columns.map((column, idx) => (\n                  <div key={idx} className=\"p-3 bg-gray-800/50 rounded-lg\">\n                    <p className=\"text-white font-medium text-sm mb-2\">{column.title}</p>\n                    <div className=\"space-y-1\">\n                      {column.links.map((link, linkIdx) => (\n                        <div key={linkIdx} className=\"text-xs\">\n                          <p className=\"text-purple-300\">{link.label}</p>\n                          <p className=\"text-gray-500\">{link.url}</p>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">📱 Redes Sociales</Label>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-2\">\n                <div className=\"p-3 bg-gray-800/50 rounded-lg\">\n                  <p className=\"text-blue-400 font-medium text-sm\">Facebook</p>\n                  <p className=\"text-gray-400 text-xs\">{footerData.socialLinks.facebook}</p>\n                </div>\n                <div className=\"p-3 bg-gray-800/50 rounded-lg\">\n                  <p className=\"text-pink-400 font-medium text-sm\">Instagram</p>\n                  <p className=\"text-gray-400 text-xs\">{footerData.socialLinks.instagram}</p>\n                </div>\n                <div className=\"p-3 bg-gray-800/50 rounded-lg\">\n                  <p className=\"text-gray-400 font-medium text-sm\">TikTok</p>\n                  <p className=\"text-gray-400 text-xs\">{footerData.socialLinks.tiktok}</p>\n                </div>\n              </div>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">⚖️ Enlaces Legales</Label>\n              <div className=\"mt-2 p-3 bg-gray-800/50 rounded-lg\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2\">\n                  {footerData.legalLinks.map((link, idx) => (\n                    <div key={idx} className=\"text-xs\">\n                      <p className=\"text-yellow-300\">{link.label}</p>\n                      <p className=\"text-gray-500\">{link.url}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-300\">📄 Textos Legales</Label>\n              <div className=\"mt-2 space-y-2\">\n                <div className=\"p-3 bg-yellow-500/10 border border-yellow-500/20 rounded-lg\">\n                  <p className=\"text-yellow-400 font-medium text-sm\">Aviso de Edad</p>\n                  <p className=\"text-gray-300 text-sm\">{footerData.ageNotice}</p>\n                </div>\n                <div className=\"p-3 bg-gray-800/50 rounded-lg\">\n                  <p className=\"text-gray-400 font-medium text-sm\">Copyright</p>\n                  <p className=\"text-gray-300 text-sm\">{footerData.copyright}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"active\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border border-purple-500/20 p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base text-white\">Sección Activa</FormLabel>\n                    </div>\n                    <FormControl>\n                      <Switch checked={field.value} onCheckedChange={field.onChange} />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"space-y-4 p-4 bg-blue-500/10 border border-blue-500/20 rounded-lg\">\n                <Label className=\"text-blue-400 font-medium\">🏢 Información de Marca</Label>\n                \n                <FormField\n                  control={form.control}\n                  name=\"brandName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-300\">Nombre de la Marca</FormLabel>\n                      <FormControl>\n                        <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"brandDescription\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-300\">Descripción de la Marca</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" rows={3} />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <div className=\"space-y-4 p-4 bg-purple-500/10 border border-purple-500/20 rounded-lg\">\n                <Label className=\"text-purple-400 font-medium\">🔗 Columnas de Enlaces</Label>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  {[1, 2, 3].map((colNum) => (\n                    <div key={colNum} className=\"p-4 bg-gray-800/30 rounded-lg\">\n                      <h4 className=\"text-white font-medium mb-3\">Columna {colNum}</h4>\n                      \n                      <FormField\n                        control={form.control}\n                        name={`col${colNum}Title` as any}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-300\">Título</FormLabel>\n                            <FormControl>\n                              <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white text-sm\" />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <div className=\"space-y-2 mt-3\">\n                        {[1, 2, 3, 4].map((linkNum) => (\n                          <div key={linkNum} className=\"grid grid-cols-2 gap-2\">\n                            <FormField\n                              control={form.control}\n                              name={`col${colNum}Link${linkNum}Label` as any}\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel className=\"text-gray-400 text-xs\">Link {linkNum}</FormLabel>\n                                  <FormControl>\n                                    <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white text-xs\" placeholder=\"Etiqueta\" />\n                                  </FormControl>\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={form.control}\n                              name={`col${colNum}Link${linkNum}Url` as any}\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel className=\"text-gray-400 text-xs\">URL</FormLabel>\n                                  <FormControl>\n                                    <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white text-xs\" placeholder=\"/url\" />\n                                  </FormControl>\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              \n              <div className=\"space-y-4 p-4 bg-pink-500/10 border border-pink-500/20 rounded-lg\">\n                <Label className=\"text-pink-400 font-medium\">📱 Redes Sociales</Label>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"facebookUrl\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Facebook URL</FormLabel>\n                        <FormControl>\n                          <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"instagramUrl\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Instagram URL</FormLabel>\n                        <FormControl>\n                          <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"tiktokUrl\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">TikTok URL</FormLabel>\n                        <FormControl>\n                          <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n              \n              <div className=\"space-y-4 p-4 bg-yellow-500/10 border border-yellow-500/20 rounded-lg\">\n                <Label className=\"text-yellow-400 font-medium\">⚖️ Enlaces Legales</Label>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  {[1, 2, 3].map((num) => (\n                    <div key={num} className=\"space-y-2\">\n                      <FormField\n                        control={form.control}\n                        name={`legal${num}Label` as any}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-300\">Legal {num} - Etiqueta</FormLabel>\n                            <FormControl>\n                              <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white text-sm\" />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name={`legal${num}Url` as any}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-300\">URL</FormLabel>\n                            <FormControl>\n                              <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white text-sm\" />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  ))}\n                </div>\n              </div>\n              \n              <div className=\"space-y-4 p-4 bg-green-500/10 border border-green-500/20 rounded-lg\">\n                <Label className=\"text-green-400 font-medium\">📄 Textos Legales</Label>\n                \n                <FormField\n                  control={form.control}\n                  name=\"ageNotice\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-300\">Aviso de Edad</FormLabel>\n                      <FormControl>\n                        <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"copyright\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-300\">Copyright</FormLabel>\n                      <FormControl>\n                        <Input {...field} className=\"bg-gray-800/50 border-purple-500/30 text-white\" />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <Button\n                type=\"submit\"\n                className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700\"\n                disabled={updateMutation.isPending}\n              >\n                {updateMutation.isPending && <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />}\n                <Save className=\"w-4 h-4 mr-2\" />\n                💾 Guardar Footer Completo\n              </Button>\n            </form>\n          </Form>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":135213},"client/src/pages/AdminProfile.tsx":{"content":"import React from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  User, \n  Lock, \n  Save,\n  ArrowLeft,\n  Calendar\n} from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport AdminProfileDropdown from \"@/components/AdminProfileDropdown\";\nimport {\n  updateSelfProfileSchema,\n  changePasswordSchema,\n  type UpdateSelfProfile,\n  type ChangePassword,\n  type User as UserType\n} from \"@shared/schema\";\nimport { useState } from \"react\";\n\nexport default function AdminProfile() {\n  const { user, logout, token } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState<'profile' | 'password'>('profile');\n\n  // Redirect if not logged in\n  if (!user) {\n    setLocation(\"/admin/login\");\n    return null;\n  }\n\n  // Fetch current user profile data\n  const { data: profile, isLoading } = useQuery({\n    queryKey: [\"/api/admin/me\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/me\", {\n        headers: {\n          Authorization: token || \"\",\n        },\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch profile\");\n      }\n      const result = await response.json();\n      return result.data as UserType;\n    },\n  });\n\n  // Profile update form (restricted to username only for security)\n  const profileForm = useForm<UpdateSelfProfile>({\n    resolver: zodResolver(updateSelfProfileSchema),\n    defaultValues: {\n      username: profile?.username || \"\",\n    },\n  });\n\n  // Password change form\n  const passwordForm = useForm<ChangePassword>({\n    resolver: zodResolver(changePasswordSchema),\n    defaultValues: {\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  // Update profile mutation\n  const updateProfileMutation = useMutation({\n    mutationFn: (data: UpdateSelfProfile) => apiRequest(`/api/admin/me`, \"PATCH\", data),\n    onSuccess: () => {\n      toast({\n        title: \"Perfil actualizado\",\n        description: \"Tu perfil ha sido actualizado exitosamente\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/me\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Error al actualizar el perfil\",\n      });\n    },\n  });\n\n  // Change password mutation\n  const changePasswordMutation = useMutation({\n    mutationFn: (data: ChangePassword) => apiRequest(`/api/admin/me/password`, \"PATCH\", data),\n    onSuccess: () => {\n      toast({\n        title: \"Contraseña actualizada\",\n        description: \"Tu contraseña ha sido cambiada exitosamente\",\n      });\n      passwordForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Error al cambiar la contraseña\",\n      });\n    },\n  });\n\n  // Update default values when profile data loads\n  React.useEffect(() => {\n    if (profile) {\n      profileForm.reset({\n        username: profile.username,\n      });\n    }\n  }, [profile, profileForm]);\n\n  const onProfileSubmit = (data: UpdateSelfProfile) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  const onPasswordSubmit = (data: ChangePassword) => {\n    changePasswordMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black\">\n      {/* Header */}\n      <header className=\"bg-gray-900 border-b border-purple-500/20 p-4\">\n        <div className=\"max-w-7xl mx-auto flex justify-between items-center\">\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => setLocation(\"/admin/dashboard\")}\n              className=\"text-purple-400 hover:bg-purple-500/10\"\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Volver\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-white\">Mi Perfil</h1>\n              <p className=\"text-gray-400\">Gestiona tu información personal</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <AdminProfileDropdown />\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-4xl mx-auto p-6\">\n        {/* Tab Navigation */}\n        <div className=\"flex space-x-1 bg-gray-900 p-1 rounded-lg mb-6\">\n          <Button\n            variant={activeTab === 'profile' ? \"default\" : \"ghost\"}\n            onClick={() => setActiveTab('profile')}\n            className={`flex-1 ${activeTab === 'profile' \n              ? 'bg-purple-600 text-white' \n              : 'text-gray-400 hover:text-white hover:bg-gray-800'\n            }`}\n            data-testid=\"tab-profile\"\n          >\n            <User className=\"w-4 h-4 mr-2\" />\n            Información Personal\n          </Button>\n          <Button\n            variant={activeTab === 'password' ? \"default\" : \"ghost\"}\n            onClick={() => setActiveTab('password')}\n            className={`flex-1 ${activeTab === 'password' \n              ? 'bg-purple-600 text-white' \n              : 'text-gray-400 hover:text-white hover:bg-gray-800'\n            }`}\n            data-testid=\"tab-password\"\n          >\n            <Lock className=\"w-4 h-4 mr-2\" />\n            Cambiar Contraseña\n          </Button>\n        </div>\n\n        {/* Profile Information Tab */}\n        {activeTab === 'profile' && (\n          <Card className=\"bg-gray-900 border-purple-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center\">\n                <User className=\"w-5 h-5 mr-2 text-purple-400\" />\n                Información del Perfil\n              </CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Actualiza tu nombre de usuario. Los roles y permisos solo pueden ser modificados por administradores.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"space-y-4\">\n                  <Skeleton className=\"h-4 w-24 bg-gray-800\" />\n                  <Skeleton className=\"h-10 w-full bg-gray-800\" />\n                  <Skeleton className=\"h-4 w-24 bg-gray-800\" />\n                  <Skeleton className=\"h-10 w-full bg-gray-800\" />\n                  <Skeleton className=\"h-4 w-24 bg-gray-800\" />\n                  <Skeleton className=\"h-6 w-12 bg-gray-800\" />\n                </div>\n              ) : (\n                <Form {...profileForm}>\n                  <form onSubmit={profileForm.handleSubmit(onProfileSubmit)} className=\"space-y-6\">\n                    {/* Username field - only editable field for security */}\n                    <FormField\n                      control={profileForm.control}\n                      name=\"username\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-white\">Usuario</FormLabel>\n                          <FormControl>\n                            <Input\n                              {...field}\n                              placeholder=\"Nombre de usuario\"\n                              className=\"bg-gray-800 border-gray-700 text-white\"\n                              data-testid=\"input-username\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Display read-only information */}\n                    <div className=\"space-y-4\">\n                      <Separator className=\"bg-gray-700\" />\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                        <div className=\"space-y-2\">\n                          <Label className=\"text-gray-400\">Rol</Label>\n                          <div className=\"text-white bg-gray-800 p-2 rounded flex items-center\">\n                            <User className=\"w-4 h-4 mr-2 text-green-400\" />\n                            {profile?.role === 'admin' ? 'Administrador' : 'Ventas'}\n                          </div>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label className=\"text-gray-400\">Estado</Label>\n                          <div className={`p-2 rounded flex items-center ${\n                            profile?.active \n                              ? 'text-green-400 bg-green-400/10' \n                              : 'text-red-400 bg-red-400/10'\n                          }`}>\n                            <div className={`w-2 h-2 rounded-full mr-2 ${\n                              profile?.active ? 'bg-green-400' : 'bg-red-400'\n                            }`}></div>\n                            {profile?.active ? 'Activo' : 'Inactivo'}\n                          </div>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label className=\"text-gray-400\">ID de Usuario</Label>\n                          <div className=\"text-white font-mono text-xs bg-gray-800 p-2 rounded\">\n                            {profile?.id}\n                          </div>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label className=\"text-gray-400 flex items-center\">\n                            <Calendar className=\"w-4 h-4 mr-1\" />\n                            Fecha de Creación\n                          </Label>\n                          <div className=\"text-white\">\n                            {profile?.createdAt ? new Date(profile.createdAt).toLocaleDateString('es-ES', {\n                              year: 'numeric',\n                              month: 'long',\n                              day: 'numeric',\n                              hour: '2-digit',\n                              minute: '2-digit'\n                            }) : 'N/A'}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex justify-end\">\n                      <Button\n                        type=\"submit\"\n                        disabled={updateProfileMutation.isPending}\n                        className=\"bg-purple-600 hover:bg-purple-700\"\n                        data-testid=\"button-save-profile\"\n                      >\n                        {updateProfileMutation.isPending ? (\n                          <>Guardando...</>\n                        ) : (\n                          <>\n                            <Save className=\"w-4 h-4 mr-2\" />\n                            Guardar Cambios\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Password Change Tab */}\n        {activeTab === 'password' && (\n          <Card className=\"bg-gray-900 border-purple-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center\">\n                <Lock className=\"w-5 h-5 mr-2 text-purple-400\" />\n                Cambiar Contraseña\n              </CardTitle>\n              <CardDescription className=\"text-gray-400\">\n                Actualiza tu contraseña por motivos de seguridad\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Form {...passwordForm}>\n                <form onSubmit={passwordForm.handleSubmit(onPasswordSubmit)} className=\"space-y-6\">\n                  <FormField\n                    control={passwordForm.control}\n                    name=\"currentPassword\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-white\">Contraseña Actual</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            type=\"password\"\n                            placeholder=\"Ingresa tu contraseña actual\"\n                            className=\"bg-gray-800 border-gray-700 text-white\"\n                            data-testid=\"input-current-password\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={passwordForm.control}\n                    name=\"newPassword\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-white\">Nueva Contraseña</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            type=\"password\"\n                            placeholder=\"Ingresa tu nueva contraseña\"\n                            className=\"bg-gray-800 border-gray-700 text-white\"\n                            data-testid=\"input-new-password\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                        <div className=\"text-xs text-gray-400 space-y-1\">\n                          <div>La contraseña debe contener:</div>\n                          <ul className=\"list-disc list-inside space-y-1 ml-2\">\n                            <li>Al menos 8 caracteres</li>\n                            <li>Una letra mayúscula</li>\n                            <li>Una letra minúscula</li>\n                            <li>Un número</li>\n                            <li>Un carácter especial</li>\n                          </ul>\n                        </div>\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={passwordForm.control}\n                    name=\"confirmPassword\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-white\">Confirmar Nueva Contraseña</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            type=\"password\"\n                            placeholder=\"Confirma tu nueva contraseña\"\n                            className=\"bg-gray-800 border-gray-700 text-white\"\n                            data-testid=\"input-confirm-password\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex justify-end\">\n                    <Button\n                      type=\"submit\"\n                      disabled={changePasswordMutation.isPending}\n                      className=\"bg-purple-600 hover:bg-purple-700\"\n                      data-testid=\"button-change-password\"\n                    >\n                      {changePasswordMutation.isPending ? (\n                        <>Cambiando...</>\n                      ) : (\n                        <>\n                          <Lock className=\"w-4 h-4 mr-2\" />\n                          Cambiar Contraseña\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":16497},"client/src/pages/AdminUsers.tsx":{"content":"import React, { useState } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { \n  Users, \n  Plus,\n  ArrowLeft,\n  Edit,\n  Lock,\n  Shield,\n  User,\n  Check,\n  X,\n  MoreHorizontal,\n  Package,\n  PackagePlus,\n  Trash2,\n  UserX,\n  UserCheck,\n  Pause,\n  Settings\n} from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport AdminProfileDropdown from \"@/components/AdminProfileDropdown\";\nimport {\n  insertUserSchema,\n  updateUserSchema,\n  adminResetPasswordSchema,\n  type InsertUser,\n  type UpdateUser,\n  type AdminResetPassword,\n  type User as UserType\n} from \"@shared/schema\";\n\ninterface UsersResponse {\n  success: true;\n  data: UserType[];\n}\n\nexport default function AdminUsers() {\n  const { user, logout, token } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isPasswordDialogOpen, setIsPasswordDialogOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<UserType | null>(null);\n\n  // Redirect if not logged in or not admin\n  if (!user) {\n    setLocation(\"/admin/login\");\n    return null;\n  }\n  \n  if (user.role !== 'admin') {\n    setLocation(\"/admin/dashboard\");\n    return null;\n  }\n\n  // Fetch users list\n  const { data: users, isLoading } = useQuery<UsersResponse>({\n    queryKey: [\"/api/admin/users\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/users\", {\n        headers: {\n          Authorization: token || \"\",\n        },\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch users\");\n      }\n      return await response.json();\n    },\n  });\n\n  // Create user form\n  const createForm = useForm<InsertUser>({\n    resolver: zodResolver(insertUserSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      role: \"sales\",\n      active: true,\n      editInventory: false,\n      addProduct: false,\n      deleteItems: false,\n      deleteAffiliate: false,\n      authorizeAffiliate: false,\n      pauseAffiliate: false,\n    },\n  });\n\n  // Edit user form\n  const editForm = useForm<UpdateUser>({\n    resolver: zodResolver(updateUserSchema),\n    defaultValues: {\n      username: \"\",\n      role: \"sales\",\n      active: true,\n      editInventory: false,\n      addProduct: false,\n      deleteItems: false,\n      deleteAffiliate: false,\n      authorizeAffiliate: false,\n      pauseAffiliate: false,\n    },\n  });\n\n  // Reset password form\n  const passwordForm = useForm<AdminResetPassword>({\n    resolver: zodResolver(adminResetPasswordSchema),\n    defaultValues: {\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  // Create user mutation\n  const createUserMutation = useMutation({\n    mutationFn: (data: InsertUser) => apiRequest(`/api/admin/users`, \"POST\", data),\n    onSuccess: () => {\n      toast({\n        title: \"Usuario creado\",\n        description: \"El usuario ha sido creado exitosamente\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setIsCreateDialogOpen(false);\n      createForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Error al crear el usuario\",\n      });\n    },\n  });\n\n  // Update user mutation\n  const updateUserMutation = useMutation({\n    mutationFn: ({ userId, data }: { userId: string; data: UpdateUser }) => \n      apiRequest(`/api/admin/users/${userId}`, \"PATCH\", data),\n    onSuccess: () => {\n      toast({\n        title: \"Usuario actualizado\",\n        description: \"El usuario ha sido actualizado exitosamente\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setIsEditDialogOpen(false);\n      setSelectedUser(null);\n      editForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Error al actualizar el usuario\",\n      });\n    },\n  });\n\n  // Reset password mutation\n  const resetPasswordMutation = useMutation({\n    mutationFn: ({ userId, data }: { userId: string; data: AdminResetPassword }) => \n      apiRequest(`/api/admin/users/${userId}/password`, \"PATCH\", data),\n    onSuccess: () => {\n      toast({\n        title: \"Contraseña restablecida\",\n        description: \"La contraseña ha sido restablecida exitosamente\",\n      });\n      setIsPasswordDialogOpen(false);\n      setSelectedUser(null);\n      passwordForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Error al restablecer la contraseña\",\n      });\n    },\n  });\n\n  // Delete user mutation\n  const deleteUserMutation = useMutation({\n    mutationFn: (userId: string) => apiRequest(`/api/admin/users/${userId}`, \"DELETE\"),\n    onSuccess: () => {\n      toast({\n        title: \"Usuario eliminado\",\n        description: \"El usuario ha sido eliminado exitosamente\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setIsDeleteDialogOpen(false);\n      setSelectedUser(null);\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Error al eliminar el usuario\",\n      });\n    },\n  });\n\n  // Toggle user status mutation\n  const toggleUserStatusMutation = useMutation({\n    mutationFn: ({ userId, active }: { userId: string; active: boolean }) => \n      apiRequest(`/api/admin/users/${userId}`, \"PATCH\", { active }),\n    onSuccess: (_, variables) => {\n      toast({\n        title: variables.active ? \"Usuario activado\" : \"Usuario pausado\",\n        description: variables.active \n          ? \"El usuario ha sido activado exitosamente\" \n          : \"El usuario ha sido pausado exitosamente\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Error al cambiar el estado del usuario\",\n      });\n    },\n  });\n\n  const onCreateSubmit = (data: InsertUser) => {\n    createUserMutation.mutate(data);\n  };\n\n  const onEditSubmit = (data: UpdateUser) => {\n    if (selectedUser) {\n      updateUserMutation.mutate({ userId: selectedUser.id, data });\n    }\n  };\n\n  const onPasswordSubmit = (data: AdminResetPassword) => {\n    if (selectedUser) {\n      resetPasswordMutation.mutate({ userId: selectedUser.id, data });\n    }\n  };\n\n  const handleEditUser = (user: UserType) => {\n    setSelectedUser(user);\n    editForm.reset({\n      username: user.username,\n      role: user.role,\n      active: user.active,\n      editInventory: user.editInventory || false,\n      addProduct: user.addProduct || false,\n      deleteItems: user.deleteItems || false,\n      deleteAffiliate: user.deleteAffiliate || false,\n      authorizeAffiliate: user.authorizeAffiliate || false,\n      pauseAffiliate: user.pauseAffiliate || false,\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleResetPassword = (user: UserType) => {\n    setSelectedUser(user);\n    passwordForm.reset();\n    setIsPasswordDialogOpen(true);\n  };\n\n  const handleDeleteUser = (user: UserType) => {\n    setSelectedUser(user);\n    setIsDeleteDialogOpen(true);\n  };\n\n  const handleToggleUserStatus = (user: UserType) => {\n    toggleUserStatusMutation.mutate({ \n      userId: user.id, \n      active: !user.active \n    });\n  };\n\n  const confirmDeleteUser = () => {\n    if (selectedUser) {\n      deleteUserMutation.mutate(selectedUser.id);\n    }\n  };\n\n  const getRoleBadgeColor = (role: string) => {\n    return role === 'admin' ? 'bg-purple-600' : 'bg-green-600';\n  };\n\n  const getStatusBadgeColor = (active: boolean) => {\n    return active ? 'bg-green-600' : 'bg-red-600';\n  };\n\n  const getPermissionIcon = (permission: string) => {\n    const iconMap = {\n      editInventory: Package,\n      addProduct: PackagePlus,\n      deleteItems: Trash2,\n      deleteAffiliate: UserX,\n      authorizeAffiliate: UserCheck,\n      pauseAffiliate: Pause,\n    };\n    return iconMap[permission as keyof typeof iconMap] || Settings;\n  };\n\n  const getPermissionLabel = (permission: string) => {\n    const labelMap = {\n      editInventory: 'Editar Inventario',\n      addProduct: 'Agregar Productos',\n      deleteItems: 'Eliminar Elementos',\n      deleteAffiliate: 'Eliminar Afiliados',\n      authorizeAffiliate: 'Autorizar Afiliados',\n      pauseAffiliate: 'Pausar Afiliados',\n    };\n    return labelMap[permission as keyof typeof labelMap] || permission;\n  };\n\n  const getUserPermissions = (user: UserType) => {\n    const permissions = [\n      { key: 'editInventory', value: user.editInventory },\n      { key: 'addProduct', value: user.addProduct },\n      { key: 'deleteItems', value: user.deleteItems },\n      { key: 'deleteAffiliate', value: user.deleteAffiliate },\n      { key: 'authorizeAffiliate', value: user.authorizeAffiliate },\n      { key: 'pauseAffiliate', value: user.pauseAffiliate },\n    ];\n    return permissions.filter(p => p.value).map(p => p.key);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black\">\n      {/* Header */}\n      <header className=\"bg-gray-900 border-b border-purple-500/20 p-4\">\n        <div className=\"max-w-7xl mx-auto flex justify-between items-center\">\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => setLocation(\"/admin/dashboard\")}\n              className=\"text-purple-400 hover:bg-purple-500/10\"\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Volver\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-white\">Gestión de Usuarios</h1>\n              <p className=\"text-gray-400\">Administra usuarios del sistema</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <Button\n              onClick={() => setIsCreateDialogOpen(true)}\n              className=\"bg-purple-600 hover:bg-purple-700\"\n              data-testid=\"button-create-user\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Crear Usuario\n            </Button>\n            <AdminProfileDropdown />\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto p-6\">\n        <Card className=\"bg-gray-900 border-purple-500/20\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center\">\n              <Users className=\"w-5 h-5 mr-2 text-purple-400\" />\n              Lista de Usuarios\n            </CardTitle>\n            <CardDescription className=\"text-gray-400\">\n              {users?.data ? `${users.data.length} usuarios registrados` : \"Cargando usuarios...\"}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"space-y-3\">\n                {Array.from({ length: 5 }).map((_, i) => (\n                  <div key={i} className=\"flex items-center space-x-4\">\n                    <Skeleton className=\"h-12 w-12 rounded-full bg-gray-800\" />\n                    <div className=\"space-y-2\">\n                      <Skeleton className=\"h-4 w-48 bg-gray-800\" />\n                      <Skeleton className=\"h-3 w-32 bg-gray-800\" />\n                    </div>\n                    <div className=\"ml-auto\">\n                      <Skeleton className=\"h-8 w-20 bg-gray-800\" />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : users?.data && users.data.length > 0 ? (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className=\"border-gray-700\">\n                      <TableHead className=\"text-gray-400\">Usuario</TableHead>\n                      <TableHead className=\"text-gray-400\">Rol & Estado</TableHead>\n                      <TableHead className=\"text-gray-400\">Permisos</TableHead>\n                      <TableHead className=\"text-gray-400\">Fecha de Creación</TableHead>\n                      <TableHead className=\"text-gray-400 text-right\">Acciones</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {users.data.map((user) => (\n                      <TableRow key={user.id} className=\"border-gray-700\" data-testid={`user-row-${user.id}`}>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center\">\n                              <User className=\"w-4 h-4 text-white\" />\n                            </div>\n                            <div>\n                              <div className=\"font-medium text-white\" data-testid={`text-username-${user.id}`}>\n                                {user.username}\n                              </div>\n                              <div className=\"text-xs text-gray-400 font-mono\">\n                                {user.id}\n                              </div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex flex-col gap-2\">\n                            <Badge \n                              className={`${getRoleBadgeColor(user.role)} text-white w-fit`}\n                              data-testid={`badge-role-${user.id}`}\n                            >\n                              {user.role === 'admin' ? (\n                                <>\n                                  <Shield className=\"w-3 h-3 mr-1\" />\n                                  Administrador\n                                </>\n                              ) : (\n                                <>\n                                  <User className=\"w-3 h-3 mr-1\" />\n                                  Ventas\n                                </>\n                              )}\n                            </Badge>\n                            <Badge \n                              className={`${getStatusBadgeColor(user.active)} text-white w-fit`}\n                              data-testid={`badge-status-${user.id}`}\n                            >\n                              {user.active ? (\n                                <>\n                                  <Check className=\"w-3 h-3 mr-1\" />\n                                  Activo\n                                </>\n                              ) : (\n                                <>\n                                  <X className=\"w-3 h-3 mr-1\" />\n                                  Inactivo\n                                </>\n                              )}\n                            </Badge>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex flex-wrap gap-1\">\n                            {user.role === 'admin' ? (\n                              <Badge className=\"bg-purple-800/50 text-purple-200 text-xs\">\n                                Todos los permisos\n                              </Badge>\n                            ) : (\n                              getUserPermissions(user).length > 0 ? (\n                                getUserPermissions(user).slice(0, 2).map((permission) => {\n                                  const Icon = getPermissionIcon(permission);\n                                  return (\n                                    <Badge\n                                      key={permission}\n                                      className=\"bg-blue-600/80 text-white text-xs\"\n                                      data-testid={`permission-${permission}-${user.id}`}\n                                    >\n                                      <Icon className=\"w-3 h-3 mr-1\" />\n                                      {getPermissionLabel(permission)}\n                                    </Badge>\n                                  );\n                                })\n                              ) : (\n                                <Badge className=\"bg-gray-600 text-gray-300 text-xs\">\n                                  Sin permisos especiales\n                                </Badge>\n                              )\n                            )}\n                            {user.role !== 'admin' && getUserPermissions(user).length > 2 && (\n                              <Badge className=\"bg-gray-600 text-gray-300 text-xs\">\n                                +{getUserPermissions(user).length - 2} más\n                              </Badge>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-gray-300\">\n                          {new Date(user.createdAt).toLocaleDateString('es-ES', {\n                            year: 'numeric',\n                            month: 'short',\n                            day: 'numeric',\n                            hour: '2-digit',\n                            minute: '2-digit'\n                          })}\n                        </TableCell>\n                        <TableCell className=\"text-right\">\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button \n                                variant=\"ghost\" \n                                className=\"h-8 w-8 p-0 text-gray-400 hover:text-white\"\n                                data-testid={`button-actions-${user.id}`}\n                              >\n                                <MoreHorizontal className=\"h-4 w-4\" />\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent \n                              align=\"end\" \n                              className=\"bg-gray-800 border-gray-700\"\n                            >\n                              <DropdownMenuItem\n                                onClick={() => handleEditUser(user)}\n                                className=\"text-white hover:bg-gray-700 cursor-pointer\"\n                                data-testid={`menu-edit-${user.id}`}\n                              >\n                                <Edit className=\"mr-2 h-4 w-4\" />\n                                Editar Usuario\n                              </DropdownMenuItem>\n                              <DropdownMenuItem\n                                onClick={() => handleResetPassword(user)}\n                                className=\"text-white hover:bg-gray-700 cursor-pointer\"\n                                data-testid={`menu-password-${user.id}`}\n                              >\n                                <Lock className=\"mr-2 h-4 w-4\" />\n                                Restablecer Contraseña\n                              </DropdownMenuItem>\n                              <DropdownMenuItem\n                                onClick={() => handleToggleUserStatus(user)}\n                                className=\"text-white hover:bg-gray-700 cursor-pointer\"\n                                disabled={toggleUserStatusMutation.isPending}\n                                data-testid={`menu-toggle-status-${user.id}`}\n                              >\n                                {user.active ? (\n                                  <>\n                                    <Pause className=\"mr-2 h-4 w-4 text-yellow-400\" />\n                                    Pausar Usuario\n                                  </>\n                                ) : (\n                                  <>\n                                    <UserCheck className=\"mr-2 h-4 w-4 text-green-400\" />\n                                    Activar Usuario\n                                  </>\n                                )}\n                              </DropdownMenuItem>\n                              <DropdownMenuItem\n                                onClick={() => handleDeleteUser(user)}\n                                className=\"text-red-400 hover:bg-red-900/20 cursor-pointer\"\n                                disabled={deleteUserMutation.isPending}\n                                data-testid={`menu-delete-${user.id}`}\n                              >\n                                <Trash2 className=\"mr-2 h-4 w-4\" />\n                                Eliminar Usuario\n                              </DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Users className=\"w-12 h-12 text-gray-600 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-white mb-2\">No hay usuarios</h3>\n                <p className=\"text-gray-400 mb-4\">Comienza creando tu primer usuario</p>\n                <Button\n                  onClick={() => setIsCreateDialogOpen(true)}\n                  className=\"bg-purple-600 hover:bg-purple-700\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Crear Usuario\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Create User Dialog */}\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogContent className=\"bg-gray-900 border-gray-700 text-white\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center\">\n                <Plus className=\"w-5 h-5 mr-2 text-purple-400\" />\n                Crear Nuevo Usuario\n              </DialogTitle>\n              <DialogDescription className=\"text-gray-400\">\n                Crea un nuevo usuario para el sistema\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...createForm}>\n              <form onSubmit={createForm.handleSubmit(onCreateSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={createForm.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-white\">Nombre de Usuario</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"Ingresa el nombre de usuario\"\n                          className=\"bg-gray-800 border-gray-700 text-white\"\n                          data-testid=\"input-create-username\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={createForm.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-white\">Contraseña</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"password\"\n                          placeholder=\"Ingresa la contraseña\"\n                          className=\"bg-gray-800 border-gray-700 text-white\"\n                          data-testid=\"input-create-password\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                      <div className=\"text-xs text-gray-400 space-y-1\">\n                        <div>La contraseña debe contener:</div>\n                        <ul className=\"list-disc list-inside space-y-1 ml-2\">\n                          <li>Al menos 8 caracteres</li>\n                          <li>Una letra mayúscula y una minúscula</li>\n                          <li>Un número y un carácter especial</li>\n                        </ul>\n                      </div>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={createForm.control}\n                  name=\"role\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-white\">Rol</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger \n                            className=\"bg-gray-800 border-gray-700 text-white\"\n                            data-testid=\"select-create-role\"\n                          >\n                            <SelectValue placeholder=\"Selecciona un rol\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent className=\"bg-gray-800 border-gray-700\">\n                          <SelectItem value=\"admin\" className=\"text-white hover:bg-gray-700\">\n                            <div className=\"flex items-center\">\n                              <Shield className=\"w-4 h-4 mr-2 text-purple-400\" />\n                              Administrador\n                            </div>\n                          </SelectItem>\n                          <SelectItem value=\"sales\" className=\"text-white hover:bg-gray-700\">\n                            <div className=\"flex items-center\">\n                              <User className=\"w-4 h-4 mr-2 text-green-400\" />\n                              Ventas\n                            </div>\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={createForm.control}\n                  name=\"active\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border border-gray-700 bg-gray-800/50 p-4\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel className=\"text-base text-white\">\n                          Usuario Activo\n                        </FormLabel>\n                        <div className=\"text-sm text-gray-400\">\n                          Determina si el usuario puede acceder al sistema\n                        </div>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          data-testid=\"switch-create-active\"\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                {/* Granular Permissions Section */}\n                <div className=\"rounded-lg border border-gray-700 bg-gray-800/50 p-4\">\n                  <div className=\"space-y-0.5 mb-4\">\n                    <h3 className=\"text-base font-medium text-white\">Permisos Granulares</h3>\n                    <p className=\"text-sm text-gray-400\">\n                      Selecciona los permisos específicos para este usuario\n                    </p>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={createForm.control}\n                      name=\"editInventory\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"checkbox-create-editInventory\"\n                            />\n                          </FormControl>\n                          <div className=\"space-y-1 leading-none\">\n                            <FormLabel className=\"text-white flex items-center\">\n                              <Package className=\"w-4 h-4 mr-2 text-blue-400\" />\n                              Editar Inventario\n                            </FormLabel>\n                            <div className=\"text-xs text-gray-400\">\n                              Puede modificar cantidades de productos\n                            </div>\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={createForm.control}\n                      name=\"addProduct\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"checkbox-create-addProduct\"\n                            />\n                          </FormControl>\n                          <div className=\"space-y-1 leading-none\">\n                            <FormLabel className=\"text-white flex items-center\">\n                              <PackagePlus className=\"w-4 h-4 mr-2 text-green-400\" />\n                              Agregar Productos\n                            </FormLabel>\n                            <div className=\"text-xs text-gray-400\">\n                              Puede crear nuevos productos\n                            </div>\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={createForm.control}\n                      name=\"deleteItems\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"checkbox-create-deleteItems\"\n                            />\n                          </FormControl>\n                          <div className=\"space-y-1 leading-none\">\n                            <FormLabel className=\"text-white flex items-center\">\n                              <Trash2 className=\"w-4 h-4 mr-2 text-red-400\" />\n                              Eliminar Elementos\n                            </FormLabel>\n                            <div className=\"text-xs text-gray-400\">\n                              Puede eliminar productos y otros elementos\n                            </div>\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={createForm.control}\n                      name=\"deleteAffiliate\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"checkbox-create-deleteAffiliate\"\n                            />\n                          </FormControl>\n                          <div className=\"space-y-1 leading-none\">\n                            <FormLabel className=\"text-white flex items-center\">\n                              <UserX className=\"w-4 h-4 mr-2 text-red-400\" />\n                              Eliminar Afiliados\n                            </FormLabel>\n                            <div className=\"text-xs text-gray-400\">\n                              Puede eliminar registros de afiliados\n                            </div>\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={createForm.control}\n                      name=\"authorizeAffiliate\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"checkbox-create-authorizeAffiliate\"\n                            />\n                          </FormControl>\n                          <div className=\"space-y-1 leading-none\">\n                            <FormLabel className=\"text-white flex items-center\">\n                              <UserCheck className=\"w-4 h-4 mr-2 text-green-400\" />\n                              Autorizar Afiliados\n                            </FormLabel>\n                            <div className=\"text-xs text-gray-400\">\n                              Puede aprobar o rechazar solicitudes de afiliación\n                            </div>\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={createForm.control}\n                      name=\"pauseAffiliate\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"checkbox-create-pauseAffiliate\"\n                            />\n                          </FormControl>\n                          <div className=\"space-y-1 leading-none\">\n                            <FormLabel className=\"text-white flex items-center\">\n                              <Pause className=\"w-4 h-4 mr-2 text-yellow-400\" />\n                              Pausar Afiliados\n                            </FormLabel>\n                            <div className=\"text-xs text-gray-400\">\n                              Puede pausar o reactivar afiliados\n                            </div>\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  \n                  <div className=\"mt-3 p-2 bg-blue-900/20 rounded border border-blue-500/20\">\n                    <p className=\"text-xs text-blue-300 flex items-center\">\n                      <Shield className=\"w-3 h-3 mr-1\" />\n                      Los administradores tienen automáticamente todos los permisos\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-2 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsCreateDialogOpen(false)}\n                    className=\"border-gray-700 text-gray-400 hover:bg-gray-800\"\n                    data-testid=\"button-create-cancel\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createUserMutation.isPending}\n                    className=\"bg-purple-600 hover:bg-purple-700\"\n                    data-testid=\"button-create-submit\"\n                  >\n                    {createUserMutation.isPending ? \"Creando...\" : \"Crear Usuario\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit User Dialog */}\n        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n          <DialogContent className=\"bg-gray-900 border-gray-700 text-white\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center\">\n                <Edit className=\"w-5 h-5 mr-2 text-purple-400\" />\n                Editar Usuario\n              </DialogTitle>\n              <DialogDescription className=\"text-gray-400\">\n                Modifica la información del usuario\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...editForm}>\n              <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-4 max-h-[70vh] overflow-y-auto\">\n                <FormField\n                  control={editForm.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-white\">Nombre de Usuario</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"Ingresa el nombre de usuario\"\n                          className=\"bg-gray-800 border-gray-700 text-white\"\n                          data-testid=\"input-edit-username\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={editForm.control}\n                  name=\"role\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-white\">Rol</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger \n                            className=\"bg-gray-800 border-gray-700 text-white\"\n                            data-testid=\"select-edit-role\"\n                          >\n                            <SelectValue placeholder=\"Selecciona un rol\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent className=\"bg-gray-800 border-gray-700\">\n                          <SelectItem value=\"admin\" className=\"text-white hover:bg-gray-700\">\n                            <div className=\"flex items-center\">\n                              <Shield className=\"w-4 h-4 mr-2 text-purple-400\" />\n                              Administrador\n                            </div>\n                          </SelectItem>\n                          <SelectItem value=\"sales\" className=\"text-white hover:bg-gray-700\">\n                            <div className=\"flex items-center\">\n                              <User className=\"w-4 h-4 mr-2 text-green-400\" />\n                              Ventas\n                            </div>\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={editForm.control}\n                  name=\"active\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border border-gray-700 bg-gray-800/50 p-4\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel className=\"text-base text-white\">\n                          Usuario Activo\n                        </FormLabel>\n                        <div className=\"text-sm text-gray-400\">\n                          Determina si el usuario puede acceder al sistema\n                        </div>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          data-testid=\"switch-edit-active\"\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                {/* Granular Permissions Section */}\n                <div className=\"rounded-lg border border-gray-700 bg-gray-800/50 p-4\">\n                  <div className=\"space-y-0.5 mb-4\">\n                    <h3 className=\"text-base font-medium text-white\">Permisos Granulares</h3>\n                    <p className=\"text-sm text-gray-400\">\n                      Modifica los permisos específicos para este usuario\n                    </p>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={editForm.control}\n                      name=\"editInventory\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"checkbox-edit-editInventory\"\n                            />\n                          </FormControl>\n                          <div className=\"space-y-1 leading-none\">\n                            <FormLabel className=\"text-white flex items-center\">\n                              <Package className=\"w-4 h-4 mr-2 text-blue-400\" />\n                              Editar Inventario\n                            </FormLabel>\n                            <div className=\"text-xs text-gray-400\">\n                              Puede modificar cantidades de productos\n                            </div>\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={editForm.control}\n                      name=\"addProduct\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"checkbox-edit-addProduct\"\n                            />\n                          </FormControl>\n                          <div className=\"space-y-1 leading-none\">\n                            <FormLabel className=\"text-white flex items-center\">\n                              <PackagePlus className=\"w-4 h-4 mr-2 text-green-400\" />\n                              Agregar Productos\n                            </FormLabel>\n                            <div className=\"text-xs text-gray-400\">\n                              Puede crear nuevos productos\n                            </div>\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={editForm.control}\n                      name=\"deleteItems\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"checkbox-edit-deleteItems\"\n                            />\n                          </FormControl>\n                          <div className=\"space-y-1 leading-none\">\n                            <FormLabel className=\"text-white flex items-center\">\n                              <Trash2 className=\"w-4 h-4 mr-2 text-red-400\" />\n                              Eliminar Elementos\n                            </FormLabel>\n                            <div className=\"text-xs text-gray-400\">\n                              Puede eliminar productos y otros elementos\n                            </div>\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={editForm.control}\n                      name=\"deleteAffiliate\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"checkbox-edit-deleteAffiliate\"\n                            />\n                          </FormControl>\n                          <div className=\"space-y-1 leading-none\">\n                            <FormLabel className=\"text-white flex items-center\">\n                              <UserX className=\"w-4 h-4 mr-2 text-red-400\" />\n                              Eliminar Afiliados\n                            </FormLabel>\n                            <div className=\"text-xs text-gray-400\">\n                              Puede eliminar registros de afiliados\n                            </div>\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={editForm.control}\n                      name=\"authorizeAffiliate\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"checkbox-edit-authorizeAffiliate\"\n                            />\n                          </FormControl>\n                          <div className=\"space-y-1 leading-none\">\n                            <FormLabel className=\"text-white flex items-center\">\n                              <UserCheck className=\"w-4 h-4 mr-2 text-green-400\" />\n                              Autorizar Afiliados\n                            </FormLabel>\n                            <div className=\"text-xs text-gray-400\">\n                              Puede aprobar o rechazar solicitudes de afiliación\n                            </div>\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={editForm.control}\n                      name=\"pauseAffiliate\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"checkbox-edit-pauseAffiliate\"\n                            />\n                          </FormControl>\n                          <div className=\"space-y-1 leading-none\">\n                            <FormLabel className=\"text-white flex items-center\">\n                              <Pause className=\"w-4 h-4 mr-2 text-yellow-400\" />\n                              Pausar Afiliados\n                            </FormLabel>\n                            <div className=\"text-xs text-gray-400\">\n                              Puede pausar o reactivar afiliados\n                            </div>\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  \n                  <div className=\"mt-3 p-2 bg-blue-900/20 rounded border border-blue-500/20\">\n                    <p className=\"text-xs text-blue-300 flex items-center\">\n                      <Shield className=\"w-3 h-3 mr-1\" />\n                      Los administradores tienen automáticamente todos los permisos\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-2 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      setIsEditDialogOpen(false);\n                      setSelectedUser(null);\n                    }}\n                    className=\"border-gray-700 text-gray-400 hover:bg-gray-800\"\n                    data-testid=\"button-edit-cancel\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={updateUserMutation.isPending}\n                    className=\"bg-purple-600 hover:bg-purple-700\"\n                    data-testid=\"button-edit-submit\"\n                  >\n                    {updateUserMutation.isPending ? \"Guardando...\" : \"Guardar Cambios\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Reset Password Dialog */}\n        <Dialog open={isPasswordDialogOpen} onOpenChange={setIsPasswordDialogOpen}>\n          <DialogContent className=\"bg-gray-900 border-gray-700 text-white\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center\">\n                <Lock className=\"w-5 h-5 mr-2 text-purple-400\" />\n                Restablecer Contraseña\n              </DialogTitle>\n              <DialogDescription className=\"text-gray-400\">\n                {selectedUser && `Establece una nueva contraseña para ${selectedUser.username}`}\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...passwordForm}>\n              <form onSubmit={passwordForm.handleSubmit(onPasswordSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={passwordForm.control}\n                  name=\"newPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-white\">Nueva Contraseña</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"password\"\n                          placeholder=\"Ingresa la nueva contraseña\"\n                          className=\"bg-gray-800 border-gray-700 text-white\"\n                          data-testid=\"input-reset-password\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                      <div className=\"text-xs text-gray-400 space-y-1\">\n                        <div>La contraseña debe contener:</div>\n                        <ul className=\"list-disc list-inside space-y-1 ml-2\">\n                          <li>Al menos 8 caracteres</li>\n                          <li>Una letra mayúscula y una minúscula</li>\n                          <li>Un número y un carácter especial</li>\n                        </ul>\n                      </div>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={passwordForm.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-white\">Confirmar Nueva Contraseña</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"password\"\n                          placeholder=\"Confirma la nueva contraseña\"\n                          className=\"bg-gray-800 border-gray-700 text-white\"\n                          data-testid=\"input-confirm-reset-password\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-2 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      setIsPasswordDialogOpen(false);\n                      setSelectedUser(null);\n                    }}\n                    className=\"border-gray-700 text-gray-400 hover:bg-gray-800\"\n                    data-testid=\"button-password-cancel\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={resetPasswordMutation.isPending}\n                    className=\"bg-purple-600 hover:bg-purple-700\"\n                    data-testid=\"button-password-submit\"\n                  >\n                    {resetPasswordMutation.isPending ? \"Restableciendo...\" : \"Restablecer Contraseña\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Delete User Confirmation Dialog */}\n        <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n          <DialogContent className=\"bg-gray-900 border-gray-700 text-white\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center text-red-400\">\n                <Trash2 className=\"w-5 h-5 mr-2\" />\n                Confirmar Eliminación\n              </DialogTitle>\n              <DialogDescription className=\"text-gray-400\">\n                Esta acción no se puede deshacer. ¿Estás seguro de que quieres eliminar este usuario?\n              </DialogDescription>\n            </DialogHeader>\n            \n            {selectedUser && (\n              <div className=\"bg-red-900/20 border border-red-500/20 rounded-lg p-4 my-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"w-10 h-10 bg-red-600 rounded-full flex items-center justify-center\">\n                      <User className=\"w-5 h-5 text-white\" />\n                    </div>\n                  </div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"text-sm font-medium text-white\">\n                      {selectedUser.username}\n                    </h4>\n                    <p className=\"text-sm text-red-300\">\n                      Rol: {selectedUser.role === 'admin' ? 'Administrador' : 'Ventas'}\n                    </p>\n                    <p className=\"text-sm text-red-300\">\n                      Estado: {selectedUser.active ? 'Activo' : 'Inactivo'}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => {\n                  setIsDeleteDialogOpen(false);\n                  setSelectedUser(null);\n                }}\n                className=\"border-gray-700 text-gray-400 hover:bg-gray-800\"\n                data-testid=\"button-delete-cancel\"\n              >\n                Cancelar\n              </Button>\n              <Button\n                type=\"button\"\n                onClick={confirmDeleteUser}\n                disabled={deleteUserMutation.isPending}\n                className=\"bg-red-600 hover:bg-red-700 text-white\"\n                data-testid=\"button-delete-confirm\"\n              >\n                {deleteUserMutation.isPending ? \"Eliminando...\" : \"Eliminar Usuario\"}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":58088},"client/src/components/AdminProfileDropdown.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  User,\n  Lock,\n  Users,\n  LogOut,\n  Settings,\n  ChevronDown,\n} from \"lucide-react\";\nimport {\n  changePasswordSchema,\n  type ChangePassword,\n} from \"@shared/schema\";\n\nexport default function AdminProfileDropdown() {\n  const { user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isPasswordDialogOpen, setIsPasswordDialogOpen] = useState(false);\n\n  // Password change form\n  const passwordForm = useForm<ChangePassword>({\n    resolver: zodResolver(changePasswordSchema),\n    defaultValues: {\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  // Change password mutation\n  const changePasswordMutation = useMutation({\n    mutationFn: (data: ChangePassword) => apiRequest(`/api/admin/me/password`, \"PATCH\", data),\n    onSuccess: () => {\n      toast({\n        title: \"Contraseña actualizada\",\n        description: \"Tu contraseña ha sido cambiada exitosamente\",\n      });\n      passwordForm.reset();\n      setIsPasswordDialogOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Error al cambiar la contraseña\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logout();\n    setLocation(\"/admin/login\");\n  };\n\n  const handlePasswordSubmit = (data: ChangePassword) => {\n    changePasswordMutation.mutate(data);\n  };\n\n  const handleManageUsers = () => {\n    setLocation(\"/admin/users\");\n  };\n\n  const handleProfileSettings = () => {\n    setLocation(\"/admin/profile\");\n  };\n\n  if (!user) return null;\n\n  return (\n    <>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            className=\"flex items-center gap-2 text-white hover:bg-purple-500/10 border border-purple-500/20 hover:border-purple-500/40\"\n            data-testid=\"button-profile-dropdown\"\n          >\n            <Avatar className=\"h-8 w-8\">\n              <AvatarFallback className=\"bg-purple-600 text-white text-sm\">\n                {user.username.charAt(0).toUpperCase()}\n              </AvatarFallback>\n            </Avatar>\n            <span className=\"hidden md:inline\">{user.username}</span>\n            <ChevronDown className=\"h-4 w-4\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent \n          align=\"end\" \n          className=\"w-56 bg-gray-900 border-purple-500/20 text-white\"\n          data-testid=\"dropdown-profile-content\"\n        >\n          <div className=\"px-2 py-1.5\">\n            <p className=\"text-sm font-medium text-white\">{user.username}</p>\n            <p className=\"text-xs text-gray-400\">\n              {user.role === 'admin' ? 'Administrador' : 'Ventas'}\n            </p>\n          </div>\n          <DropdownMenuSeparator className=\"bg-purple-500/20\" />\n          \n          <DropdownMenuItem\n            onClick={handleProfileSettings}\n            className=\"text-white hover:bg-purple-500/10 cursor-pointer\"\n            data-testid=\"menu-profile-settings\"\n          >\n            <Settings className=\"mr-2 h-4 w-4\" />\n            Configuración de Perfil\n          </DropdownMenuItem>\n\n          <DropdownMenuItem\n            onClick={() => setIsPasswordDialogOpen(true)}\n            className=\"text-white hover:bg-purple-500/10 cursor-pointer\"\n            data-testid=\"menu-change-password\"\n          >\n            <Lock className=\"mr-2 h-4 w-4\" />\n            Cambiar Contraseña\n          </DropdownMenuItem>\n\n          {user.role === 'admin' && (\n            <DropdownMenuItem\n              onClick={handleManageUsers}\n              className=\"text-white hover:bg-purple-500/10 cursor-pointer\"\n              data-testid=\"menu-manage-users\"\n            >\n              <Users className=\"mr-2 h-4 w-4\" />\n              Gestionar Usuarios\n            </DropdownMenuItem>\n          )}\n\n          <DropdownMenuSeparator className=\"bg-purple-500/20\" />\n          \n          <DropdownMenuItem\n            onClick={handleLogout}\n            className=\"text-red-400 hover:bg-red-500/10 cursor-pointer\"\n            data-testid=\"menu-logout\"\n          >\n            <LogOut className=\"mr-2 h-4 w-4\" />\n            Cerrar Sesión\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      {/* Password Change Dialog */}\n      <Dialog open={isPasswordDialogOpen} onOpenChange={setIsPasswordDialogOpen}>\n        <DialogContent className=\"bg-gray-900 border-purple-500/20 text-white\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center\">\n              <Lock className=\"w-5 h-5 mr-2 text-purple-400\" />\n              Cambiar Contraseña\n            </DialogTitle>\n            <DialogDescription className=\"text-gray-400\">\n              Actualiza tu contraseña por motivos de seguridad\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...passwordForm}>\n            <form onSubmit={passwordForm.handleSubmit(handlePasswordSubmit)} className=\"space-y-4\">\n              <FormField\n                control={passwordForm.control}\n                name=\"currentPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Contraseña Actual</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"password\"\n                        placeholder=\"Ingresa tu contraseña actual\"\n                        className=\"bg-gray-800 border-gray-700 text-white\"\n                        data-testid=\"input-current-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={passwordForm.control}\n                name=\"newPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Nueva Contraseña</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"password\"\n                        placeholder=\"Ingresa tu nueva contraseña\"\n                        className=\"bg-gray-800 border-gray-700 text-white\"\n                        data-testid=\"input-new-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                    <div className=\"text-xs text-gray-400 space-y-1\">\n                      <div>La contraseña debe contener:</div>\n                      <ul className=\"list-disc list-inside space-y-1 ml-2\">\n                        <li>Al menos 8 caracteres</li>\n                        <li>Una letra mayúscula</li>\n                        <li>Una letra minúscula</li>\n                        <li>Un número</li>\n                        <li>Un carácter especial</li>\n                      </ul>\n                    </div>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={passwordForm.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-white\">Confirmar Nueva Contraseña</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"password\"\n                        placeholder=\"Confirma tu nueva contraseña\"\n                        className=\"bg-gray-800 border-gray-700 text-white\"\n                        data-testid=\"input-confirm-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsPasswordDialogOpen(false)}\n                  className=\"border-gray-700 text-gray-400 hover:bg-gray-800\"\n                  data-testid=\"button-password-cancel\"\n                >\n                  Cancelar\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={changePasswordMutation.isPending}\n                  className=\"bg-purple-600 hover:bg-purple-700\"\n                  data-testid=\"button-password-submit\"\n                >\n                  {changePasswordMutation.isPending ? \"Cambiando...\" : \"Cambiar Contraseña\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":9692},"client/src/pages/AdminMessages.tsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  ArrowLeft, \n  MessageSquare,\n  User,\n  Mail,\n  Calendar,\n  Eye,\n  EyeOff,\n  MessageCircle,\n  CheckCircle\n} from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\nimport AdminProfileDropdown from \"@/components/AdminProfileDropdown\";\n\ninterface ContactMessage {\n  id: string;\n  name: string;\n  email: string;\n  message: string;\n  status: string;\n  createdAt: string;\n}\n\nexport default function AdminMessages() {\n  const { user, token } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [sortBy, setSortBy] = useState<'date' | 'status' | 'name'>('date');\n  const [expandedMessage, setExpandedMessage] = useState<string | null>(null);\n\n  // Redirect if not logged in\n  if (!user) {\n    setLocation(\"/admin/login\");\n    return null;\n  }\n\n  const { data: messages, isLoading } = useQuery({\n    queryKey: [\"/api/admin/messages\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/messages\", {\n        headers: {\n          Authorization: token || \"\",\n        },\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch messages\");\n      }\n      const result = await response.json();\n      return result.data as ContactMessage[];\n    },\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      const response = await fetch(`/api/admin/messages/${id}/status`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token || \"\",\n        },\n        body: JSON.stringify({ status }),\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to update message status\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/messages\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/dashboard\"] });\n      toast({\n        title: \"Estado actualizado\",\n        description: \"El estado del mensaje se ha actualizado correctamente\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo actualizar el estado del mensaje\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUpdateStatus = (id: string, status: string) => {\n    updateStatusMutation.mutate({ id, status });\n  };\n\n  const handleToggleExpand = (messageId: string, currentStatus: string) => {\n    setExpandedMessage(expandedMessage === messageId ? null : messageId);\n    \n    // Auto-mark as read when expanding unread messages\n    if (expandedMessage !== messageId && currentStatus === 'unread') {\n      handleUpdateStatus(messageId, 'read');\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"unread\":\n        return <Badge variant=\"secondary\" className=\"bg-red-500/10 text-red-400\">No leído</Badge>;\n      case \"read\":\n        return <Badge variant=\"secondary\" className=\"bg-blue-500/10 text-blue-400\">Leído</Badge>;\n      case \"replied\":\n        return <Badge variant=\"secondary\" className=\"bg-green-500/10 text-green-400\">Respondido</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const sortedMessages = messages?.sort((a, b) => {\n    switch (sortBy) {\n      case 'date':\n        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n      case 'status':\n        const statusOrder = { 'unread': 0, 'read': 1, 'replied': 2 };\n        return (statusOrder[a.status as keyof typeof statusOrder] || 3) - (statusOrder[b.status as keyof typeof statusOrder] || 3);\n      case 'name':\n        return a.name.localeCompare(b.name);\n      default:\n        return 0;\n    }\n  });\n\n  const unreadCount = messages?.filter(message => message.status === 'unread').length || 0;\n  const readCount = messages?.filter(message => message.status === 'read').length || 0;\n  const repliedCount = messages?.filter(message => message.status === 'replied').length || 0;\n\n  return (\n    <div className=\"min-h-screen bg-black\">\n      {/* Header */}\n      <header className=\"bg-gray-900 border-b border-purple-500/20 p-4\">\n        <div className=\"max-w-7xl mx-auto flex justify-between items-center\">\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setLocation(\"/admin\")}\n              className=\"border-purple-500/50 text-purple-400 hover:bg-purple-500/10\"\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Volver al Dashboard\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-white\">Gestión de Mensajes</h1>\n              <p className=\"text-gray-400\">Revisar y gestionar mensajes de contacto</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <AdminProfileDropdown />\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto p-6\">\n        {/* Stats Summary */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n          <Card className=\"bg-gray-900 border-purple-500/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-white\">No Leídos</CardTitle>\n              <MessageSquare className=\"h-4 w-4 text-red-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-white\" data-testid=\"stat-unread-messages\">\n                {unreadCount}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900 border-purple-500/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-white\">Leídos</CardTitle>\n              <Eye className=\"h-4 w-4 text-blue-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-white\" data-testid=\"stat-read-messages\">\n                {readCount}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900 border-purple-500/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-white\">Respondidos</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-green-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-white\" data-testid=\"stat-replied-messages\">\n                {repliedCount}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Sorting Options */}\n        <div className=\"flex gap-2 mb-6\">\n          <Button\n            variant={sortBy === 'date' ? 'default' : 'outline'}\n            onClick={() => setSortBy('date')}\n            size=\"sm\"\n            className={sortBy === 'date' ? 'bg-purple-600 hover:bg-purple-700' : 'border-purple-500/50 text-purple-400 hover:bg-purple-500/10'}\n            data-testid=\"sort-date\"\n          >\n            <Calendar className=\"w-4 h-4 mr-2\" />\n            Por Fecha\n          </Button>\n          <Button\n            variant={sortBy === 'status' ? 'default' : 'outline'}\n            onClick={() => setSortBy('status')}\n            size=\"sm\"\n            className={sortBy === 'status' ? 'bg-purple-600 hover:bg-purple-700' : 'border-purple-500/50 text-purple-400 hover:bg-purple-500/10'}\n            data-testid=\"sort-status\"\n          >\n            <MessageSquare className=\"w-4 h-4 mr-2\" />\n            Por Estado\n          </Button>\n          <Button\n            variant={sortBy === 'name' ? 'default' : 'outline'}\n            onClick={() => setSortBy('name')}\n            size=\"sm\"\n            className={sortBy === 'name' ? 'bg-purple-600 hover:bg-purple-700' : 'border-purple-500/50 text-purple-400 hover:bg-purple-500/10'}\n            data-testid=\"sort-name\"\n          >\n            <User className=\"w-4 h-4 mr-2\" />\n            Por Nombre\n          </Button>\n        </div>\n\n        {/* Messages List */}\n        {isLoading ? (\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <Card key={i} className=\"bg-gray-900 border-purple-500/20\">\n                <CardHeader>\n                  <Skeleton className=\"h-6 w-48 bg-gray-800\" />\n                  <Skeleton className=\"h-4 w-32 bg-gray-800\" />\n                </CardHeader>\n                <CardContent>\n                  <Skeleton className=\"h-20 bg-gray-800\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {sortedMessages?.length === 0 ? (\n              <Card className=\"bg-gray-900 border-purple-500/20\">\n                <CardContent className=\"text-center py-12\">\n                  <MessageSquare className=\"w-12 h-12 text-gray-600 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">No hay mensajes</h3>\n                  <p className=\"text-gray-400\">Los mensajes de contacto aparecerán aquí</p>\n                </CardContent>\n              </Card>\n            ) : (\n              sortedMessages?.map((message) => (\n                <Card key={message.id} className=\"bg-gray-900 border-purple-500/20\">\n                  <CardHeader>\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-white flex items-center gap-2\">\n                          <MessageSquare className=\"w-5 h-5 text-purple-400\" />\n                          {message.name}\n                          {getStatusBadge(message.status)}\n                        </CardTitle>\n                        <div className=\"text-sm text-gray-400 mt-2 space-y-1\">\n                          <div className=\"flex items-center gap-2\">\n                            <Mail className=\"w-4 h-4\" />\n                            {message.email}\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Calendar className=\"w-4 h-4\" />\n                            {format(new Date(message.createdAt), \"dd/MM/yyyy HH:mm\")}\n                          </div>\n                        </div>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleToggleExpand(message.id, message.status)}\n                        className=\"text-purple-400 hover:bg-purple-500/10\"\n                        data-testid={`button-expand-${message.id}`}\n                      >\n                        {expandedMessage === message.id ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                        {expandedMessage === message.id ? 'Ocultar' : 'Ver mensaje'}\n                      </Button>\n                    </div>\n                  </CardHeader>\n                  \n                  {expandedMessage === message.id && (\n                    <CardContent>\n                      <div className=\"mb-4 p-4 bg-gray-800 rounded-lg\">\n                        <p className=\"text-gray-300 whitespace-pre-wrap\">\n                          {message.message}\n                        </p>\n                      </div>\n                      \n                      <div className=\"flex gap-3 flex-wrap\">\n                        {message.status === \"unread\" && (\n                          <Button\n                            onClick={() => handleUpdateStatus(message.id, \"read\")}\n                            disabled={updateStatusMutation.isPending}\n                            className=\"bg-blue-600 hover:bg-blue-700\"\n                            size=\"sm\"\n                            data-testid={`button-mark-read-${message.id}`}\n                          >\n                            <Eye className=\"w-4 h-4 mr-2\" />\n                            Marcar como Leído\n                          </Button>\n                        )}\n                        \n                        {(message.status === \"read\" || message.status === \"unread\") && (\n                          <Button\n                            onClick={() => handleUpdateStatus(message.id, \"replied\")}\n                            disabled={updateStatusMutation.isPending}\n                            className=\"bg-green-600 hover:bg-green-700\"\n                            size=\"sm\"\n                            data-testid={`button-mark-replied-${message.id}`}\n                          >\n                            <MessageCircle className=\"w-4 h-4 mr-2\" />\n                            Marcar como Respondido\n                          </Button>\n                        )}\n                        \n                        {message.status === \"replied\" && (\n                          <Button\n                            onClick={() => handleUpdateStatus(message.id, \"read\")}\n                            disabled={updateStatusMutation.isPending}\n                            variant=\"outline\"\n                            className=\"border-blue-500/50 text-blue-400 hover:bg-blue-500/10\"\n                            size=\"sm\"\n                            data-testid={`button-mark-unresponded-${message.id}`}\n                          >\n                            <Eye className=\"w-4 h-4 mr-2\" />\n                            Marcar como No Respondido\n                          </Button>\n                        )}\n                        \n                        {message.status !== \"unread\" && (\n                          <Button\n                            onClick={() => handleUpdateStatus(message.id, \"unread\")}\n                            disabled={updateStatusMutation.isPending}\n                            variant=\"outline\"\n                            className=\"border-red-500/50 text-red-400 hover:bg-red-500/10\"\n                            size=\"sm\"\n                            data-testid={`button-mark-unread-${message.id}`}\n                          >\n                            <EyeOff className=\"w-4 h-4 mr-2\" />\n                            Marcar como No Leído\n                          </Button>\n                        )}\n                      </div>\n                    </CardContent>\n                  )}\n                </Card>\n              ))\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":15156},"client/src/pages/AdminSales.tsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  ArrowLeft, \n  ShoppingCart,\n  User,\n  Phone,\n  Mail,\n  Calendar,\n  DollarSign,\n  Package,\n  CheckCircle,\n  X,\n  Clock\n} from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\nimport AdminProfileDropdown from \"@/components/AdminProfileDropdown\";\n\ninterface Sale {\n  id: string;\n  affiliateId?: string;\n  productId: string;\n  quantity: number;\n  unitPrice: string;\n  discount?: string;\n  totalAmount: string;\n  customerName?: string;\n  customerEmail?: string;\n  customerPhone?: string;\n  status: string;\n  createdAt: string;\n}\n\nexport default function AdminSales() {\n  const { user, token } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [sortBy, setSortBy] = useState<'date' | 'amount' | 'status'>('date');\n\n  // Redirect if not logged in\n  if (!user) {\n    setLocation(\"/admin/login\");\n    return null;\n  }\n\n  const { data: sales, isLoading } = useQuery({\n    queryKey: [\"/api/admin/sales\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/sales\", {\n        headers: {\n          Authorization: token || \"\",\n        },\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch sales\");\n      }\n      const result = await response.json();\n      return result.data as Sale[];\n    },\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      const response = await fetch(`/api/admin/sales/${id}/status`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token || \"\",\n        },\n        body: JSON.stringify({ status }),\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to update sale status\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/sales\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/dashboard\"] });\n      toast({\n        title: \"Estado actualizado\",\n        description: \"El estado de la venta se ha actualizado correctamente\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo actualizar el estado de la venta\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUpdateStatus = (id: string, status: string) => {\n    updateStatusMutation.mutate({ id, status });\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <Badge variant=\"secondary\" className=\"bg-yellow-500/10 text-yellow-400\">Pendiente</Badge>;\n      case \"completed\":\n        return <Badge variant=\"secondary\" className=\"bg-green-500/10 text-green-400\">Completada</Badge>;\n      case \"cancelled\":\n        return <Badge variant=\"secondary\" className=\"bg-red-500/10 text-red-400\">Cancelada</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const sortedSales = sales?.sort((a, b) => {\n    switch (sortBy) {\n      case 'date':\n        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n      case 'amount':\n        return parseFloat(b.totalAmount) - parseFloat(a.totalAmount);\n      case 'status':\n        return a.status.localeCompare(b.status);\n      default:\n        return 0;\n    }\n  });\n\n  const totalRevenue = sales?.reduce((sum, sale) => {\n    if (sale.status === 'completed') {\n      return sum + parseFloat(sale.totalAmount);\n    }\n    return sum;\n  }, 0) || 0;\n\n  const completedSales = sales?.filter(sale => sale.status === 'completed').length || 0;\n  const pendingSales = sales?.filter(sale => sale.status === 'pending').length || 0;\n\n  return (\n    <div className=\"min-h-screen bg-black\">\n      {/* Header */}\n      <header className=\"bg-gray-900 border-b border-purple-500/20 p-4\">\n        <div className=\"max-w-7xl mx-auto flex justify-between items-center\">\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setLocation(\"/admin\")}\n              className=\"border-purple-500/50 text-purple-400 hover:bg-purple-500/10\"\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Volver al Dashboard\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-white\">Gestión de Ventas</h1>\n              <p className=\"text-gray-400\">Revisar y gestionar todas las ventas</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <AdminProfileDropdown />\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto p-6\">\n        {/* Stats Summary */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n          <Card className=\"bg-gray-900 border-purple-500/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-white\">Total Ventas</CardTitle>\n              <ShoppingCart className=\"h-4 w-4 text-green-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-white\" data-testid=\"stat-total-sales\">\n                {sales?.length || 0}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900 border-purple-500/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-white\">Ventas Completadas</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-green-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-white\" data-testid=\"stat-completed-sales\">\n                {completedSales}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900 border-purple-500/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-white\">Ingresos Totales</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-blue-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-white\" data-testid=\"stat-revenue\">\n                Q{totalRevenue.toFixed(2)}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Sorting Options */}\n        <div className=\"flex gap-2 mb-6\">\n          <Button\n            variant={sortBy === 'date' ? 'default' : 'outline'}\n            onClick={() => setSortBy('date')}\n            size=\"sm\"\n            className={sortBy === 'date' ? 'bg-purple-600 hover:bg-purple-700' : 'border-purple-500/50 text-purple-400 hover:bg-purple-500/10'}\n            data-testid=\"sort-date\"\n          >\n            <Calendar className=\"w-4 h-4 mr-2\" />\n            Por Fecha\n          </Button>\n          <Button\n            variant={sortBy === 'amount' ? 'default' : 'outline'}\n            onClick={() => setSortBy('amount')}\n            size=\"sm\"\n            className={sortBy === 'amount' ? 'bg-purple-600 hover:bg-purple-700' : 'border-purple-500/50 text-purple-400 hover:bg-purple-500/10'}\n            data-testid=\"sort-amount\"\n          >\n            <DollarSign className=\"w-4 h-4 mr-2\" />\n            Por Monto\n          </Button>\n          <Button\n            variant={sortBy === 'status' ? 'default' : 'outline'}\n            onClick={() => setSortBy('status')}\n            size=\"sm\"\n            className={sortBy === 'status' ? 'bg-purple-600 hover:bg-purple-700' : 'border-purple-500/50 text-purple-400 hover:bg-purple-500/10'}\n            data-testid=\"sort-status\"\n          >\n            <CheckCircle className=\"w-4 h-4 mr-2\" />\n            Por Estado\n          </Button>\n        </div>\n\n        {/* Sales List */}\n        {isLoading ? (\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <Card key={i} className=\"bg-gray-900 border-purple-500/20\">\n                <CardHeader>\n                  <Skeleton className=\"h-6 w-48 bg-gray-800\" />\n                  <Skeleton className=\"h-4 w-32 bg-gray-800\" />\n                </CardHeader>\n                <CardContent>\n                  <Skeleton className=\"h-20 bg-gray-800\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {sortedSales?.length === 0 ? (\n              <Card className=\"bg-gray-900 border-purple-500/20\">\n                <CardContent className=\"text-center py-12\">\n                  <ShoppingCart className=\"w-12 h-12 text-gray-600 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">No hay ventas registradas</h3>\n                  <p className=\"text-gray-400\">Las ventas aparecerán aquí cuando se realicen</p>\n                </CardContent>\n              </Card>\n            ) : (\n              sortedSales?.map((sale) => (\n                <Card key={sale.id} className=\"bg-gray-900 border-purple-500/20\">\n                  <CardHeader>\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <CardTitle className=\"text-white flex items-center gap-2\">\n                          <Package className=\"w-5 h-5 text-purple-400\" />\n                          Venta #{sale.id.slice(-8)}\n                          {getStatusBadge(sale.status)}\n                        </CardTitle>\n                        <div className=\"text-sm text-gray-400 mt-2 space-y-1\">\n                          {sale.customerName && (\n                            <div className=\"flex items-center gap-2\">\n                              <User className=\"w-4 h-4\" />\n                              Cliente: {sale.customerName}\n                            </div>\n                          )}\n                          {sale.customerPhone && (\n                            <div className=\"flex items-center gap-2\">\n                              <Phone className=\"w-4 h-4\" />\n                              {sale.customerPhone}\n                            </div>\n                          )}\n                          {sale.customerEmail && (\n                            <div className=\"flex items-center gap-2\">\n                              <Mail className=\"w-4 h-4\" />\n                              {sale.customerEmail}\n                            </div>\n                          )}\n                          <div className=\"flex items-center gap-2\">\n                            <Calendar className=\"w-4 h-4\" />\n                            {format(new Date(sale.createdAt), \"dd/MM/yyyy HH:mm\")}\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold text-white\">\n                          Q{parseFloat(sale.totalAmount).toFixed(2)}\n                        </div>\n                        <div className=\"text-sm text-gray-400\">\n                          {sale.quantity} unidad{sale.quantity !== 1 ? 'es' : ''}\n                        </div>\n                        {sale.discount && parseFloat(sale.discount) > 0 && (\n                          <div className=\"text-sm text-green-400\">\n                            Descuento: {sale.discount}%\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"flex gap-3 flex-wrap\">\n                      {sale.status === \"pending\" && (\n                        <>\n                          <Button\n                            onClick={() => handleUpdateStatus(sale.id, \"completed\")}\n                            disabled={updateStatusMutation.isPending}\n                            className=\"bg-green-600 hover:bg-green-700\"\n                            size=\"sm\"\n                            data-testid={`button-complete-${sale.id}`}\n                          >\n                            <CheckCircle className=\"w-4 h-4 mr-2\" />\n                            Marcar Completada\n                          </Button>\n                          <Button\n                            onClick={() => handleUpdateStatus(sale.id, \"cancelled\")}\n                            disabled={updateStatusMutation.isPending}\n                            variant=\"outline\"\n                            className=\"border-red-500/50 text-red-400 hover:bg-red-500/10\"\n                            size=\"sm\"\n                            data-testid={`button-cancel-${sale.id}`}\n                          >\n                            <X className=\"w-4 h-4 mr-2\" />\n                            Cancelar\n                          </Button>\n                        </>\n                      )}\n                      {sale.status === \"completed\" && (\n                        <Button\n                          onClick={() => handleUpdateStatus(sale.id, \"pending\")}\n                          disabled={updateStatusMutation.isPending}\n                          variant=\"outline\"\n                          className=\"border-yellow-500/50 text-yellow-400 hover:bg-yellow-500/10\"\n                          size=\"sm\"\n                          data-testid={`button-revert-${sale.id}`}\n                        >\n                          <Clock className=\"w-4 h-4 mr-2\" />\n                          Marcar Pendiente\n                        </Button>\n                      )}\n                      {sale.status === \"cancelled\" && (\n                        <Button\n                          onClick={() => handleUpdateStatus(sale.id, \"pending\")}\n                          disabled={updateStatusMutation.isPending}\n                          variant=\"outline\"\n                          className=\"border-yellow-500/50 text-yellow-400 hover:bg-yellow-500/10\"\n                          size=\"sm\"\n                          data-testid={`button-restore-${sale.id}`}\n                        >\n                          <Clock className=\"w-4 h-4 mr-2\" />\n                          Restaurar\n                        </Button>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":15074}},"version":1}